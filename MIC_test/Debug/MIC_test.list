
MIC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800da40  0800da40  0000ea40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db78  0800db78  0000f06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800db78  0800db78  0000eb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db80  0800db80  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db80  0800db80  0000eb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db84  0800db84  0000eb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800db88  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa4  20000080  0800dbf4  0000f080  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  20001b24  0800dbf4  0000fb24  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002563e  00000000  00000000  0000f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059a2  00000000  00000000  000346e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0003a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c9  00000000  00000000  0003b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037021  00000000  00000000  0003cc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028de8  00000000  00000000  00073caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014d44c  00000000  00000000  0009ca92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e9ede  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a9c  00000000  00000000  001e9f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ff  00000000  00000000  001f09c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000080 	.word	0x20000080
 8000268:	00000000 	.word	0x00000000
 800026c:	0800da28 	.word	0x0800da28

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000084 	.word	0x20000084
 8000288:	0800da28 	.word	0x0800da28

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	@ (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	@ (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	@ (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	@ (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	200013cc 	.word	0x200013cc
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	@ (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	@ (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	@ (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	@ (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	@ (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	20001468 	.word	0x20001468
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	200013d0 	.word	0x200013d0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	200013d4 	.word	0x200013d4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	200019d4 	.word	0x200019d4

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	@ (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	@ (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f00b fc96 	bl	800bd98 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f00b fc03 	bl	800bc7c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20001474 	.word	0x20001474
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	200019d4 	.word	0x200019d4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	20001478 	.word	0x20001478
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	20001504 	.word	0x20001504
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	20001508 	.word	0x20001508
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	20001500 	.word	0x20001500
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	200014fc 	.word	0x200014fc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	20001468 	.word	0x20001468
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	200013d0 	.word	0x200013d0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	200013d4 	.word	0x200013d4
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <strlen>:
 80004c8:	4603      	mov	r3, r0
 80004ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	d1fb      	bne.n	80004ca <strlen+0x2>
 80004d2:	1a18      	subs	r0, r3, r0
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr

080004d8 <__aeabi_uldivmod>:
 80004d8:	b953      	cbnz	r3, 80004f0 <__aeabi_uldivmod+0x18>
 80004da:	b94a      	cbnz	r2, 80004f0 <__aeabi_uldivmod+0x18>
 80004dc:	2900      	cmp	r1, #0
 80004de:	bf08      	it	eq
 80004e0:	2800      	cmpeq	r0, #0
 80004e2:	bf1c      	itt	ne
 80004e4:	f04f 31ff 	movne.w	r1, #4294967295
 80004e8:	f04f 30ff 	movne.w	r0, #4294967295
 80004ec:	f000 b97e 	b.w	80007ec <__aeabi_idiv0>
 80004f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80004f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004f8:	f000 f806 	bl	8000508 <__udivmoddi4>
 80004fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000504:	b004      	add	sp, #16
 8000506:	4770      	bx	lr

08000508 <__udivmoddi4>:
 8000508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800050c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800050e:	460c      	mov	r4, r1
 8000510:	2b00      	cmp	r3, #0
 8000512:	d14d      	bne.n	80005b0 <__udivmoddi4+0xa8>
 8000514:	428a      	cmp	r2, r1
 8000516:	460f      	mov	r7, r1
 8000518:	4684      	mov	ip, r0
 800051a:	4696      	mov	lr, r2
 800051c:	fab2 f382 	clz	r3, r2
 8000520:	d960      	bls.n	80005e4 <__udivmoddi4+0xdc>
 8000522:	b14b      	cbz	r3, 8000538 <__udivmoddi4+0x30>
 8000524:	fa02 fe03 	lsl.w	lr, r2, r3
 8000528:	f1c3 0220 	rsb	r2, r3, #32
 800052c:	409f      	lsls	r7, r3
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f202 	lsr.w	r2, r0, r2
 8000536:	4317      	orrs	r7, r2
 8000538:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800053c:	fa1f f48e 	uxth.w	r4, lr
 8000540:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000544:	fbb7 f1f6 	udiv	r1, r7, r6
 8000548:	fb06 7711 	mls	r7, r6, r1, r7
 800054c:	fb01 f004 	mul.w	r0, r1, r4
 8000550:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000554:	4290      	cmp	r0, r2
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x62>
 8000558:	eb1e 0202 	adds.w	r2, lr, r2
 800055c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000560:	d202      	bcs.n	8000568 <__udivmoddi4+0x60>
 8000562:	4290      	cmp	r0, r2
 8000564:	f200 812d 	bhi.w	80007c2 <__udivmoddi4+0x2ba>
 8000568:	4639      	mov	r1, r7
 800056a:	1a12      	subs	r2, r2, r0
 800056c:	fa1f fc8c 	uxth.w	ip, ip
 8000570:	fbb2 f0f6 	udiv	r0, r2, r6
 8000574:	fb06 2210 	mls	r2, r6, r0, r2
 8000578:	fb00 f404 	mul.w	r4, r0, r4
 800057c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000580:	4564      	cmp	r4, ip
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x8e>
 8000584:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000588:	f100 32ff 	add.w	r2, r0, #4294967295
 800058c:	d202      	bcs.n	8000594 <__udivmoddi4+0x8c>
 800058e:	4564      	cmp	r4, ip
 8000590:	f200 811a 	bhi.w	80007c8 <__udivmoddi4+0x2c0>
 8000594:	4610      	mov	r0, r2
 8000596:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800059a:	ebac 0c04 	sub.w	ip, ip, r4
 800059e:	2100      	movs	r1, #0
 80005a0:	b125      	cbz	r5, 80005ac <__udivmoddi4+0xa4>
 80005a2:	fa2c f303 	lsr.w	r3, ip, r3
 80005a6:	2200      	movs	r2, #0
 80005a8:	e9c5 3200 	strd	r3, r2, [r5]
 80005ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d905      	bls.n	80005c0 <__udivmoddi4+0xb8>
 80005b4:	b10d      	cbz	r5, 80005ba <__udivmoddi4+0xb2>
 80005b6:	e9c5 0100 	strd	r0, r1, [r5]
 80005ba:	2100      	movs	r1, #0
 80005bc:	4608      	mov	r0, r1
 80005be:	e7f5      	b.n	80005ac <__udivmoddi4+0xa4>
 80005c0:	fab3 f183 	clz	r1, r3
 80005c4:	2900      	cmp	r1, #0
 80005c6:	d14d      	bne.n	8000664 <__udivmoddi4+0x15c>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	f0c0 80f2 	bcc.w	80007b2 <__udivmoddi4+0x2aa>
 80005ce:	4290      	cmp	r0, r2
 80005d0:	f080 80ef 	bcs.w	80007b2 <__udivmoddi4+0x2aa>
 80005d4:	4606      	mov	r6, r0
 80005d6:	4623      	mov	r3, r4
 80005d8:	4608      	mov	r0, r1
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d0e6      	beq.n	80005ac <__udivmoddi4+0xa4>
 80005de:	e9c5 6300 	strd	r6, r3, [r5]
 80005e2:	e7e3      	b.n	80005ac <__udivmoddi4+0xa4>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 80a2 	bne.w	800072e <__udivmoddi4+0x226>
 80005ea:	1a8a      	subs	r2, r1, r2
 80005ec:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80005f0:	fa1f f68e 	uxth.w	r6, lr
 80005f4:	2101      	movs	r1, #1
 80005f6:	fbb2 f4f7 	udiv	r4, r2, r7
 80005fa:	fb07 2014 	mls	r0, r7, r4, r2
 80005fe:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000602:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000606:	fb06 f004 	mul.w	r0, r6, r4
 800060a:	4290      	cmp	r0, r2
 800060c:	d90f      	bls.n	800062e <__udivmoddi4+0x126>
 800060e:	eb1e 0202 	adds.w	r2, lr, r2
 8000612:	f104 38ff 	add.w	r8, r4, #4294967295
 8000616:	bf2c      	ite	cs
 8000618:	f04f 0901 	movcs.w	r9, #1
 800061c:	f04f 0900 	movcc.w	r9, #0
 8000620:	4290      	cmp	r0, r2
 8000622:	d903      	bls.n	800062c <__udivmoddi4+0x124>
 8000624:	f1b9 0f00 	cmp.w	r9, #0
 8000628:	f000 80c8 	beq.w	80007bc <__udivmoddi4+0x2b4>
 800062c:	4644      	mov	r4, r8
 800062e:	1a12      	subs	r2, r2, r0
 8000630:	fa1f fc8c 	uxth.w	ip, ip
 8000634:	fbb2 f0f7 	udiv	r0, r2, r7
 8000638:	fb07 2210 	mls	r2, r7, r0, r2
 800063c:	fb00 f606 	mul.w	r6, r0, r6
 8000640:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000644:	4566      	cmp	r6, ip
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x152>
 8000648:	eb1e 0c0c 	adds.w	ip, lr, ip
 800064c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000650:	d202      	bcs.n	8000658 <__udivmoddi4+0x150>
 8000652:	4566      	cmp	r6, ip
 8000654:	f200 80bb 	bhi.w	80007ce <__udivmoddi4+0x2c6>
 8000658:	4610      	mov	r0, r2
 800065a:	ebac 0c06 	sub.w	ip, ip, r6
 800065e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000662:	e79d      	b.n	80005a0 <__udivmoddi4+0x98>
 8000664:	f1c1 0620 	rsb	r6, r1, #32
 8000668:	408b      	lsls	r3, r1
 800066a:	fa04 fe01 	lsl.w	lr, r4, r1
 800066e:	fa22 f706 	lsr.w	r7, r2, r6
 8000672:	fa20 fc06 	lsr.w	ip, r0, r6
 8000676:	40f4      	lsrs	r4, r6
 8000678:	408a      	lsls	r2, r1
 800067a:	431f      	orrs	r7, r3
 800067c:	ea4e 030c 	orr.w	r3, lr, ip
 8000680:	fa00 fe01 	lsl.w	lr, r0, r1
 8000684:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000688:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800068c:	fa1f fc87 	uxth.w	ip, r7
 8000690:	fbb4 f0f8 	udiv	r0, r4, r8
 8000694:	fb08 4410 	mls	r4, r8, r0, r4
 8000698:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800069c:	fb00 f90c 	mul.w	r9, r0, ip
 80006a0:	45a1      	cmp	r9, r4
 80006a2:	d90e      	bls.n	80006c2 <__udivmoddi4+0x1ba>
 80006a4:	193c      	adds	r4, r7, r4
 80006a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80006aa:	bf2c      	ite	cs
 80006ac:	f04f 0b01 	movcs.w	fp, #1
 80006b0:	f04f 0b00 	movcc.w	fp, #0
 80006b4:	45a1      	cmp	r9, r4
 80006b6:	d903      	bls.n	80006c0 <__udivmoddi4+0x1b8>
 80006b8:	f1bb 0f00 	cmp.w	fp, #0
 80006bc:	f000 8093 	beq.w	80007e6 <__udivmoddi4+0x2de>
 80006c0:	4650      	mov	r0, sl
 80006c2:	eba4 0409 	sub.w	r4, r4, r9
 80006c6:	fa1f f983 	uxth.w	r9, r3
 80006ca:	fbb4 f3f8 	udiv	r3, r4, r8
 80006ce:	fb08 4413 	mls	r4, r8, r3, r4
 80006d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80006d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006da:	45a4      	cmp	ip, r4
 80006dc:	d906      	bls.n	80006ec <__udivmoddi4+0x1e4>
 80006de:	193c      	adds	r4, r7, r4
 80006e0:	f103 38ff 	add.w	r8, r3, #4294967295
 80006e4:	d201      	bcs.n	80006ea <__udivmoddi4+0x1e2>
 80006e6:	45a4      	cmp	ip, r4
 80006e8:	d87a      	bhi.n	80007e0 <__udivmoddi4+0x2d8>
 80006ea:	4643      	mov	r3, r8
 80006ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80006f0:	eba4 040c 	sub.w	r4, r4, ip
 80006f4:	fba0 9802 	umull	r9, r8, r0, r2
 80006f8:	4544      	cmp	r4, r8
 80006fa:	46cc      	mov	ip, r9
 80006fc:	4643      	mov	r3, r8
 80006fe:	d302      	bcc.n	8000706 <__udivmoddi4+0x1fe>
 8000700:	d106      	bne.n	8000710 <__udivmoddi4+0x208>
 8000702:	45ce      	cmp	lr, r9
 8000704:	d204      	bcs.n	8000710 <__udivmoddi4+0x208>
 8000706:	3801      	subs	r0, #1
 8000708:	ebb9 0c02 	subs.w	ip, r9, r2
 800070c:	eb68 0307 	sbc.w	r3, r8, r7
 8000710:	b15d      	cbz	r5, 800072a <__udivmoddi4+0x222>
 8000712:	ebbe 020c 	subs.w	r2, lr, ip
 8000716:	eb64 0403 	sbc.w	r4, r4, r3
 800071a:	fa04 f606 	lsl.w	r6, r4, r6
 800071e:	fa22 f301 	lsr.w	r3, r2, r1
 8000722:	40cc      	lsrs	r4, r1
 8000724:	431e      	orrs	r6, r3
 8000726:	e9c5 6400 	strd	r6, r4, [r5]
 800072a:	2100      	movs	r1, #0
 800072c:	e73e      	b.n	80005ac <__udivmoddi4+0xa4>
 800072e:	fa02 fe03 	lsl.w	lr, r2, r3
 8000732:	f1c3 0120 	rsb	r1, r3, #32
 8000736:	fa04 f203 	lsl.w	r2, r4, r3
 800073a:	fa00 fc03 	lsl.w	ip, r0, r3
 800073e:	40cc      	lsrs	r4, r1
 8000740:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000744:	fa20 f101 	lsr.w	r1, r0, r1
 8000748:	fa1f f68e 	uxth.w	r6, lr
 800074c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000750:	430a      	orrs	r2, r1
 8000752:	fb07 4410 	mls	r4, r7, r0, r4
 8000756:	0c11      	lsrs	r1, r2, #16
 8000758:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800075c:	fb00 f406 	mul.w	r4, r0, r6
 8000760:	428c      	cmp	r4, r1
 8000762:	d90e      	bls.n	8000782 <__udivmoddi4+0x27a>
 8000764:	eb1e 0101 	adds.w	r1, lr, r1
 8000768:	f100 38ff 	add.w	r8, r0, #4294967295
 800076c:	bf2c      	ite	cs
 800076e:	f04f 0901 	movcs.w	r9, #1
 8000772:	f04f 0900 	movcc.w	r9, #0
 8000776:	428c      	cmp	r4, r1
 8000778:	d902      	bls.n	8000780 <__udivmoddi4+0x278>
 800077a:	f1b9 0f00 	cmp.w	r9, #0
 800077e:	d02c      	beq.n	80007da <__udivmoddi4+0x2d2>
 8000780:	4640      	mov	r0, r8
 8000782:	1b09      	subs	r1, r1, r4
 8000784:	b292      	uxth	r2, r2
 8000786:	fbb1 f4f7 	udiv	r4, r1, r7
 800078a:	fb07 1114 	mls	r1, r7, r4, r1
 800078e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000792:	fb04 f106 	mul.w	r1, r4, r6
 8000796:	4291      	cmp	r1, r2
 8000798:	d907      	bls.n	80007aa <__udivmoddi4+0x2a2>
 800079a:	eb1e 0202 	adds.w	r2, lr, r2
 800079e:	f104 38ff 	add.w	r8, r4, #4294967295
 80007a2:	d201      	bcs.n	80007a8 <__udivmoddi4+0x2a0>
 80007a4:	4291      	cmp	r1, r2
 80007a6:	d815      	bhi.n	80007d4 <__udivmoddi4+0x2cc>
 80007a8:	4644      	mov	r4, r8
 80007aa:	1a52      	subs	r2, r2, r1
 80007ac:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007b0:	e721      	b.n	80005f6 <__udivmoddi4+0xee>
 80007b2:	1a86      	subs	r6, r0, r2
 80007b4:	eb64 0303 	sbc.w	r3, r4, r3
 80007b8:	2001      	movs	r0, #1
 80007ba:	e70e      	b.n	80005da <__udivmoddi4+0xd2>
 80007bc:	3c02      	subs	r4, #2
 80007be:	4472      	add	r2, lr
 80007c0:	e735      	b.n	800062e <__udivmoddi4+0x126>
 80007c2:	3902      	subs	r1, #2
 80007c4:	4472      	add	r2, lr
 80007c6:	e6d0      	b.n	800056a <__udivmoddi4+0x62>
 80007c8:	44f4      	add	ip, lr
 80007ca:	3802      	subs	r0, #2
 80007cc:	e6e3      	b.n	8000596 <__udivmoddi4+0x8e>
 80007ce:	44f4      	add	ip, lr
 80007d0:	3802      	subs	r0, #2
 80007d2:	e742      	b.n	800065a <__udivmoddi4+0x152>
 80007d4:	3c02      	subs	r4, #2
 80007d6:	4472      	add	r2, lr
 80007d8:	e7e7      	b.n	80007aa <__udivmoddi4+0x2a2>
 80007da:	3802      	subs	r0, #2
 80007dc:	4471      	add	r1, lr
 80007de:	e7d0      	b.n	8000782 <__udivmoddi4+0x27a>
 80007e0:	3b02      	subs	r3, #2
 80007e2:	443c      	add	r4, r7
 80007e4:	e782      	b.n	80006ec <__udivmoddi4+0x1e4>
 80007e6:	3802      	subs	r0, #2
 80007e8:	443c      	add	r4, r7
 80007ea:	e76a      	b.n	80006c2 <__udivmoddi4+0x1ba>

080007ec <__aeabi_idiv0>:
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop

080007f0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007fc:	2334      	movs	r3, #52	@ 0x34
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000804:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <tx_application_define+0x44>)
 8000806:	490c      	ldr	r1, [pc, #48]	@ (8000838 <tx_application_define+0x48>)
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <tx_application_define+0x4c>)
 800080a:	f00b fcfb 	bl	800c204 <_txe_byte_pool_create>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10a      	bne.n	800082a <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <tx_application_define+0x4c>)
 8000816:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000818:	68b8      	ldr	r0, [r7, #8]
 800081a:	f000 f811 	bl	8000840 <App_ThreadX_Init>
 800081e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000826:	bf00      	nop
 8000828:	e7fd      	b.n	8000826 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000009c 	.word	0x2000009c
 8000838:	0800da40 	.word	0x0800da40
 800083c:	2000049c 	.word	0x2000049c

08000840 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	@ 0x30
 8000844:	af08      	add	r7, sp, #32
 8000846:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&audio_thread, "Audio Thread",
 800084c:	23b0      	movs	r3, #176	@ 0xb0
 800084e:	9306      	str	r3, [sp, #24]
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	2300      	movs	r3, #0
 8000856:	9304      	str	r3, [sp, #16]
 8000858:	230a      	movs	r3, #10
 800085a:	9303      	str	r3, [sp, #12]
 800085c:	230a      	movs	r3, #10
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <App_ThreadX_Init+0x4c>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <App_ThreadX_Init+0x50>)
 800086e:	4909      	ldr	r1, [pc, #36]	@ (8000894 <App_ThreadX_Init+0x54>)
 8000870:	4809      	ldr	r0, [pc, #36]	@ (8000898 <App_ThreadX_Init+0x58>)
 8000872:	f00b fe5d 	bl	800c530 <_txe_thread_create>
                   AudioThread_Entry, 0,
                   audio_thread_stack, 2048,
                   10, 10, TX_NO_TIME_SLICE, TX_AUTO_START);

  tx_semaphore_create(&data_ready_semaphore, "Audio Data Semaphore", 0);
 8000876:	231c      	movs	r3, #28
 8000878:	2200      	movs	r2, #0
 800087a:	4908      	ldr	r1, [pc, #32]	@ (800089c <App_ThreadX_Init+0x5c>)
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <App_ThreadX_Init+0x60>)
 800087e:	f00b fd61 	bl	800c344 <_txe_semaphore_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000059c 	.word	0x2000059c
 8000890:	080008b1 	.word	0x080008b1
 8000894:	0800da54 	.word	0x0800da54
 8000898:	200004d0 	.word	0x200004d0
 800089c:	0800da64 	.word	0x0800da64
 80008a0:	20000580 	.word	0x20000580

080008a4 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Before_Kernel_Start */

  /* USER CODE END Before_Kernel_Start */

  tx_kernel_enter();
 80008a8:	f00a fbb6 	bl	800b018 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN Kernel_Start_Error */

  /* USER CODE END Kernel_Start_Error */
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <AudioThread_Entry>:

/* USER CODE BEGIN 1 */
VOID AudioThread_Entry(ULONG initial_input)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	@ 0x38
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
    /* Wait for I2S and DMA initialization to complete */
    tx_thread_sleep(10);
 80008b8:	200a      	movs	r0, #10
 80008ba:	f00a ff0d 	bl	800b6d8 <_tx_thread_sleep>

    /* Start DMA transfer */
    printf("Starting audio capture...\n");
 80008be:	4840      	ldr	r0, [pc, #256]	@ (80009c0 <AudioThread_Entry+0x110>)
 80008c0:	f00c f852 	bl	800c968 <puts>
    if (HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)audioBuffer, AUDIO_BUFFER_SIZE/2) != HAL_OK)
 80008c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008c8:	493e      	ldr	r1, [pc, #248]	@ (80009c4 <AudioThread_Entry+0x114>)
 80008ca:	483f      	ldr	r0, [pc, #252]	@ (80009c8 <AudioThread_Entry+0x118>)
 80008cc:	f002 fe08 	bl	80034e0 <HAL_I2S_Receive_DMA>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <AudioThread_Entry+0x2e>
    {
        printf("Error starting DMA\n");
 80008d6:	483d      	ldr	r0, [pc, #244]	@ (80009cc <AudioThread_Entry+0x11c>)
 80008d8:	f00c f846 	bl	800c968 <puts>
        return;
 80008dc:	e06d      	b.n	80009ba <AudioThread_Entry+0x10a>
    }

    /* Processing loop */
    uint32_t timeout_count = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34

    while (1)
    {
        /* Wait for new data with timeout */
        UINT status = tx_semaphore_get(&data_ready_semaphore, 200);
 80008e2:	21c8      	movs	r1, #200	@ 0xc8
 80008e4:	483a      	ldr	r0, [pc, #232]	@ (80009d0 <AudioThread_Entry+0x120>)
 80008e6:	f00b fdc3 	bl	800c470 <_txe_semaphore_get>
 80008ea:	6238      	str	r0, [r7, #32]

        if (status == TX_SUCCESS)
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d14d      	bne.n	800098e <AudioThread_Entry+0xde>
        {
            /* Calculate start of buffer half */
            uint16_t* samples = bufferHalf ?
 80008f2:	4b38      	ldr	r3, [pc, #224]	@ (80009d4 <AudioThread_Entry+0x124>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
                               &audioBuffer[AUDIO_BUFFER_SIZE/2] :
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <AudioThread_Entry+0x50>
 80008fc:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <AudioThread_Entry+0x128>)
 80008fe:	e000      	b.n	8000902 <AudioThread_Entry+0x52>
 8000900:	4b30      	ldr	r3, [pc, #192]	@ (80009c4 <AudioThread_Entry+0x114>)
            uint16_t* samples = bufferHalf ?
 8000902:	61fb      	str	r3, [r7, #28]
                               &audioBuffer[0];

            /* Print audio level (simple peak detection) */
            int16_t peak = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	867b      	strh	r3, [r7, #50]	@ 0x32
            for (int i = 0; i < 64; i++)
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800090c:	e01a      	b.n	8000944 <AudioThread_Entry+0x94>
            {
                int16_t value = (int16_t)(samples[i] >> 1);
 800090e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                if (value < 0) value = -value;  // absolute value
 800091e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000922:	2b00      	cmp	r3, #0
 8000924:	da03      	bge.n	800092e <AudioThread_Entry+0x7e>
 8000926:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000928:	425b      	negs	r3, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	857b      	strh	r3, [r7, #42]	@ 0x2a
                if (value > peak) peak = value;
 800092e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8000932:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000936:	429a      	cmp	r2, r3
 8000938:	dd01      	ble.n	800093e <AudioThread_Entry+0x8e>
 800093a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800093c:	867b      	strh	r3, [r7, #50]	@ 0x32
            for (int i = 0; i < 64; i++)
 800093e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000940:	3301      	adds	r3, #1
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000946:	2b3f      	cmp	r3, #63	@ 0x3f
 8000948:	dde1      	ble.n	800090e <AudioThread_Entry+0x5e>
            }

            // In your processing loop
            for (int i = 0; i < 10; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
 800094e:	e01a      	b.n	8000986 <AudioThread_Entry+0xd6>
                char buffer[20];
                snprintf(buffer, sizeof(buffer), "%d\r\n", samples[i]);
 8000950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	4413      	add	r3, r2
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	f107 0008 	add.w	r0, r7, #8
 800095e:	4a1f      	ldr	r2, [pc, #124]	@ (80009dc <AudioThread_Entry+0x12c>)
 8000960:	2114      	movs	r1, #20
 8000962:	f00c f809 	bl	800c978 <sniprintf>
                HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 10);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fdac 	bl	80004c8 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	230a      	movs	r3, #10
 800097a:	4819      	ldr	r0, [pc, #100]	@ (80009e0 <AudioThread_Entry+0x130>)
 800097c:	f009 fcc4 	bl	800a308 <HAL_UART_Transmit>
            for (int i = 0; i < 10; i++) {
 8000980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000982:	3301      	adds	r3, #1
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
 8000986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000988:	2b09      	cmp	r3, #9
 800098a:	dde1      	ble.n	8000950 <AudioThread_Entry+0xa0>
 800098c:	e7a9      	b.n	80008e2 <AudioThread_Entry+0x32>
            }
        }
        else
        {
            /* Timeout handling */
            timeout_count++;
 800098e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000990:	3301      	adds	r3, #1
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
            printf("Timeout #%lu waiting for audio data\n", timeout_count);
 8000994:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000996:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <AudioThread_Entry+0x134>)
 8000998:	f00b ff7e 	bl	800c898 <iprintf>

            if (timeout_count >= 3) {
 800099c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d99f      	bls.n	80008e2 <AudioThread_Entry+0x32>
                /* Restart DMA after multiple timeouts */
                HAL_I2S_DMAStop(&hi2s2);
 80009a2:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <AudioThread_Entry+0x118>)
 80009a4:	f002 fe90 	bl	80036c8 <HAL_I2S_DMAStop>
                HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)audioBuffer, AUDIO_BUFFER_SIZE/2);
 80009a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ac:	4905      	ldr	r1, [pc, #20]	@ (80009c4 <AudioThread_Entry+0x114>)
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <AudioThread_Entry+0x118>)
 80009b0:	f002 fd96 	bl	80034e0 <HAL_I2S_Receive_DMA>
                timeout_count = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
 80009b8:	e793      	b.n	80008e2 <AudioThread_Entry+0x32>
            }
        }
    }
}
 80009ba:	3738      	adds	r7, #56	@ 0x38
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	0800da7c 	.word	0x0800da7c
 80009c4:	20000f40 	.word	0x20000f40
 80009c8:	20000d9c 	.word	0x20000d9c
 80009cc:	0800da98 	.word	0x0800da98
 80009d0:	20000580 	.word	0x20000580
 80009d4:	20001340 	.word	0x20001340
 80009d8:	20001140 	.word	0x20001140
 80009dc:	0800daac 	.word	0x0800daac
 80009e0:	20000ea4 	.word	0x20000ea4
 80009e4:	0800dab4 	.word	0x0800dab4

080009e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define USE_UART_PRINT
void __io_putchar(char ch) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
#ifdef USE_UART_PRINT
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 10);
 80009f2:	1df9      	adds	r1, r7, #7
 80009f4:	230a      	movs	r3, #10
 80009f6:	2201      	movs	r2, #1
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <__io_putchar+0x20>)
 80009fa:	f009 fc85 	bl	800a308 <HAL_UART_Transmit>
#else
	ITM_SendChar(ch);
#endif
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000ea4 	.word	0x20000ea4

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 ff14 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f828 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f94a 	bl	8000cb0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000a1c:	f000 f894 	bl	8000b48 <MX_GPDMA1_Init>
  MX_I2S2_Init();
 8000a20:	f000 f8b2 	bl	8000b88 <MX_I2S2_Init>
  MX_ICACHE_Init();
 8000a24:	f000 f8e4 	bl	8000bf0 <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 8000a28:	f000 f8f6 	bl	8000c18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Link DMA to I2S */
  __HAL_LINKDMA(&hi2s2, hdmarx, handle_GPDMA1_Channel0);
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <main+0x54>)
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <main+0x58>)
 8000a30:	649a      	str	r2, [r3, #72]	@ 0x48
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <main+0x58>)
 8000a34:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <main+0x54>)
 8000a36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Enable DMA interrupts */
  __HAL_DMA_ENABLE_IT(&handle_GPDMA1_Channel0, DMA_IT_TC);
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <main+0x58>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <main+0x58>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a46:	615a      	str	r2, [r3, #20]
  __HAL_DMA_ENABLE_IT(&handle_GPDMA1_Channel0, DMA_IT_HT);
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <main+0x58>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <main+0x58>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a56:	615a      	str	r2, [r3, #20]
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a58:	f7ff ff24 	bl	80008a4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <main+0x50>
 8000a60:	20000d9c 	.word	0x20000d9c
 8000a64:	20000e2c 	.word	0x20000e2c

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09c      	sub	sp, #112	@ 0x70
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2250      	movs	r2, #80	@ 0x50
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00c f88a 	bl	800cb90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b40 <SystemClock_Config+0xd8>)
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	4a2b      	ldr	r2, [pc, #172]	@ (8000b40 <SystemClock_Config+0xd8>)
 8000a94:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a98:	6113      	str	r3, [r2, #16]
 8000a9a:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <SystemClock_Config+0xd8>)
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa6:	bf00      	nop
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <SystemClock_Config+0xd8>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	2b08      	cmp	r3, #8
 8000ab2:	d1f9      	bne.n	8000aa8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000aca:	23fa      	movs	r3, #250	@ 0xfa
 8000acc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000ada:	2304      	movs	r3, #4
 8000adc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 ffba 	bl	8003a64 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000af6:	f000 fa85 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	231f      	movs	r3, #31
 8000afc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2105      	movs	r1, #5
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fbdb 	bl	80042d4 <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b24:	f000 fa6e 	bl	8001004 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemClock_Config+0xdc>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <SystemClock_Config+0xdc>)
 8000b32:	f043 0320 	orr.w	r3, r3, #32
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	3770      	adds	r7, #112	@ 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	44020800 	.word	0x44020800
 8000b44:	40022000 	.word	0x40022000

08000b48 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_GPDMA1_Init+0x3c>)
 8000b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b54:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <MX_GPDMA1_Init+0x3c>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_GPDMA1_Init+0x3c>)
 8000b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 2, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	201b      	movs	r0, #27
 8000b72:	f000 ff63 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000b76:	201b      	movs	r0, #27
 8000b78:	f000 ff7a 	bl	8001a70 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	44020c00 	.word	0x44020c00

08000b88 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000b8e:	4a17      	ldr	r2, [pc, #92]	@ (8000bec <MX_I2S2_Init+0x64>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000b94:	2206      	movs	r2, #6
 8000b96:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8000b98:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000ba0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ba4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000bae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000bb2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000bb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_I2S2_Init+0x60>)
 8000bd6:	f002 fb43 	bl	8003260 <HAL_I2S_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 8000be0:	f000 fa10 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000d9c 	.word	0x20000d9c
 8000bec:	40003800 	.word	0x40003800

08000bf0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f002 ff05 	bl	8003a04 <HAL_ICACHE_ConfigAssociativityMode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c00:	f000 fa00 	bl	8001004 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c04:	f002 ff1e 	bl	8003a44 <HAL_ICACHE_Enable>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c0e:	f000 f9f9 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c1e:	4a23      	ldr	r2, [pc, #140]	@ (8000cac <MX_USART3_UART_Init+0x94>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c22:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c60:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c62:	f009 fb01 	bl	800a268 <HAL_UART_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c6c:	f000 f9ca 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c74:	f00a f82c 	bl	800acd0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7e:	f000 f9c1 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c86:	f00a f861 	bl	800ad4c <HAL_UARTEx_SetRxFifoThreshold>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c90:	f000 f9b8 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_USART3_UART_Init+0x90>)
 8000c96:	f009 ffe2 	bl	800ac5e <HAL_UARTEx_DisableFifoMode>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f000 f9b0 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000ea4 	.word	0x20000ea4
 8000cac:	40004800 	.word	0x40004800

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc6:	4ba5      	ldr	r3, [pc, #660]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ccc:	4aa3      	ldr	r2, [pc, #652]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cd6:	4ba1      	ldr	r3, [pc, #644]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	623b      	str	r3, [r7, #32]
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b9d      	ldr	r3, [pc, #628]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cea:	4a9c      	ldr	r2, [pc, #624]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf4:	4b99      	ldr	r3, [pc, #612]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d02:	4b96      	ldr	r3, [pc, #600]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d08:	4a94      	ldr	r2, [pc, #592]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d0a:	f043 0320 	orr.w	r3, r3, #32
 8000d0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d12:	4b92      	ldr	r3, [pc, #584]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d18:	f003 0320 	and.w	r3, r3, #32
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d20:	4b8e      	ldr	r3, [pc, #568]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d26:	4a8d      	ldr	r2, [pc, #564]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d30:	4b8a      	ldr	r3, [pc, #552]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b87      	ldr	r3, [pc, #540]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d44:	4a85      	ldr	r2, [pc, #532]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d4e:	4b83      	ldr	r3, [pc, #524]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b7f      	ldr	r3, [pc, #508]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d62:	4a7e      	ldr	r2, [pc, #504]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d6c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b78      	ldr	r3, [pc, #480]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d80:	4a76      	ldr	r2, [pc, #472]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d8a:	4b74      	ldr	r3, [pc, #464]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d98:	4b70      	ldr	r3, [pc, #448]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d9e:	4a6f      	ldr	r2, [pc, #444]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000da8:	4b6c      	ldr	r3, [pc, #432]	@ (8000f5c <MX_GPIO_Init+0x2ac>)
 8000daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2110      	movs	r1, #16
 8000dba:	4869      	ldr	r0, [pc, #420]	@ (8000f60 <MX_GPIO_Init+0x2b0>)
 8000dbc:	f002 fa38 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4867      	ldr	r0, [pc, #412]	@ (8000f64 <MX_GPIO_Init+0x2b4>)
 8000dc6:	f002 fa33 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4866      	ldr	r0, [pc, #408]	@ (8000f68 <MX_GPIO_Init+0x2b8>)
 8000dd0:	f002 fa2e 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dda:	4b64      	ldr	r3, [pc, #400]	@ (8000f6c <MX_GPIO_Init+0x2bc>)
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4861      	ldr	r0, [pc, #388]	@ (8000f70 <MX_GPIO_Init+0x2c0>)
 8000dea:	f002 f8cf 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dee:	2310      	movs	r3, #16
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4856      	ldr	r0, [pc, #344]	@ (8000f60 <MX_GPIO_Init+0x2b0>)
 8000e06:	f002 f8c1 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e0a:	2332      	movs	r3, #50	@ 0x32
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1a:	230b      	movs	r3, #11
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4852      	ldr	r0, [pc, #328]	@ (8000f70 <MX_GPIO_Init+0x2c0>)
 8000e26:	f002 f8b1 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e2a:	2386      	movs	r3, #134	@ 0x86
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	484b      	ldr	r0, [pc, #300]	@ (8000f74 <MX_GPIO_Init+0x2c4>)
 8000e46:	f002 f8a1 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4845      	ldr	r0, [pc, #276]	@ (8000f74 <MX_GPIO_Init+0x2c4>)
 8000e5e:	f002 f895 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e62:	2301      	movs	r3, #1
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	483a      	ldr	r0, [pc, #232]	@ (8000f64 <MX_GPIO_Init+0x2b4>)
 8000e7a:	f002 f887 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000e7e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4834      	ldr	r0, [pc, #208]	@ (8000f64 <MX_GPIO_Init+0x2b4>)
 8000e94:	f002 f87a 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	482b      	ldr	r0, [pc, #172]	@ (8000f64 <MX_GPIO_Init+0x2b4>)
 8000eb6:	f002 f869 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4825      	ldr	r0, [pc, #148]	@ (8000f68 <MX_GPIO_Init+0x2b8>)
 8000ed2:	f002 f85b 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eda:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <MX_GPIO_Init+0x2bc>)
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481f      	ldr	r0, [pc, #124]	@ (8000f68 <MX_GPIO_Init+0x2b8>)
 8000eea:	f002 f84f 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000eee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f00:	230a      	movs	r3, #10
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481a      	ldr	r0, [pc, #104]	@ (8000f74 <MX_GPIO_Init+0x2c4>)
 8000f0c:	f002 f83e 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000f10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f22:	230b      	movs	r3, #11
 8000f24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480e      	ldr	r0, [pc, #56]	@ (8000f68 <MX_GPIO_Init+0x2b8>)
 8000f2e:	f002 f82d 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000f32:	23c0      	movs	r3, #192	@ 0xc0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f42:	2308      	movs	r3, #8
 8000f44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_GPIO_Init+0x2b4>)
 8000f4e:	f002 f81d 	bl	8002f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	@ 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	44020c00 	.word	0x44020c00
 8000f60:	42021400 	.word	0x42021400
 8000f64:	42020400 	.word	0x42020400
 8000f68:	42021800 	.word	0x42021800
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	42020800 	.word	0x42020800
 8000f74:	42020000 	.word	0x42020000

08000f78 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    bufferHalf = 0;
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
    tx_semaphore_put(&data_ready_semaphore);
 8000f86:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8000f88:	f00b fab4 	bl	800c4f4 <_txe_semaphore_put>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20001340 	.word	0x20001340
 8000f98:	20000580 	.word	0x20000580

08000f9c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    bufferHalf = 1;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <HAL_I2S_RxCpltCallback+0x1c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
    tx_semaphore_put(&data_ready_semaphore);
 8000faa:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <HAL_I2S_RxCpltCallback+0x20>)
 8000fac:	f00b faa2 	bl	800c4f4 <_txe_semaphore_put>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20001340 	.word	0x20001340
 8000fbc:	20000580 	.word	0x20000580

08000fc0 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    printf("I2S Error: 0x%lX\n", hi2s->ErrorCode);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <HAL_I2S_ErrorCallback+0x1c>)
 8000fd0:	f00b fc62 	bl	800c898 <iprintf>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800dadc 	.word	0x0800dadc

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff2:	f000 fc4b 	bl	800188c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40001000 	.word	0x40001000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0e8      	sub	sp, #416	@ 0x1a0
 8001024:	af00      	add	r7, sp, #0
 8001026:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800102a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800102e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001044:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001048:	4618      	mov	r0, r3
 800104a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	f00b fd9d 	bl	800cb90 <memset>
  if(hi2s->Instance==SPI2)
 8001056:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800105a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4aa9      	ldr	r2, [pc, #676]	@ (8001308 <HAL_I2S_MspInit+0x2e8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	f040 8149 	bne.w	80012fc <HAL_I2S_MspInit+0x2dc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800106a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800106e:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8001072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 800107e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001082:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fc99 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_I2S_MspInit+0x80>
    {
      Error_Handler();
 800109c:	f7ff ffb2 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010a0:	4b9a      	ldr	r3, [pc, #616]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 80010a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010a6:	4a99      	ldr	r2, [pc, #612]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010b0:	4b96      	ldr	r3, [pc, #600]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 80010b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010b6:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80010ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80010be:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80010c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80010cc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b8f      	ldr	r3, [pc, #572]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 80010d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010d4:	4a8d      	ldr	r2, [pc, #564]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010de:	4b8b      	ldr	r3, [pc, #556]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 80010e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e4:	f003 0204 	and.w	r2, r3, #4
 80010e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80010ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80010f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80010fa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b83      	ldr	r3, [pc, #524]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 80010fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001102:	4a82      	ldr	r2, [pc, #520]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800110c:	4b7f      	ldr	r3, [pc, #508]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 800110e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800111a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001124:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001128:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b78      	ldr	r3, [pc, #480]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 800112c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001130:	4a76      	ldr	r2, [pc, #472]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800113a:	4b74      	ldr	r3, [pc, #464]	@ (800130c <HAL_I2S_MspInit+0x2ec>)
 800113c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001140:	f003 0202 	and.w	r2, r3, #2
 8001144:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001148:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001152:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001156:	681b      	ldr	r3, [r3, #0]
    /**I2S2 GPIO Configuration
    PC2     ------> I2S2_SDI
    PA3     ------> I2S2_WS
    PB10     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001158:	2304      	movs	r3, #4
 800115a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001170:	2305      	movs	r3, #5
 8001172:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800117a:	4619      	mov	r1, r3
 800117c:	4864      	ldr	r0, [pc, #400]	@ (8001310 <HAL_I2S_MspInit+0x2f0>)
 800117e:	f001 ff05 	bl	8002f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001182:	2308      	movs	r3, #8
 8001184:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800119a:	2305      	movs	r3, #5
 800119c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80011a4:	4619      	mov	r1, r3
 80011a6:	485b      	ldr	r0, [pc, #364]	@ (8001314 <HAL_I2S_MspInit+0x2f4>)
 80011a8:	f001 fef0 	bl	8002f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c6:	2305      	movs	r3, #5
 80011c8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4851      	ldr	r0, [pc, #324]	@ (8001318 <HAL_I2S_MspInit+0x2f8>)
 80011d4:	f001 feda 	bl	8002f8c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* GPDMA1_REQUEST_SPI2_RX Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80011d8:	2321      	movs	r3, #33	@ 0x21
 80011da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 80011de:	2308      	movs	r3, #8
 80011e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001206:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.Init.SrcBurstLength = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.Init.DestBurstLength = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 800123c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001240:	4936      	ldr	r1, [pc, #216]	@ (800131c <HAL_I2S_MspInit+0x2fc>)
 8001242:	4618      	mov	r0, r3
 8001244:	f001 f8d8 	bl	80023f8 <HAL_DMAEx_List_BuildNode>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2S_MspInit+0x232>
    {
      Error_Handler();
 800124e:	f7ff fed9 	bl	8001004 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001252:	4a32      	ldr	r2, [pc, #200]	@ (800131c <HAL_I2S_MspInit+0x2fc>)
 8001254:	2100      	movs	r1, #0
 8001256:	4832      	ldr	r0, [pc, #200]	@ (8001320 <HAL_I2S_MspInit+0x300>)
 8001258:	f001 f8e4 	bl	8002424 <HAL_DMAEx_List_InsertNode>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2S_MspInit+0x246>
    {
      Error_Handler();
 8001262:	f7ff fecf 	bl	8001004 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001266:	482e      	ldr	r0, [pc, #184]	@ (8001320 <HAL_I2S_MspInit+0x300>)
 8001268:	f001 f9a5 	bl	80025b6 <HAL_DMAEx_List_SetCircularMode>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2S_MspInit+0x256>
    {
      Error_Handler();
 8001272:	f7ff fec7 	bl	8001004 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001276:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 8001278:	4a2b      	ldr	r2, [pc, #172]	@ (8001328 <HAL_I2S_MspInit+0x308>)
 800127a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 800127e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001282:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001284:	4b27      	ldr	r3, [pc, #156]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 8001286:	2200      	movs	r2, #0
 8001288:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800128a:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 800128c:	2200      	movs	r2, #0
 800128e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001290:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 8001292:	2200      	movs	r2, #0
 8001294:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001296:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 8001298:	2281      	movs	r2, #129	@ 0x81
 800129a:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800129c:	4821      	ldr	r0, [pc, #132]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 800129e:	f000 feeb 	bl	8002078 <HAL_DMAEx_List_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2S_MspInit+0x28c>
    {
      Error_Handler();
 80012a8:	f7ff feac 	bl	8001004 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80012ac:	491c      	ldr	r1, [pc, #112]	@ (8001320 <HAL_I2S_MspInit+0x300>)
 80012ae:	481d      	ldr	r0, [pc, #116]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 80012b0:	f001 f9e2 	bl	8002678 <HAL_DMAEx_List_LinkQ>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2S_MspInit+0x29e>
    {
      Error_Handler();
 80012ba:	f7ff fea3 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s, hdmarx, handle_GPDMA1_Channel0);
 80012be:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012c2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a16      	ldr	r2, [pc, #88]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 80012ca:	649a      	str	r2, [r3, #72]	@ 0x48
 80012cc:	4a15      	ldr	r2, [pc, #84]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 80012ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80012da:	2110      	movs	r1, #16
 80012dc:	4811      	ldr	r0, [pc, #68]	@ (8001324 <HAL_I2S_MspInit+0x304>)
 80012de:	f000 fe6a 	bl	8001fb6 <HAL_DMA_ConfigChannelAttributes>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_I2S_MspInit+0x2cc>
    {
      Error_Handler();
 80012e8:	f7ff fe8c 	bl	8001004 <Error_Handler>
    }

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2102      	movs	r1, #2
 80012f0:	2038      	movs	r0, #56	@ 0x38
 80012f2:	f000 fba3 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80012f6:	2038      	movs	r0, #56	@ 0x38
 80012f8:	f000 fbba 	bl	8001a70 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80012fc:	bf00      	nop
 80012fe:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40003800 	.word	0x40003800
 800130c:	44020c00 	.word	0x44020c00
 8001310:	42020800 	.word	0x42020800
 8001314:	42020000 	.word	0x42020000
 8001318:	42020400 	.word	0x42020400
 800131c:	20000df0 	.word	0x20000df0
 8001320:	20000e14 	.word	0x20000e14
 8001324:	20000e2c 	.word	0x20000e2c
 8001328:	40020050 	.word	0x40020050

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0cc      	sub	sp, #304	@ 0x130
 8001330:	af00      	add	r7, sp, #0
 8001332:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001336:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800133a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001350:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001354:	4618      	mov	r0, r3
 8001356:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800135a:	461a      	mov	r2, r3
 800135c:	2100      	movs	r1, #0
 800135e:	f00b fc17 	bl	800cb90 <memset>
  if(huart->Instance==USART3)
 8001362:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001366:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a33      	ldr	r2, [pc, #204]	@ (800143c <HAL_UART_MspInit+0x110>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d15d      	bne.n	8001430 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001374:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001378:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800137c:	f04f 0204 	mov.w	r2, #4
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001388:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800138c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001390:	2200      	movs	r2, #0
 8001392:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fb15 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 80013a4:	f7ff fe2e 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013a8:	4b25      	ldr	r3, [pc, #148]	@ (8001440 <HAL_UART_MspInit+0x114>)
 80013aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013ae:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <HAL_UART_MspInit+0x114>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80013b8:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <HAL_UART_MspInit+0x114>)
 80013ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013be:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80013c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013d4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_UART_MspInit+0x114>)
 80013d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013dc:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <HAL_UART_MspInit+0x114>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_UART_MspInit+0x114>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ec:	f003 0208 	and.w	r2, r3, #8
 80013f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001402:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001404:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001408:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800141e:	2307      	movs	r3, #7
 8001420:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001424:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	@ (8001444 <HAL_UART_MspInit+0x118>)
 800142c:	f001 fdae 	bl	8002f8c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004800 	.word	0x40004800
 8001440:	44020c00 	.word	0x44020c00
 8001444:	42020c00 	.word	0x42020c00

08001448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	@ 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001450:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <HAL_InitTick+0xd8>)
 8001452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001456:	4a32      	ldr	r2, [pc, #200]	@ (8001520 <HAL_InitTick+0xd8>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <HAL_InitTick+0xd8>)
 8001462:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fa6d 	bl	8004958 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001488:	f003 fa24 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 800148c:	6378      	str	r0, [r7, #52]	@ 0x34
 800148e:	e004      	b.n	800149a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001490:	f003 fa20 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8001494:	4603      	mov	r3, r0
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800149a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800149c:	095b      	lsrs	r3, r3, #5
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <HAL_InitTick+0xdc>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	09db      	lsrs	r3, r3, #7
 80014a6:	3b01      	subs	r3, #1
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <HAL_InitTick+0xe0>)
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_InitTick+0xe4>)
 80014ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_InitTick+0xe0>)
 80014b2:	2263      	movs	r2, #99	@ 0x63
 80014b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001528 <HAL_InitTick+0xe0>)
 80014b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <HAL_InitTick+0xe0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_InitTick+0xe0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80014c8:	4817      	ldr	r0, [pc, #92]	@ (8001528 <HAL_InitTick+0xe0>)
 80014ca:	f008 fad5 	bl	8009a78 <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d118      	bne.n	800150e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014dc:	4812      	ldr	r0, [pc, #72]	@ (8001528 <HAL_InitTick+0xe0>)
 80014de:	f008 fb2d 	bl	8009b3c <HAL_TIM_Base_Start_IT>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10e      	bne.n	800150e <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d808      	bhi.n	8001508 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80014f6:	2200      	movs	r2, #0
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	2031      	movs	r0, #49	@ 0x31
 80014fc:	f000 fa9e 	bl	8001a3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001500:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_InitTick+0xe8>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e002      	b.n	800150e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800150e:	2031      	movs	r0, #49	@ 0x31
 8001510:	f000 faae 	bl	8001a70 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001514:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001518:	4618      	mov	r0, r3
 800151a:	3738      	adds	r7, #56	@ 0x38
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	44020c00 	.word	0x44020c00
 8001524:	0a7c5ac5 	.word	0x0a7c5ac5
 8001528:	20001344 	.word	0x20001344
 800152c:	40001000 	.word	0x40001000
 8001530:	20000004 	.word	0x20000004

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <NMI_Handler+0x4>

0800153c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <MemManage_Handler+0x4>

0800154c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <UsageFault_Handler+0x4>

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001572:	f000 fbbf 	bl	8001cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000e2c 	.word	0x20000e2c

08001580 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <TIM6_IRQHandler+0x10>)
 8001586:	f008 fb87 	bl	8009c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20001344 	.word	0x20001344

08001594 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <SPI2_IRQHandler+0x10>)
 800159a:	f002 f8e4 	bl	8003766 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000d9c 	.word	0x20000d9c

080015a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ba:	f3af 8000 	nop.w
 80015be:	4601      	mov	r1, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf0      	blt.n	80015ba <_read+0x12>
  }

  return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e009      	b.n	8001608 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f9f3 	bl	80009e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf1      	blt.n	80015f4 <_write+0x12>
  }
  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_close>:

int _close(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001642:	605a      	str	r2, [r3, #4]
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_isatty>:

int _isatty(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f00b faba 	bl	800cc2c <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200a0000 	.word	0x200a0000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	20001390 	.word	0x20001390
 80016ec:	20001b28 	.word	0x20001b28

080016f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f6:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <SystemInit+0xdc>)
 80016f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fc:	4a33      	ldr	r2, [pc, #204]	@ (80017cc <SystemInit+0xdc>)
 80016fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001702:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001706:	4b32      	ldr	r3, [pc, #200]	@ (80017d0 <SystemInit+0xe0>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800170c:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <SystemInit+0xe0>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001712:	4b2f      	ldr	r3, [pc, #188]	@ (80017d0 <SystemInit+0xe0>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001718:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <SystemInit+0xe0>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	492c      	ldr	r1, [pc, #176]	@ (80017d0 <SystemInit+0xe0>)
 800171e:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <SystemInit+0xe4>)
 8001720:	4013      	ands	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <SystemInit+0xe0>)
 8001726:	2200      	movs	r2, #0
 8001728:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800172a:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <SystemInit+0xe0>)
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <SystemInit+0xe0>)
 8001732:	2200      	movs	r2, #0
 8001734:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001736:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <SystemInit+0xe0>)
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <SystemInit+0xe8>)
 800173a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <SystemInit+0xe0>)
 800173e:	2200      	movs	r2, #0
 8001740:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001742:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <SystemInit+0xe0>)
 8001744:	4a24      	ldr	r2, [pc, #144]	@ (80017d8 <SystemInit+0xe8>)
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001748:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <SystemInit+0xe0>)
 800174a:	2200      	movs	r2, #0
 800174c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <SystemInit+0xe0>)
 8001750:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <SystemInit+0xe8>)
 8001752:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001754:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <SystemInit+0xe0>)
 8001756:	2200      	movs	r2, #0
 8001758:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800175a:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <SystemInit+0xe0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <SystemInit+0xe0>)
 8001760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001764:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <SystemInit+0xe0>)
 8001768:	2200      	movs	r2, #0
 800176a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <SystemInit+0xdc>)
 800176e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001772:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <SystemInit+0xec>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800177c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001784:	d003      	beq.n	800178e <SystemInit+0x9e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800178c:	d117      	bne.n	80017be <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <SystemInit+0xec>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <SystemInit+0xec>)
 800179c:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <SystemInit+0xf0>)
 800179e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <SystemInit+0xec>)
 80017a2:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <SystemInit+0xf4>)
 80017a4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <SystemInit+0xec>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <SystemInit+0xec>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <SystemInit+0xec>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <SystemInit+0xec>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	61d3      	str	r3, [r2, #28]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00
 80017d0:	44020c00 	.word	0x44020c00
 80017d4:	eae2eae3 	.word	0xeae2eae3
 80017d8:	01010280 	.word	0x01010280
 80017dc:	40022000 	.word	0x40022000
 80017e0:	08192a3b 	.word	0x08192a3b
 80017e4:	4c5d6e7f 	.word	0x4c5d6e7f

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e8:	480d      	ldr	r0, [pc, #52]	@ (8001820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ec:	f7ff ff80 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001816:	f00b fa0f 	bl	800cc38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800181a:	f7ff f8f7 	bl	8000a0c <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   r0, =_estack
 8001820:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800182c:	0800db88 	.word	0x0800db88
  ldr r2, =_sbss
 8001830:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001834:	20001b24 	.word	0x20001b24

08001838 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_IRQHandler>
	...

0800183c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f8f0 	bl	8001a26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001846:	f002 fefd 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_Init+0x44>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	490b      	ldr	r1, [pc, #44]	@ (8001884 <HAL_Init+0x48>)
 8001856:	5ccb      	ldrb	r3, [r1, r3]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_Init+0x4c>)
 800185e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001860:	2004      	movs	r0, #4
 8001862:	f000 f913 	bl	8001a8c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001866:	200f      	movs	r0, #15
 8001868:	f7ff fdee 	bl	8001448 <HAL_InitTick>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e002      	b.n	800187c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001876:	f7ff fbcb 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}
 8001880:	44020c00 	.word	0x44020c00
 8001884:	0800db04 	.word	0x0800db04
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20001394 	.word	0x20001394

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20001394 	.word	0x20001394

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	@ (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	@ (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff4c 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4a:	f7ff ff63 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	6978      	ldr	r0, [r7, #20]
 8001a56:	f7ff ffb3 	bl	80019c0 <NVIC_EncodePriority>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff82 	bl	800196c <__NVIC_SetPriority>
}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff56 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d844      	bhi.n	8001b24 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001ac3 	.word	0x08001ac3
 8001aa4:	08001ae1 	.word	0x08001ae1
 8001aa8:	08001b03 	.word	0x08001b03
 8001aac:	08001b25 	.word	0x08001b25
 8001ab0:	08001ab5 	.word	0x08001ab5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6013      	str	r3, [r2, #0]
      break;
 8001ac0:	e031      	b.n	8001b26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ad0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ad4:	4a18      	ldr	r2, [pc, #96]	@ (8001b38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ad6:	f023 030c 	bic.w	r3, r3, #12
 8001ada:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001ade:	e022      	b.n	8001b26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ae6:	f023 0304 	bic.w	r3, r3, #4
 8001aea:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001af2:	f023 030c 	bic.w	r3, r3, #12
 8001af6:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001b00:	e011      	b.n	8001b26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b14:	f023 030c 	bic.w	r3, r3, #12
 8001b18:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001b22:	e000      	b.n	8001b26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b24:	bf00      	nop
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010
 8001b38:	44020c00 	.word	0x44020c00

08001b3c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e04f      	b.n	8001bf4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_DMA_Start_IT+0x26>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e048      	b.n	8001bf4 <HAL_DMA_Start_IT+0xb8>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d136      	bne.n	8001be4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fa4f 	bl	800202e <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8001b9e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bce:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e007      	b.n	8001bf4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2240      	movs	r2, #64	@ 0x40
 8001be8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001c04:	f7ff fe56 	bl	80018b4 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e06b      	b.n	8001cec <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e05c      	b.n	8001cec <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0204 	orr.w	r2, r2, #4
 8001c40:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2205      	movs	r2, #5
 8001c46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001c4a:	e020      	b.n	8001c8e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001c4c:	f7ff fe32 	bl	80018b4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d919      	bls.n	8001c8e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7e:	2201      	movs	r2, #1
 8001c80:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e02e      	b.n	8001cec <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0d7      	beq.n	8001c4c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0202 	orr.w	r2, r2, #2
 8001caa:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001cbc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001d04:	f023 030f 	bic.w	r3, r3, #15
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d12:	3b50      	subs	r3, #80	@ 0x50
 8001d14:	09db      	lsrs	r3, r3, #7
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 813b 	beq.w	8001faa <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d011      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d58:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d011      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d8a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d011      	beq.n	8001dca <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dbc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d011      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dee:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	f043 0208 	orr.w	r2, r3, #8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d013      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e20:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d04c      	beq.n	8001eda <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d045      	beq.n	8001eda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e56:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d12e      	bne.n	8001ec2 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e72:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0202 	orr.w	r2, r2, #2
 8001e82:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d07a      	beq.n	8001fae <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
        }

        return;
 8001ec0:	e075      	b.n	8001fae <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d039      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d032      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d012      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d116      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d111      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f22:	2201      	movs	r2, #1
 8001f24:	731a      	strb	r2, [r3, #12]
 8001f26:	e008      	b.n	8001f3a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001f42:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d025      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0202 	orr.w	r2, r2, #2
 8001f72:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
 8001fa8:	e002      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001faa:	bf00      	nop
 8001fac:	e000      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001fae:	bf00      	nop
    }
  }
}
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e02b      	b.n	8002022 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001fd2:	f023 030f 	bic.w	r3, r3, #15
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	3b50      	subs	r3, #80	@ 0x50
 8001fe2:	09db      	lsrs	r3, r3, #7
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2201      	movs	r2, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	f003 0311 	and.w	r3, r3, #17
 8002000:	2b11      	cmp	r3, #17
 8002002:	d106      	bne.n	8002012 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	e006      	b.n	8002020 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002042:	0c1b      	lsrs	r3, r3, #16
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	b291      	uxth	r1, r2
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	430b      	orrs	r3, r1
 8002050:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800205a:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff fc18 	bl	80018b4 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0db      	b.n	8002248 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_DMAEx_List_Init+0x1d8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	f000 809f 	beq.w	80021da <HAL_DMAEx_List_Init+0x162>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a6c      	ldr	r2, [pc, #432]	@ (8002254 <HAL_DMAEx_List_Init+0x1dc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f000 8099 	beq.w	80021da <HAL_DMAEx_List_Init+0x162>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002258 <HAL_DMAEx_List_Init+0x1e0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	f000 8093 	beq.w	80021da <HAL_DMAEx_List_Init+0x162>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a68      	ldr	r2, [pc, #416]	@ (800225c <HAL_DMAEx_List_Init+0x1e4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	f000 808d 	beq.w	80021da <HAL_DMAEx_List_Init+0x162>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a66      	ldr	r2, [pc, #408]	@ (8002260 <HAL_DMAEx_List_Init+0x1e8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	f000 8087 	beq.w	80021da <HAL_DMAEx_List_Init+0x162>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a64      	ldr	r2, [pc, #400]	@ (8002264 <HAL_DMAEx_List_Init+0x1ec>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f000 8081 	beq.w	80021da <HAL_DMAEx_List_Init+0x162>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a62      	ldr	r2, [pc, #392]	@ (8002268 <HAL_DMAEx_List_Init+0x1f0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d07b      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a61      	ldr	r2, [pc, #388]	@ (800226c <HAL_DMAEx_List_Init+0x1f4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d076      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002270 <HAL_DMAEx_List_Init+0x1f8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d071      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002274 <HAL_DMAEx_List_Init+0x1fc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d06c      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5c      	ldr	r2, [pc, #368]	@ (8002278 <HAL_DMAEx_List_Init+0x200>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d067      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5b      	ldr	r2, [pc, #364]	@ (800227c <HAL_DMAEx_List_Init+0x204>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d062      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a59      	ldr	r2, [pc, #356]	@ (8002280 <HAL_DMAEx_List_Init+0x208>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d05d      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_DMAEx_List_Init+0x20c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d058      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a56      	ldr	r2, [pc, #344]	@ (8002288 <HAL_DMAEx_List_Init+0x210>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d053      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a55      	ldr	r2, [pc, #340]	@ (800228c <HAL_DMAEx_List_Init+0x214>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d04e      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a53      	ldr	r2, [pc, #332]	@ (8002290 <HAL_DMAEx_List_Init+0x218>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d049      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a52      	ldr	r2, [pc, #328]	@ (8002294 <HAL_DMAEx_List_Init+0x21c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d044      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a50      	ldr	r2, [pc, #320]	@ (8002298 <HAL_DMAEx_List_Init+0x220>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d03f      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a4f      	ldr	r2, [pc, #316]	@ (800229c <HAL_DMAEx_List_Init+0x224>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03a      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4d      	ldr	r2, [pc, #308]	@ (80022a0 <HAL_DMAEx_List_Init+0x228>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d035      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a4c      	ldr	r2, [pc, #304]	@ (80022a4 <HAL_DMAEx_List_Init+0x22c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d030      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4a      	ldr	r2, [pc, #296]	@ (80022a8 <HAL_DMAEx_List_Init+0x230>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02b      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a49      	ldr	r2, [pc, #292]	@ (80022ac <HAL_DMAEx_List_Init+0x234>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d026      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a47      	ldr	r2, [pc, #284]	@ (80022b0 <HAL_DMAEx_List_Init+0x238>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d021      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a46      	ldr	r2, [pc, #280]	@ (80022b4 <HAL_DMAEx_List_Init+0x23c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d01c      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a44      	ldr	r2, [pc, #272]	@ (80022b8 <HAL_DMAEx_List_Init+0x240>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d017      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a43      	ldr	r2, [pc, #268]	@ (80022bc <HAL_DMAEx_List_Init+0x244>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a41      	ldr	r2, [pc, #260]	@ (80022c0 <HAL_DMAEx_List_Init+0x248>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00d      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a40      	ldr	r2, [pc, #256]	@ (80022c4 <HAL_DMAEx_List_Init+0x24c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d008      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a3e      	ldr	r2, [pc, #248]	@ (80022c8 <HAL_DMAEx_List_Init+0x250>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <HAL_DMAEx_List_Init+0x162>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a3d      	ldr	r2, [pc, #244]	@ (80022cc <HAL_DMAEx_List_Init+0x254>)
 80021d8:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0206 	orr.w	r2, r2, #6
 80021f8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80021fa:	e00f      	b.n	800221c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80021fc:	f7ff fb5a 	bl	80018b4 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b05      	cmp	r3, #5
 8002208:	d908      	bls.n	800221c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2210      	movs	r2, #16
 800220e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e015      	b.n	8002248 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e8      	bne.n	80021fc <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 faba 	bl	80027a4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40020050 	.word	0x40020050
 8002254:	50020050 	.word	0x50020050
 8002258:	400200d0 	.word	0x400200d0
 800225c:	500200d0 	.word	0x500200d0
 8002260:	40020150 	.word	0x40020150
 8002264:	50020150 	.word	0x50020150
 8002268:	400201d0 	.word	0x400201d0
 800226c:	500201d0 	.word	0x500201d0
 8002270:	40020250 	.word	0x40020250
 8002274:	50020250 	.word	0x50020250
 8002278:	400202d0 	.word	0x400202d0
 800227c:	500202d0 	.word	0x500202d0
 8002280:	40020350 	.word	0x40020350
 8002284:	50020350 	.word	0x50020350
 8002288:	400203d0 	.word	0x400203d0
 800228c:	500203d0 	.word	0x500203d0
 8002290:	40021050 	.word	0x40021050
 8002294:	50021050 	.word	0x50021050
 8002298:	400210d0 	.word	0x400210d0
 800229c:	500210d0 	.word	0x500210d0
 80022a0:	40021150 	.word	0x40021150
 80022a4:	50021150 	.word	0x50021150
 80022a8:	400211d0 	.word	0x400211d0
 80022ac:	500211d0 	.word	0x500211d0
 80022b0:	40021250 	.word	0x40021250
 80022b4:	50021250 	.word	0x50021250
 80022b8:	400212d0 	.word	0x400212d0
 80022bc:	500212d0 	.word	0x500212d0
 80022c0:	40021350 	.word	0x40021350
 80022c4:	50021350 	.word	0x50021350
 80022c8:	400213d0 	.word	0x400213d0
 80022cc:	500213d0 	.word	0x500213d0

080022d0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_DMAEx_List_Start_IT+0x16>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e082      	b.n	80023f0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022f0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fc:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d005      	beq.n	8002310 <HAL_DMAEx_List_Start_IT+0x40>
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d16a      	bne.n	80023e0 <HAL_DMAEx_List_Start_IT+0x110>
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d067      	beq.n	80023e0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d157      	bne.n	80023cc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_DMAEx_List_Start_IT+0x5a>
 8002326:	2302      	movs	r3, #2
 8002328:	e062      	b.n	80023f0 <HAL_DMAEx_List_Start_IT+0x120>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800233e:	2202      	movs	r2, #2
 8002340:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800235e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800238e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f107 010c 	add.w	r1, r7, #12
 800239a:	2200      	movs	r2, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fd25 	bl	8002dec <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	0c0b      	lsrs	r3, r1, #16
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80023c0:	4013      	ands	r3, r2
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e007      	b.n	80023f0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <HAL_DMAEx_List_BuildNode+0x16>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e004      	b.n	800241c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fb1d 	bl	8002a54 <DMA_List_BuildNode>

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	@ 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_DMAEx_List_InsertNode+0x18>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0b6      	b.n	80025ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d104      	bne.n	8002452 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2204      	movs	r2, #4
 800244c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0ad      	b.n	80025ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fc5a 	bl	8002d14 <DMA_List_CheckNodesBaseAddresses>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2205      	movs	r2, #5
 800246a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e09e      	b.n	80025ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fc7b 	bl	8002d74 <DMA_List_CheckNodesTypes>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2204      	movs	r2, #4
 8002488:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e08f      	b.n	80025ae <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2202      	movs	r2, #2
 8002492:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800249a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800249e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fca1 	bl	8002dec <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11a      	bne.n	80024e8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e06c      	b.n	80025a0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80024d2:	4013      	ands	r3, r2
 80024d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024d8:	4319      	orrs	r1, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2202      	movs	r2, #2
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	e05b      	b.n	80025a0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80024f8:	4013      	ands	r3, r2
 80024fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024fe:	4319      	orrs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e043      	b.n	8002596 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800250e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002510:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	461a      	mov	r2, r3
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fc96 	bl	8002e4c <DMA_List_FindNode>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d132      	bne.n	800258c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d11a      	bne.n	8002566 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	461a      	mov	r2, r3
 800253e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002542:	4013      	ands	r3, r2
 8002544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002548:	4319      	orrs	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002556:	4013      	ands	r3, r2
 8002558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800255a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800255c:	4319      	orrs	r1, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002564:	e017      	b.n	8002596 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8002566:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800257c:	4013      	ands	r3, r2
 800257e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002582:	4319      	orrs	r1, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800258a:	e004      	b.n	8002596 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2206      	movs	r2, #6
 8002590:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00b      	b.n	80025ae <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3730      	adds	r7, #48	@ 0x30
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08a      	sub	sp, #40	@ 0x28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e052      	b.n	800266e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e049      	b.n	800266e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d101      	bne.n	80025f2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e03d      	b.n	800266e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e038      	b.n	800266e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d104      	bne.n	800260e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2204      	movs	r2, #4
 8002608:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e02f      	b.n	800266e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f107 0220 	add.w	r2, r7, #32
 8002622:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fbe0 	bl	8002dec <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	461a      	mov	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fc07 	bl	8002e4c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002648:	4013      	ands	r3, r2
 800264a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4610      	mov	r0, r2
 8002650:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002652:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002654:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_DMAEx_List_LinkQ+0x16>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e072      	b.n	8002778 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002698:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d002      	beq.n	80026ac <HAL_DMAEx_List_LinkQ+0x34>
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d108      	bne.n	80026be <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e05c      	b.n	8002778 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7b1b      	ldrb	r3, [r3, #12]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d104      	bne.n	80026d2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e052      	b.n	8002778 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002784 <HAL_DMAEx_List_LinkQ+0x10c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMAEx_List_LinkQ+0xaa>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a29      	ldr	r2, [pc, #164]	@ (8002788 <HAL_DMAEx_List_LinkQ+0x110>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMAEx_List_LinkQ+0xaa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a28      	ldr	r2, [pc, #160]	@ (800278c <HAL_DMAEx_List_LinkQ+0x114>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMAEx_List_LinkQ+0xaa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a26      	ldr	r2, [pc, #152]	@ (8002790 <HAL_DMAEx_List_LinkQ+0x118>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMAEx_List_LinkQ+0xaa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a25      	ldr	r2, [pc, #148]	@ (8002794 <HAL_DMAEx_List_LinkQ+0x11c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMAEx_List_LinkQ+0xaa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a23      	ldr	r2, [pc, #140]	@ (8002798 <HAL_DMAEx_List_LinkQ+0x120>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMAEx_List_LinkQ+0xaa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a22      	ldr	r2, [pc, #136]	@ (800279c <HAL_DMAEx_List_LinkQ+0x124>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMAEx_List_LinkQ+0xaa>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a20      	ldr	r2, [pc, #128]	@ (80027a0 <HAL_DMAEx_List_LinkQ+0x128>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_DMAEx_List_LinkQ+0xae>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_DMAEx_List_LinkQ+0xb0>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2203      	movs	r2, #3
 800273e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e019      	b.n	8002778 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002748:	2b81      	cmp	r3, #129	@ 0x81
 800274a:	d108      	bne.n	800275e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2204      	movs	r2, #4
 8002758:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00c      	b.n	8002778 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2204      	movs	r2, #4
 800276a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e003      	b.n	8002778 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40020350 	.word	0x40020350
 8002788:	50020350 	.word	0x50020350
 800278c:	400203d0 	.word	0x400203d0
 8002790:	500203d0 	.word	0x500203d0
 8002794:	40021350 	.word	0x40021350
 8002798:	50021350 	.word	0x50021350
 800279c:	400213d0 	.word	0x400213d0
 80027a0:	500213d0 	.word	0x500213d0

080027a4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a85      	ldr	r2, [pc, #532]	@ (80029d4 <DMA_List_Init+0x230>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f000 80a0 	beq.w	8002904 <DMA_List_Init+0x160>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a83      	ldr	r2, [pc, #524]	@ (80029d8 <DMA_List_Init+0x234>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f000 809a 	beq.w	8002904 <DMA_List_Init+0x160>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a81      	ldr	r2, [pc, #516]	@ (80029dc <DMA_List_Init+0x238>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f000 8094 	beq.w	8002904 <DMA_List_Init+0x160>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a7f      	ldr	r2, [pc, #508]	@ (80029e0 <DMA_List_Init+0x23c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f000 808e 	beq.w	8002904 <DMA_List_Init+0x160>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a7d      	ldr	r2, [pc, #500]	@ (80029e4 <DMA_List_Init+0x240>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f000 8088 	beq.w	8002904 <DMA_List_Init+0x160>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a7b      	ldr	r2, [pc, #492]	@ (80029e8 <DMA_List_Init+0x244>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	f000 8082 	beq.w	8002904 <DMA_List_Init+0x160>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a79      	ldr	r2, [pc, #484]	@ (80029ec <DMA_List_Init+0x248>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d07c      	beq.n	8002904 <DMA_List_Init+0x160>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a78      	ldr	r2, [pc, #480]	@ (80029f0 <DMA_List_Init+0x24c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d077      	beq.n	8002904 <DMA_List_Init+0x160>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a76      	ldr	r2, [pc, #472]	@ (80029f4 <DMA_List_Init+0x250>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d072      	beq.n	8002904 <DMA_List_Init+0x160>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a75      	ldr	r2, [pc, #468]	@ (80029f8 <DMA_List_Init+0x254>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d06d      	beq.n	8002904 <DMA_List_Init+0x160>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a73      	ldr	r2, [pc, #460]	@ (80029fc <DMA_List_Init+0x258>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d068      	beq.n	8002904 <DMA_List_Init+0x160>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a72      	ldr	r2, [pc, #456]	@ (8002a00 <DMA_List_Init+0x25c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d063      	beq.n	8002904 <DMA_List_Init+0x160>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a70      	ldr	r2, [pc, #448]	@ (8002a04 <DMA_List_Init+0x260>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d05e      	beq.n	8002904 <DMA_List_Init+0x160>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a08 <DMA_List_Init+0x264>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d059      	beq.n	8002904 <DMA_List_Init+0x160>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6d      	ldr	r2, [pc, #436]	@ (8002a0c <DMA_List_Init+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d054      	beq.n	8002904 <DMA_List_Init+0x160>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6c      	ldr	r2, [pc, #432]	@ (8002a10 <DMA_List_Init+0x26c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d04f      	beq.n	8002904 <DMA_List_Init+0x160>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6a      	ldr	r2, [pc, #424]	@ (8002a14 <DMA_List_Init+0x270>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d04a      	beq.n	8002904 <DMA_List_Init+0x160>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a69      	ldr	r2, [pc, #420]	@ (8002a18 <DMA_List_Init+0x274>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d045      	beq.n	8002904 <DMA_List_Init+0x160>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a67      	ldr	r2, [pc, #412]	@ (8002a1c <DMA_List_Init+0x278>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d040      	beq.n	8002904 <DMA_List_Init+0x160>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a66      	ldr	r2, [pc, #408]	@ (8002a20 <DMA_List_Init+0x27c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d03b      	beq.n	8002904 <DMA_List_Init+0x160>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a64      	ldr	r2, [pc, #400]	@ (8002a24 <DMA_List_Init+0x280>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d036      	beq.n	8002904 <DMA_List_Init+0x160>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a63      	ldr	r2, [pc, #396]	@ (8002a28 <DMA_List_Init+0x284>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d031      	beq.n	8002904 <DMA_List_Init+0x160>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a61      	ldr	r2, [pc, #388]	@ (8002a2c <DMA_List_Init+0x288>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d02c      	beq.n	8002904 <DMA_List_Init+0x160>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a60      	ldr	r2, [pc, #384]	@ (8002a30 <DMA_List_Init+0x28c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d027      	beq.n	8002904 <DMA_List_Init+0x160>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002a34 <DMA_List_Init+0x290>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d022      	beq.n	8002904 <DMA_List_Init+0x160>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002a38 <DMA_List_Init+0x294>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d01d      	beq.n	8002904 <DMA_List_Init+0x160>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a5b      	ldr	r2, [pc, #364]	@ (8002a3c <DMA_List_Init+0x298>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <DMA_List_Init+0x160>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a40 <DMA_List_Init+0x29c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <DMA_List_Init+0x160>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a58      	ldr	r2, [pc, #352]	@ (8002a44 <DMA_List_Init+0x2a0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <DMA_List_Init+0x160>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a57      	ldr	r2, [pc, #348]	@ (8002a48 <DMA_List_Init+0x2a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <DMA_List_Init+0x160>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a55      	ldr	r2, [pc, #340]	@ (8002a4c <DMA_List_Init+0x2a8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <DMA_List_Init+0x160>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a54      	ldr	r2, [pc, #336]	@ (8002a50 <DMA_List_Init+0x2ac>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <DMA_List_Init+0x164>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <DMA_List_Init+0x166>
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800293c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2200      	movs	r2, #0
 8002954:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a04 <DMA_List_Init+0x260>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d022      	beq.n	80029a6 <DMA_List_Init+0x202>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a28      	ldr	r2, [pc, #160]	@ (8002a08 <DMA_List_Init+0x264>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01d      	beq.n	80029a6 <DMA_List_Init+0x202>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a27      	ldr	r2, [pc, #156]	@ (8002a0c <DMA_List_Init+0x268>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d018      	beq.n	80029a6 <DMA_List_Init+0x202>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a25      	ldr	r2, [pc, #148]	@ (8002a10 <DMA_List_Init+0x26c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <DMA_List_Init+0x202>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a30      	ldr	r2, [pc, #192]	@ (8002a44 <DMA_List_Init+0x2a0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00e      	beq.n	80029a6 <DMA_List_Init+0x202>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a48 <DMA_List_Init+0x2a4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <DMA_List_Init+0x202>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2d      	ldr	r2, [pc, #180]	@ (8002a4c <DMA_List_Init+0x2a8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <DMA_List_Init+0x202>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a50 <DMA_List_Init+0x2ac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <DMA_List_Init+0x206>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <DMA_List_Init+0x208>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2200      	movs	r2, #0
 80029be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40020050 	.word	0x40020050
 80029d8:	50020050 	.word	0x50020050
 80029dc:	400200d0 	.word	0x400200d0
 80029e0:	500200d0 	.word	0x500200d0
 80029e4:	40020150 	.word	0x40020150
 80029e8:	50020150 	.word	0x50020150
 80029ec:	400201d0 	.word	0x400201d0
 80029f0:	500201d0 	.word	0x500201d0
 80029f4:	40020250 	.word	0x40020250
 80029f8:	50020250 	.word	0x50020250
 80029fc:	400202d0 	.word	0x400202d0
 8002a00:	500202d0 	.word	0x500202d0
 8002a04:	40020350 	.word	0x40020350
 8002a08:	50020350 	.word	0x50020350
 8002a0c:	400203d0 	.word	0x400203d0
 8002a10:	500203d0 	.word	0x500203d0
 8002a14:	40021050 	.word	0x40021050
 8002a18:	50021050 	.word	0x50021050
 8002a1c:	400210d0 	.word	0x400210d0
 8002a20:	500210d0 	.word	0x500210d0
 8002a24:	40021150 	.word	0x40021150
 8002a28:	50021150 	.word	0x50021150
 8002a2c:	400211d0 	.word	0x400211d0
 8002a30:	500211d0 	.word	0x500211d0
 8002a34:	40021250 	.word	0x40021250
 8002a38:	50021250 	.word	0x50021250
 8002a3c:	400212d0 	.word	0x400212d0
 8002a40:	500212d0 	.word	0x500212d0
 8002a44:	40021350 	.word	0x40021350
 8002a48:	50021350 	.word	0x50021350
 8002a4c:	400213d0 	.word	0x400213d0
 8002a50:	500213d0 	.word	0x500213d0

08002a54 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002a66:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8002a6c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002a72:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8002a78:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	051b      	lsls	r3, r3, #20
 8002aa0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8002aa4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8002ab2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8002ac6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d10c      	bne.n	8002af2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	e00a      	b.n	8002b08 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002afa:	d105      	bne.n	8002b08 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b10:	431a      	orrs	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8002b36:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d04e      	beq.n	8002bf2 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	0419      	lsls	r1, r3, #16
 8002b60:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <DMA_List_BuildNode+0x2b8>)
 8002b62:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8002b64:	431a      	orrs	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da06      	bge.n	8002b80 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	e005      	b.n	8002b8c <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	da06      	bge.n	8002ba2 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	e005      	b.n	8002bae <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da06      	bge.n	8002bc4 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	e005      	b.n	8002bd0 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da06      	bge.n	8002be6 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	e005      	b.n	8002bf2 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d05d      	beq.n	8002cca <DMA_List_BuildNode+0x276>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	da09      	bge.n	8002c2a <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1a:	425b      	negs	r3, r3
 8002c1c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	e005      	b.n	8002c36 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2e:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	da0d      	bge.n	8002c5a <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	425b      	negs	r3, r3
 8002c44:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0419      	lsls	r1, r3, #16
 8002c4e:	4b30      	ldr	r3, [pc, #192]	@ (8002d10 <DMA_List_BuildNode+0x2bc>)
 8002c50:	400b      	ands	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	615a      	str	r2, [r3, #20]
 8002c58:	e009      	b.n	8002c6e <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	0419      	lsls	r1, r3, #16
 8002c64:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <DMA_List_BuildNode+0x2bc>)
 8002c66:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	da08      	bge.n	8002c88 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	425b      	negs	r3, r3
 8002c7c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	619a      	str	r2, [r3, #24]
 8002c86:	e004      	b.n	8002c92 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da0b      	bge.n	8002cb2 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9e:	425b      	negs	r3, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002caa:	431a      	orrs	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	e007      	b.n	8002cc2 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	619a      	str	r2, [r3, #24]
    }
    /********************************************************************************* CBR2 register value is updated */

    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	61da      	str	r2, [r3, #28]
 8002cc8:	e002      	b.n	8002cd0 <DMA_List_BuildNode+0x27c>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <DMA_List_BuildNode+0x29e>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8002cf0:	e005      	b.n	8002cfe <DMA_List_BuildNode+0x2aa>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	07ff0000 	.word	0x07ff0000
 8002d10:	1fff0000 	.word	0x1fff0000

08002d14 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e00a      	b.n	8002d56 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e004      	b.n	8002d56 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e00e      	b.n	8002db2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e006      	b.n	8002db2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e00b      	b.n	8002de0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d001      	beq.n	8002dde <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e000      	b.n	8002de0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00c      	beq.n	8002e1e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <DMA_List_GetCLLRNodeInfo+0x58>)
 8002e0e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00f      	beq.n	8002e36 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002e1c:	e00b      	b.n	8002e36 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002e28:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2205      	movs	r2, #5
 8002e34:	601a      	str	r2, [r3, #0]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	fe010000 	.word	0xfe010000
 8002e48:	f8010000 	.word	0xf8010000

08002e4c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	@ 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d142      	bne.n	8002ef6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8002e70:	e01d      	b.n	8002eae <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e00f      	b.n	8002ea8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8002ea0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d3dc      	bcc.n	8002e72 <DMA_List_FindNode+0x26>
 8002eb8:	e029      	b.n	8002f0e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e00f      	b.n	8002ef0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4413      	add	r3, r2
 8002ee0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8002ee8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d206      	bcs.n	8002f0e <DMA_List_FindNode+0xc2>
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002f06:	4013      	ands	r3, r2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d1d5      	bne.n	8002eba <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e02b      	b.n	8002f7e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	461a      	mov	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00f      	beq.n	8002f7c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	461a      	mov	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8002f6c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f9a:	e136      	b.n	800320a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8128 	beq.w	8003204 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x38>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b12      	cmp	r3, #18
 8002fc2:	d125      	bne.n	8003010 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	08da      	lsrs	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3208      	adds	r2, #8
 800300a:	6979      	ldr	r1, [r7, #20]
 800300c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4013      	ands	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0203 	and.w	r2, r3, #3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d00b      	beq.n	8003064 <HAL_GPIO_Init+0xd8>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d007      	beq.n	8003064 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003058:	2b11      	cmp	r3, #17
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b12      	cmp	r3, #18
 8003062:	d130      	bne.n	80030c6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800309a:	2201      	movs	r2, #1
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4013      	ands	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 0201 	and.w	r2, r3, #1
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d017      	beq.n	80030fe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4013      	ands	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d07c      	beq.n	8003204 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800310a:	4a47      	ldr	r2, [pc, #284]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3318      	adds	r3, #24
 8003112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003116:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4013      	ands	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0a9a      	lsrs	r2, r3, #10
 8003132:	4b3e      	ldr	r3, [pc, #248]	@ (800322c <HAL_GPIO_Init+0x2a0>)
 8003134:	4013      	ands	r3, r2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	f002 0203 	and.w	r2, r2, #3
 800313c:	00d2      	lsls	r2, r2, #3
 800313e:	4093      	lsls	r3, r2
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003146:	4938      	ldr	r1, [pc, #224]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3318      	adds	r3, #24
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003154:	4b34      	ldr	r3, [pc, #208]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	43db      	mvns	r3, r3
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4013      	ands	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003178:	4a2b      	ldr	r2, [pc, #172]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800317e:	4b2a      	ldr	r3, [pc, #168]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43db      	mvns	r3, r3
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4013      	ands	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80031a2:	4a21      	ldr	r2, [pc, #132]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80031a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4013      	ands	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80031ce:	4a16      	ldr	r2, [pc, #88]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80031d6:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4013      	ands	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <HAL_GPIO_Init+0x29c>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	3301      	adds	r3, #1
 8003208:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f aec1 	bne.w	8002f9c <HAL_GPIO_Init+0x10>
  }
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	44022000 	.word	0x44022000
 800322c:	002f7f7f 	.word	0x002f7f7f

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800324c:	e002      	b.n	8003254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e129      	b.n	80034c6 <HAL_I2S_Init+0x266>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd feca 	bl	8001020 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d107      	bne.n	80032b2 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d008      	beq.n	80032d4 <HAL_I2S_Init+0x74>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d004      	beq.n	80032d4 <HAL_I2S_Init+0x74>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b0a      	cmp	r3, #10
 80032d0:	f040 80a3 	bne.w	800341a <HAL_I2S_Init+0x1ba>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d074      	beq.n	80033c6 <HAL_I2S_Init+0x166>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80032e4:	2302      	movs	r3, #2
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e001      	b.n	80032ee <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80032ea:	2301      	movs	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b30      	cmp	r3, #48	@ 0x30
 80032f4:	d003      	beq.n	80032fe <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80032fa:	2bb0      	cmp	r3, #176	@ 0xb0
 80032fc:	d102      	bne.n	8003304 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80032fe:	2301      	movs	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	e001      	b.n	8003308 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
      if (hi2s->Instance == SPI1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a70      	ldr	r2, [pc, #448]	@ (80034d0 <HAL_I2S_Init+0x270>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d107      	bne.n	8003322 <HAL_I2S_Init+0xc2>
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI1);
 8003312:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	f003 ff23 	bl	8007164 <HAL_RCCEx_GetPeriphCLKFreq>
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	e013      	b.n	800334a <HAL_I2S_Init+0xea>
      }
      else if (hi2s->Instance == SPI2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6b      	ldr	r2, [pc, #428]	@ (80034d4 <HAL_I2S_Init+0x274>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d107      	bne.n	800333c <HAL_I2S_Init+0xdc>
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI2);
 800332c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	f003 ff16 	bl	8007164 <HAL_RCCEx_GetPeriphCLKFreq>
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	e006      	b.n	800334a <HAL_I2S_Init+0xea>
      }
      else /* SPI3 source clock */
      {
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI3);
 800333c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	f003 ff0e 	bl	8007164 <HAL_RCCEx_GetPeriphCLKFreq>
 8003348:	60f8      	str	r0, [r7, #12]
      }

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003352:	d113      	bne.n	800337c <HAL_I2S_Init+0x11c>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003354:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	fbb2 f2f3 	udiv	r2, r2, r3
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	3305      	adds	r3, #5
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e014      	b.n	80033a6 <HAL_I2S_Init+0x146>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800337c:	2220      	movs	r2, #32
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	3305      	adds	r3, #5
 80033a4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4a4b      	ldr	r2, [pc, #300]	@ (80034d8 <HAL_I2S_Init+0x278>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e003      	b.n	80033ce <HAL_I2S_Init+0x16e>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80033c6:	2302      	movs	r3, #2
 80033c8:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <HAL_I2S_Init+0x17a>
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d002      	beq.n	80033e0 <HAL_I2S_Init+0x180>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2bff      	cmp	r3, #255	@ 0xff
 80033de:	d907      	bls.n	80033f0 <HAL_I2S_Init+0x190>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e06a      	b.n	80034c6 <HAL_I2S_Init+0x266>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_I2S_Init+0x19a>
    {
      i2sodd = 1UL;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	0411      	lsls	r1, r2, #16
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	0612      	lsls	r2, r2, #24
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	430b      	orrs	r3, r1
 8003418:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003420:	4b2e      	ldr	r3, [pc, #184]	@ (80034dc <HAL_I2S_Init+0x27c>)
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6851      	ldr	r1, [r2, #4]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68d2      	ldr	r2, [r2, #12]
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6992      	ldr	r2, [r2, #24]
 8003438:	4311      	orrs	r1, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6a12      	ldr	r2, [r2, #32]
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6912      	ldr	r2, [r2, #16]
 800344a:	430a      	orrs	r2, r1
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8003460:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003470:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d007      	beq.n	80034a0 <HAL_I2S_Init+0x240>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b06      	cmp	r3, #6
 8003496:	d003      	beq.n	80034a0 <HAL_I2S_Init+0x240>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b0a      	cmp	r3, #10
 800349e:	d10a      	bne.n	80034b6 <HAL_I2S_Init+0x256>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40013000 	.word	0x40013000
 80034d4:	40003800 	.word	0x40003800
 80034d8:	cccccccd 	.word	0xcccccccd
 80034dc:	fdff9040 	.word	0xfdff9040

080034e0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode;

  if ((pData == NULL) || (Size == 0UL))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_I2S_Receive_DMA+0x1a>
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_I2S_Receive_DMA+0x1e>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0da      	b.n	80036b4 <HAL_I2S_Receive_DMA+0x1d4>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
 800350c:	e0d2      	b.n	80036b4 <HAL_I2S_Receive_DMA+0x1d4>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2S_Receive_DMA+0x3e>
 800351a:	2302      	movs	r3, #2
 800351c:	e0ca      	b.n	80036b4 <HAL_I2S_Receive_DMA+0x1d4>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2204      	movs	r2, #4
 800352a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355c:	4a57      	ldr	r2, [pc, #348]	@ (80036bc <HAL_I2S_Receive_DMA+0x1dc>)
 800355e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003564:	4a56      	ldr	r2, [pc, #344]	@ (80036c0 <HAL_I2S_Receive_DMA+0x1e0>)
 8003566:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356c:	4a55      	ldr	r2, [pc, #340]	@ (80036c4 <HAL_I2S_Receive_DMA+0x1e4>)
 800356e:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_16B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B_EXTENDED))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_I2S_Receive_DMA+0xa2>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003580:	d105      	bne.n	800358e <HAL_I2S_Receive_DMA+0xae>
  {
    hi2s->RxXferCount = Size * 2U;
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	875a      	strh	r2, [r3, #58]	@ 0x3a
 800358c:	e004      	b.n	8003598 <HAL_I2S_Receive_DMA+0xb8>
  }
  else
  {
    hi2s->RxXferCount = Size * 4U;
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Enable the Rx DMA Stream/Channel */
  if ((hi2s->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d036      	beq.n	8003614 <HAL_I2S_Receive_DMA+0x134>
  {
    if (hi2s->hdmarx->LinkedListQueue != NULL)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01f      	beq.n	80035f0 <HAL_I2S_Receive_DMA+0x110>
    {
      /* Set DMA data size */
      hi2s->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hi2s->RxXferCount;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hi2s->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hi2s->Instance->RXDR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hi2s->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hi2s->pRxBuffPtr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]

      errorcode = HAL_DMAEx_List_Start_IT(hi2s->hdmarx);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fe73 	bl	80022d0 <HAL_DMAEx_List_Start_IT>
 80035ea:	4603      	mov	r3, r0
 80035ec:	75fb      	strb	r3, [r7, #23]
 80035ee:	e021      	b.n	8003634 <HAL_I2S_Receive_DMA+0x154>
    }
    else
    {
      /* Update SPI error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f4:	f043 0208 	orr.w	r2, r3, #8
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Unlock the process */
      __HAL_UNLOCK(hi2s);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      hi2s->State = HAL_I2S_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      errorcode = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
      return errorcode;
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	e04f      	b.n	80036b4 <HAL_I2S_Receive_DMA+0x1d4>
    }
  }
  else
  {
    errorcode = HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3330      	adds	r3, #48	@ 0x30
 800361e:	4619      	mov	r1, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003624:	461a      	mov	r2, r3
                                 hi2s->RxXferCount);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800362a:	b29b      	uxth	r3, r3
    errorcode = HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 800362c:	f7fe fa86 	bl	8001b3c <HAL_DMA_Start_IT>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (errorcode != HAL_OK)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d011      	beq.n	800365e <HAL_I2S_Receive_DMA+0x17e>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	f043 0208 	orr.w	r2, r3, #8
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	e02a      	b.n	80036b4 <HAL_I2S_Receive_DMA+0x1d4>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_I2S_Receive_DMA+0x19c>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800367a:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_I2S_Receive_DMA+0x1ba>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a8:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	0800399b 	.word	0x0800399b
 80036c0:	08003959 	.word	0x08003959
 80036c4:	080039b7 	.word	0x080039b7

080036c8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036f2:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00f      	beq.n	800371c <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fa7b 	bl	8001bfc <HAL_DMA_Abort>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	f043 0208 	orr.w	r2, r3, #8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00f      	beq.n	8003744 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fa67 	bl	8001bfc <HAL_DMA_Abort>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003738:	f043 0208 	orr.w	r2, r3, #8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return errorcode;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b04      	cmp	r3, #4
 8003790:	d131      	bne.n	80037f6 <HAL_I2S_IRQHandler+0x90>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_I2S_IRQHandler+0x48>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01e      	beq.n	80037f6 <HAL_I2S_IRQHandler+0x90>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	f423 73b0 	bic.w	r3, r3, #352	@ 0x160
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037da:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e8:	f043 0202 	orr.w	r2, r3, #2
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fd fbe5 	bl	8000fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d12f      	bne.n	8003862 <HAL_I2S_IRQHandler+0xfc>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_I2S_IRQHandler+0xb8>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_I2S_IRQHandler+0xb8>
    {
      hi2s->TxISR(hi2s);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01c      	beq.n	8003862 <HAL_I2S_IRQHandler+0xfc>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 72b1 	bic.w	r2, r2, #354	@ 0x162
 8003836:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0220 	orr.w	r2, r2, #32
 8003846:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd fbaf 	bl	8000fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b05      	cmp	r3, #5
 800386c:	d170      	bne.n	8003950 <HAL_I2S_IRQHandler+0x1ea>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_I2S_IRQHandler+0x122>
    {
      hi2s->TxISR(hi2s);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_I2S_IRQHandler+0x13e>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_I2S_IRQHandler+0x13e>
    {
      hi2s->RxISR(hi2s);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_I2S_IRQHandler+0x15a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <HAL_I2S_IRQHandler+0x15a>
    {
      hi2s->TxISR(hi2s);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01e      	beq.n	8003908 <HAL_I2S_IRQHandler+0x1a2>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	f423 73b1 	bic.w	r3, r3, #354	@ 0x162
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0220 	orr.w	r2, r2, #32
 80038ec:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fb5c 	bl	8000fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01e      	beq.n	8003950 <HAL_I2S_IRQHandler+0x1ea>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	f423 73b1 	bic.w	r3, r3, #354	@ 0x162
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003934:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fb38 	bl	8000fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10e      	bne.n	800398c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800397c:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7fd fb05 	bl	8000f9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7fd fae5 	bl	8000f78 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80039d2:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ec:	f043 0208 	orr.w	r2, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7fd fae3 	bl	8000fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e007      	b.n	8003a32 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003a22:	4b07      	ldr	r3, [pc, #28]	@ (8003a40 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0204 	bic.w	r2, r3, #4
 8003a2a:	4905      	ldr	r1, [pc, #20]	@ (8003a40 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40030400 	.word	0x40030400

08003a44 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_ICACHE_Enable+0x1c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	@ (8003a60 <HAL_ICACHE_Enable+0x1c>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40030400 	.word	0x40030400

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f000 bc28 	b.w	80042c8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a78:	4b94      	ldr	r3, [pc, #592]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0318 	and.w	r3, r3, #24
 8003a80:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003a82:	4b92      	ldr	r3, [pc, #584]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d05b      	beq.n	8003b50 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d005      	beq.n	8003aaa <HAL_RCC_OscConfig+0x46>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2b18      	cmp	r3, #24
 8003aa2:	d114      	bne.n	8003ace <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d111      	bne.n	8003ace <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f000 bc08 	b.w	80042c8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003ab8:	4b84      	ldr	r3, [pc, #528]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	4981      	ldr	r1, [pc, #516]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003acc:	e040      	b.n	8003b50 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d023      	beq.n	8003b1e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7c      	ldr	r2, [pc, #496]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fee7 	bl	80018b4 <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003aea:	f7fd fee3 	bl	80018b4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e3e5      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003afc:	4b73      	ldr	r3, [pc, #460]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003b08:	4b70      	ldr	r3, [pc, #448]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	496d      	ldr	r1, [pc, #436]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	618b      	str	r3, [r1, #24]
 8003b1c:	e018      	b.n	8003b50 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6a      	ldr	r2, [pc, #424]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd fec3 	bl	80018b4 <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003b32:	f7fd febf 	bl	80018b4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e3c1      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b44:	4b61      	ldr	r3, [pc, #388]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f0      	bne.n	8003b32 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a0 	beq.w	8003c9e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_OscConfig+0x10c>
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b18      	cmp	r3, #24
 8003b68:	d109      	bne.n	8003b7e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f040 8092 	bne.w	8003c9e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e3a4      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x132>
 8003b88:	4b50      	ldr	r3, [pc, #320]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e058      	b.n	8003c48 <HAL_RCC_OscConfig+0x1e4>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d112      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x160>
 8003b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b48      	ldr	r3, [pc, #288]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a47      	ldr	r2, [pc, #284]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b45      	ldr	r3, [pc, #276]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a44      	ldr	r2, [pc, #272]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e041      	b.n	8003c48 <HAL_RCC_OscConfig+0x1e4>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bcc:	d112      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x190>
 8003bce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3b      	ldr	r2, [pc, #236]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003be0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b39      	ldr	r3, [pc, #228]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a38      	ldr	r2, [pc, #224]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e029      	b.n	8003c48 <HAL_RCC_OscConfig+0x1e4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003bfc:	d112      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1c0>
 8003bfe:	4b33      	ldr	r3, [pc, #204]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a32      	ldr	r2, [pc, #200]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b30      	ldr	r3, [pc, #192]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e011      	b.n	8003c48 <HAL_RCC_OscConfig+0x1e4>
 8003c24:	4b29      	ldr	r3, [pc, #164]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a28      	ldr	r2, [pc, #160]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a25      	ldr	r2, [pc, #148]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a22      	ldr	r2, [pc, #136]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c42:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd fe30 	bl	80018b4 <HAL_GetTick>
 8003c54:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c58:	f7fd fe2c 	bl	80018b4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e32e      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6a:	4b18      	ldr	r3, [pc, #96]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x1f4>
 8003c76:	e012      	b.n	8003c9e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fe1c 	bl	80018b4 <HAL_GetTick>
 8003c7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c80:	f7fd fe18 	bl	80018b4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e31a      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c92:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <HAL_RCC_OscConfig+0x268>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 809a 	beq.w	8003de0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCC_OscConfig+0x25a>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b18      	cmp	r3, #24
 8003cb6:	d149      	bne.n	8003d4c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d146      	bne.n	8003d4c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e2fe      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
 8003cca:	bf00      	nop
 8003ccc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d11c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003cd6:	4b9a      	ldr	r3, [pc, #616]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0218 	and.w	r2, r3, #24
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d014      	beq.n	8003d10 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ce6:	4b96      	ldr	r3, [pc, #600]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 0218 	bic.w	r2, r3, #24
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	4993      	ldr	r1, [pc, #588]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003cf8:	f000 fdd0 	bl	800489c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cfc:	4b91      	ldr	r3, [pc, #580]	@ (8003f44 <HAL_RCC_OscConfig+0x4e0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd fba1 	bl	8001448 <HAL_InitTick>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e2db      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd fdd0 	bl	80018b4 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d18:	f7fd fdcc 	bl	80018b4 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e2ce      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d2a:	4b85      	ldr	r3, [pc, #532]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003d36:	4b82      	ldr	r3, [pc, #520]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	497e      	ldr	r1, [pc, #504]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003d4a:	e049      	b.n	8003de0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d02c      	beq.n	8003dae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003d54:	4b7a      	ldr	r3, [pc, #488]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 0218 	bic.w	r2, r3, #24
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4977      	ldr	r1, [pc, #476]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003d66:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fd fd9f 	bl	80018b4 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d7a:	f7fd fd9b 	bl	80018b4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e29d      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003d98:	4b69      	ldr	r3, [pc, #420]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	4966      	ldr	r1, [pc, #408]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	610b      	str	r3, [r1, #16]
 8003dac:	e018      	b.n	8003de0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dae:	4b64      	ldr	r3, [pc, #400]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a63      	ldr	r2, [pc, #396]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fd fd7b 	bl	80018b4 <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fd77 	bl	80018b4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e279      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d03c      	beq.n	8003e66 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df4:	4b52      	ldr	r3, [pc, #328]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dfa:	4a51      	ldr	r2, [pc, #324]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003dfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fd fd56 	bl	80018b4 <HAL_GetTick>
 8003e08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e0c:	f7fd fd52 	bl	80018b4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e254      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e1e:	4b48      	ldr	r3, [pc, #288]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ef      	beq.n	8003e0c <HAL_RCC_OscConfig+0x3a8>
 8003e2c:	e01b      	b.n	8003e66 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2e:	4b44      	ldr	r3, [pc, #272]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e34:	4a42      	ldr	r2, [pc, #264]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7fd fd39 	bl	80018b4 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e46:	f7fd fd35 	bl	80018b4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e237      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e58:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ef      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80d2 	beq.w	8004018 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e74:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <HAL_RCC_OscConfig+0x4e4>)
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d118      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003e80:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <HAL_RCC_OscConfig+0x4e4>)
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <HAL_RCC_OscConfig+0x4e4>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8c:	f7fd fd12 	bl	80018b4 <HAL_GetTick>
 8003e90:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fd fd0e 	bl	80018b4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e210      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ea6:	4b28      	ldr	r3, [pc, #160]	@ (8003f48 <HAL_RCC_OscConfig+0x4e4>)
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d108      	bne.n	8003ecc <HAL_RCC_OscConfig+0x468>
 8003eba:	4b21      	ldr	r3, [pc, #132]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003eca:	e074      	b.n	8003fb6 <HAL_RCC_OscConfig+0x552>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d118      	bne.n	8003f06 <HAL_RCC_OscConfig+0x4a2>
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eda:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ee4:	4b16      	ldr	r3, [pc, #88]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eea:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ef4:	4b12      	ldr	r3, [pc, #72]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003efa:	4a11      	ldr	r2, [pc, #68]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f04:	e057      	b.n	8003fb6 <HAL_RCC_OscConfig+0x552>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d11e      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4e8>
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f14:	4a0a      	ldr	r2, [pc, #40]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f1e:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f24:	4a06      	ldr	r2, [pc, #24]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f2e:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f34:	4a02      	ldr	r2, [pc, #8]	@ (8003f40 <HAL_RCC_OscConfig+0x4dc>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f3e:	e03a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x552>
 8003f40:	44020c00 	.word	0x44020c00
 8003f44:	20000004 	.word	0x20000004
 8003f48:	44020800 	.word	0x44020800
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b85      	cmp	r3, #133	@ 0x85
 8003f52:	d118      	bne.n	8003f86 <HAL_RCC_OscConfig+0x522>
 8003f54:	4ba2      	ldr	r3, [pc, #648]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5a:	4aa1      	ldr	r2, [pc, #644]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f64:	4b9e      	ldr	r3, [pc, #632]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6a:	4a9d      	ldr	r2, [pc, #628]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f74:	4b9a      	ldr	r3, [pc, #616]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f7a:	4a99      	ldr	r2, [pc, #612]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f84:	e017      	b.n	8003fb6 <HAL_RCC_OscConfig+0x552>
 8003f86:	4b96      	ldr	r3, [pc, #600]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f8c:	4a94      	ldr	r2, [pc, #592]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f96:	4b92      	ldr	r3, [pc, #584]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f9c:	4a90      	ldr	r2, [pc, #576]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003f9e:	f023 0304 	bic.w	r3, r3, #4
 8003fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fac:	4a8c      	ldr	r2, [pc, #560]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbe:	f7fd fc79 	bl	80018b4 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fd fc75 	bl	80018b4 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e175      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fdc:	4b80      	ldr	r3, [pc, #512]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8003fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ed      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x562>
 8003fea:	e015      	b.n	8004018 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd fc62 	bl	80018b4 <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd fc5e 	bl	80018b4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e15e      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800400a:	4b75      	ldr	r3, [pc, #468]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 800400c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ed      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d036      	beq.n	8004092 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	2b00      	cmp	r3, #0
 800402a:	d019      	beq.n	8004060 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800402c:	4b6c      	ldr	r3, [pc, #432]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6b      	ldr	r2, [pc, #428]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004032:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004036:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd fc3c 	bl	80018b4 <HAL_GetTick>
 800403c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004040:	f7fd fc38 	bl	80018b4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e13a      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004052:	4b63      	ldr	r3, [pc, #396]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x5dc>
 800405e:	e018      	b.n	8004092 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004060:	4b5f      	ldr	r3, [pc, #380]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a5e      	ldr	r2, [pc, #376]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004066:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800406a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd fc22 	bl	80018b4 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004074:	f7fd fc1e 	bl	80018b4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e120      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004086:	4b56      	ldr	r3, [pc, #344]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8115 	beq.w	80042c6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b18      	cmp	r3, #24
 80040a0:	f000 80af 	beq.w	8004202 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	f040 8086 	bne.w	80041ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80040ae:	4b4c      	ldr	r3, [pc, #304]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a4b      	ldr	r2, [pc, #300]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80040b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd fbfb 	bl	80018b4 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80040c2:	f7fd fbf7 	bl	80018b4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e0f9      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040d4:	4b42      	ldr	r3, [pc, #264]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80040e0:	4b3f      	ldr	r3, [pc, #252]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040e8:	f023 0303 	bic.w	r3, r3, #3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040f4:	0212      	lsls	r2, r2, #8
 80040f6:	430a      	orrs	r2, r1
 80040f8:	4939      	ldr	r1, [pc, #228]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004102:	3b01      	subs	r3, #1
 8004104:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	3b01      	subs	r3, #1
 800410e:	025b      	lsls	r3, r3, #9
 8004110:	b29b      	uxth	r3, r3
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	3b01      	subs	r3, #1
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	3b01      	subs	r3, #1
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800412e:	492c      	ldr	r1, [pc, #176]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004134:	4b2a      	ldr	r3, [pc, #168]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 800413a:	f023 0310 	bic.w	r3, r3, #16
 800413e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004144:	4a26      	ldr	r2, [pc, #152]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800414a:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 800414c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414e:	4a24      	ldr	r2, [pc, #144]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004150:	f043 0310 	orr.w	r3, r3, #16
 8004154:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004156:	4b22      	ldr	r3, [pc, #136]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	f023 020c 	bic.w	r2, r3, #12
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	491f      	ldr	r1, [pc, #124]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004168:	4b1d      	ldr	r3, [pc, #116]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f023 0220 	bic.w	r2, r3, #32
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004174:	491a      	ldr	r1, [pc, #104]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800417a:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 800417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417e:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004184:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004186:	4b16      	ldr	r3, [pc, #88]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a15      	ldr	r2, [pc, #84]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 800418c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fd fb8f 	bl	80018b4 <HAL_GetTick>
 8004196:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800419a:	f7fd fb8b 	bl	80018b4 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e08d      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041ac:	4b0c      	ldr	r3, [pc, #48]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x736>
 80041b8:	e085      	b.n	80042c6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80041ba:	4b09      	ldr	r3, [pc, #36]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a08      	ldr	r2, [pc, #32]	@ (80041e0 <HAL_RCC_OscConfig+0x77c>)
 80041c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fd fb75 	bl	80018b4 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80041ce:	f7fd fb71 	bl	80018b4 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d903      	bls.n	80041e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e073      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
 80041e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041e4:	4b3a      	ldr	r3, [pc, #232]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ee      	bne.n	80041ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80041f0:	4b37      	ldr	r3, [pc, #220]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	4a36      	ldr	r2, [pc, #216]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 80041f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	6293      	str	r3, [r2, #40]	@ 0x28
 8004200:	e061      	b.n	80042c6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004202:	4b33      	ldr	r3, [pc, #204]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004208:	4b31      	ldr	r3, [pc, #196]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 800420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	2b01      	cmp	r3, #1
 8004214:	d031      	beq.n	800427a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0203 	and.w	r2, r3, #3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d12a      	bne.n	800427a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d122      	bne.n	800427a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d11a      	bne.n	800427a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	0a5b      	lsrs	r3, r3, #9
 8004248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d111      	bne.n	800427a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004262:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d108      	bne.n	800427a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	0e1b      	lsrs	r3, r3, #24
 800426c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d001      	beq.n	800427e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e024      	b.n	80042c8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800427e:	4b14      	ldr	r3, [pc, #80]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	08db      	lsrs	r3, r3, #3
 8004284:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800428c:	429a      	cmp	r2, r3
 800428e:	d01a      	beq.n	80042c6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004290:	4b0f      	ldr	r3, [pc, #60]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	4a0e      	ldr	r2, [pc, #56]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fb0a 	bl	80018b4 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80042a2:	bf00      	nop
 80042a4:	f7fd fb06 	bl	80018b4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d0f9      	beq.n	80042a4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b4:	4a06      	ldr	r2, [pc, #24]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80042ba:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042be:	4a04      	ldr	r2, [pc, #16]	@ (80042d0 <HAL_RCC_OscConfig+0x86c>)
 80042c0:	f043 0310 	orr.w	r3, r3, #16
 80042c4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3720      	adds	r7, #32
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	44020c00 	.word	0x44020c00

080042d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e19e      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b83      	ldr	r3, [pc, #524]	@ (80044f8 <HAL_RCC_ClockConfig+0x224>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d910      	bls.n	8004318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b80      	ldr	r3, [pc, #512]	@ (80044f8 <HAL_RCC_ClockConfig+0x224>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 020f 	bic.w	r2, r3, #15
 80042fe:	497e      	ldr	r1, [pc, #504]	@ (80044f8 <HAL_RCC_ClockConfig+0x224>)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b7c      	ldr	r3, [pc, #496]	@ (80044f8 <HAL_RCC_ClockConfig+0x224>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e186      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	4b74      	ldr	r3, [pc, #464]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004332:	429a      	cmp	r2, r3
 8004334:	d909      	bls.n	800434a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004336:	4b71      	ldr	r3, [pc, #452]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	496d      	ldr	r1, [pc, #436]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004346:	4313      	orrs	r3, r2
 8004348:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d012      	beq.n	800437c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	4b68      	ldr	r3, [pc, #416]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004364:	429a      	cmp	r2, r3
 8004366:	d909      	bls.n	800437c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004368:	4b64      	ldr	r3, [pc, #400]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4961      	ldr	r1, [pc, #388]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004378:	4313      	orrs	r3, r2
 800437a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	4b5b      	ldr	r3, [pc, #364]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004394:	429a      	cmp	r2, r3
 8004396:	d908      	bls.n	80043aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004398:	4b58      	ldr	r3, [pc, #352]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4955      	ldr	r1, [pc, #340]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d010      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	4b50      	ldr	r3, [pc, #320]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d908      	bls.n	80043d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80043c6:	4b4d      	ldr	r3, [pc, #308]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 020f 	bic.w	r2, r3, #15
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	494a      	ldr	r1, [pc, #296]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8093 	beq.w	800450c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043ee:	4b43      	ldr	r3, [pc, #268]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d121      	bne.n	800443e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e113      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004406:	4b3d      	ldr	r3, [pc, #244]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d115      	bne.n	800443e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e107      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0fb      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800442e:	4b33      	ldr	r3, [pc, #204]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0f3      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800443e:	4b2f      	ldr	r3, [pc, #188]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	492c      	ldr	r1, [pc, #176]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 800444c:	4313      	orrs	r3, r2
 800444e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd fa30 	bl	80018b4 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d112      	bne.n	8004484 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445e:	e00a      	b.n	8004476 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f7fd fa28 	bl	80018b4 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0d7      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004476:	4b21      	ldr	r3, [pc, #132]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0318 	and.w	r3, r3, #24
 800447e:	2b18      	cmp	r3, #24
 8004480:	d1ee      	bne.n	8004460 <HAL_RCC_ClockConfig+0x18c>
 8004482:	e043      	b.n	800450c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d112      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800448e:	f7fd fa11 	bl	80018b4 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e0c0      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044a4:	4b15      	ldr	r3, [pc, #84]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 0318 	and.w	r3, r3, #24
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d1ee      	bne.n	800448e <HAL_RCC_ClockConfig+0x1ba>
 80044b0:	e02c      	b.n	800450c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d122      	bne.n	8004500 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7fd f9fa 	bl	80018b4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0a9      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80044d2:	4b0a      	ldr	r3, [pc, #40]	@ (80044fc <HAL_RCC_ClockConfig+0x228>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0318 	and.w	r3, r3, #24
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d1ee      	bne.n	80044bc <HAL_RCC_ClockConfig+0x1e8>
 80044de:	e015      	b.n	800450c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044e0:	f7fd f9e8 	bl	80018b4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d906      	bls.n	8004500 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e097      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
 80044f6:	bf00      	nop
 80044f8:	40022000 	.word	0x40022000
 80044fc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004500:	4b4b      	ldr	r3, [pc, #300]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 0318 	and.w	r3, r3, #24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e9      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d010      	beq.n	800453a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	429a      	cmp	r2, r3
 8004526:	d208      	bcs.n	800453a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004528:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 020f 	bic.w	r2, r3, #15
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	493e      	ldr	r1, [pc, #248]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800453a:	4b3e      	ldr	r3, [pc, #248]	@ (8004634 <HAL_RCC_ClockConfig+0x360>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d210      	bcs.n	800456a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004548:	4b3a      	ldr	r3, [pc, #232]	@ (8004634 <HAL_RCC_ClockConfig+0x360>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 020f 	bic.w	r2, r3, #15
 8004550:	4938      	ldr	r1, [pc, #224]	@ (8004634 <HAL_RCC_ClockConfig+0x360>)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004558:	4b36      	ldr	r3, [pc, #216]	@ (8004634 <HAL_RCC_ClockConfig+0x360>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e05d      	b.n	8004626 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	4b2d      	ldr	r3, [pc, #180]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004582:	429a      	cmp	r2, r3
 8004584:	d208      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004586:	4b2a      	ldr	r3, [pc, #168]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	4927      	ldr	r1, [pc, #156]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d209      	bcs.n	80045ca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80045b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	491a      	ldr	r1, [pc, #104]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d209      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	490e      	ldr	r1, [pc, #56]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80045fc:	f000 f822 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_RCC_ClockConfig+0x35c>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	490b      	ldr	r1, [pc, #44]	@ (8004638 <HAL_RCC_ClockConfig+0x364>)
 800460c:	5ccb      	ldrb	r3, [r1, r3]
 800460e:	fa22 f303 	lsr.w	r3, r2, r3
 8004612:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <HAL_RCC_ClockConfig+0x368>)
 8004614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <HAL_RCC_ClockConfig+0x36c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fc ff14 	bl	8001448 <HAL_InitTick>
 8004620:	4603      	mov	r3, r0
 8004622:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004624:	7afb      	ldrb	r3, [r7, #11]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	44020c00 	.word	0x44020c00
 8004634:	40022000 	.word	0x40022000
 8004638:	0800db04 	.word	0x0800db04
 800463c:	20000000 	.word	0x20000000
 8004640:	20000004 	.word	0x20000004

08004644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	@ 0x24
 8004648:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800464a:	4b8c      	ldr	r3, [pc, #560]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0318 	and.w	r3, r3, #24
 8004652:	2b08      	cmp	r3, #8
 8004654:	d102      	bne.n	800465c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004656:	4b8a      	ldr	r3, [pc, #552]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e107      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800465c:	4b87      	ldr	r3, [pc, #540]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f003 0318 	and.w	r3, r3, #24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d112      	bne.n	800468e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004668:	4b84      	ldr	r3, [pc, #528]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004674:	4b81      	ldr	r3, [pc, #516]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	08db      	lsrs	r3, r3, #3
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	4a81      	ldr	r2, [pc, #516]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x240>)
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e0f1      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004688:	4b7e      	ldr	r3, [pc, #504]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x240>)
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e0ee      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800468e:	4b7b      	ldr	r3, [pc, #492]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0318 	and.w	r3, r3, #24
 8004696:	2b10      	cmp	r3, #16
 8004698:	d102      	bne.n	80046a0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800469a:	4b7b      	ldr	r3, [pc, #492]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x244>)
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e0e5      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a0:	4b76      	ldr	r3, [pc, #472]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f003 0318 	and.w	r3, r3, #24
 80046a8:	2b18      	cmp	r3, #24
 80046aa:	f040 80dd 	bne.w	8004868 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80046ae:	4b73      	ldr	r3, [pc, #460]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80046b8:	4b70      	ldr	r3, [pc, #448]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80046c4:	4b6d      	ldr	r3, [pc, #436]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80046d0:	4b6a      	ldr	r3, [pc, #424]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80b7 	beq.w	8004862 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d003      	beq.n	8004702 <HAL_RCC_GetSysClockFreq+0xbe>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d056      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x16a>
 8004700:	e077      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004702:	4b5e      	ldr	r3, [pc, #376]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02d      	beq.n	800476a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800470e:	4b5b      	ldr	r3, [pc, #364]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	08db      	lsrs	r3, r3, #3
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	4a5a      	ldr	r2, [pc, #360]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x240>)
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004738:	4b50      	ldr	r3, [pc, #320]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 800473a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004748:	ed97 6a02 	vldr	s12, [r7, #8]
 800474c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800488c <HAL_RCC_GetSysClockFreq+0x248>
 8004750:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004754:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800475c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004764:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004768:	e065      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004774:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004890 <HAL_RCC_GetSysClockFreq+0x24c>
 8004778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477c:	4b3f      	ldr	r3, [pc, #252]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 800477e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800478c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004790:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800488c <HAL_RCC_GetSysClockFreq+0x248>
 8004794:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004798:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800479c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80047ac:	e043      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004894 <HAL_RCC_GetSysClockFreq+0x250>
 80047bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c0:	4b2e      	ldr	r3, [pc, #184]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 80047c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800488c <HAL_RCC_GetSysClockFreq+0x248>
 80047d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80047f0:	e021      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	ee07 3a90 	vmov	s15, r3
 80047f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004898 <HAL_RCC_GetSysClockFreq+0x254>
 8004800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004804:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 8004806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004814:	ed97 6a02 	vldr	s12, [r7, #8]
 8004818:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800488c <HAL_RCC_GetSysClockFreq+0x248>
 800481c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004820:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004828:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800482c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004830:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004834:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004836:	4b11      	ldr	r3, [pc, #68]	@ (800487c <HAL_RCC_GetSysClockFreq+0x238>)
 8004838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800483a:	0a5b      	lsrs	r3, r3, #9
 800483c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004840:	3301      	adds	r3, #1
 8004842:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800484e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485a:	ee17 3a90 	vmov	r3, s15
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e004      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	e001      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004868:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x240>)
 800486a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800486c:	69fb      	ldr	r3, [r7, #28]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3724      	adds	r7, #36	@ 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	44020c00 	.word	0x44020c00
 8004880:	003d0900 	.word	0x003d0900
 8004884:	03d09000 	.word	0x03d09000
 8004888:	007a1200 	.word	0x007a1200
 800488c:	46000000 	.word	0x46000000
 8004890:	4c742400 	.word	0x4c742400
 8004894:	4af42400 	.word	0x4af42400
 8004898:	4a742400 	.word	0x4a742400

0800489c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048a0:	f7ff fed0 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80048aa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048ae:	4907      	ldr	r1, [pc, #28]	@ (80048cc <HAL_RCC_GetHCLKFreq+0x30>)
 80048b0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80048b2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a05      	ldr	r2, [pc, #20]	@ (80048d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80048bc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80048be:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <HAL_RCC_GetHCLKFreq+0x34>)
 80048c0:	681b      	ldr	r3, [r3, #0]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	44020c00 	.word	0x44020c00
 80048cc:	0800db04 	.word	0x0800db04
 80048d0:	20000000 	.word	0x20000000

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80048d8:	f7ff ffe0 	bl	800489c <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4904      	ldr	r1, [pc, #16]	@ (80048fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	44020c00 	.word	0x44020c00
 80048fc:	0800db14 	.word	0x0800db14

08004900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004904:	f7ff ffca 	bl	800489c <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4904      	ldr	r1, [pc, #16]	@ (8004928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	44020c00 	.word	0x44020c00
 8004928:	0800db14 	.word	0x0800db14

0800492c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004930:	f7ff ffb4 	bl	800489c <HAL_RCC_GetHCLKFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	0b1b      	lsrs	r3, r3, #12
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4904      	ldr	r1, [pc, #16]	@ (8004954 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	44020c00 	.word	0x44020c00
 8004954:	0800db14 	.word	0x0800db14

08004958 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	221f      	movs	r2, #31
 8004966:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_RCC_GetClockConfig+0x68>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f003 0203 	and.w	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004974:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_RCC_GetClockConfig+0x68>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049a6:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <HAL_RCC_GetClockConfig+0x6c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 020f 	and.w	r2, r3, #15
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	44020c00 	.word	0x44020c00
 80049c4:	40022000 	.word	0x40022000

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b0d8      	sub	sp, #352	@ 0x160
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049da:	2300      	movs	r3, #0
 80049dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80049ec:	2500      	movs	r5, #0
 80049ee:	ea54 0305 	orrs.w	r3, r4, r5
 80049f2:	d00b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80049f4:	4bcd      	ldr	r3, [pc, #820]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049fa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80049fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a04:	4ac9      	ldr	r2, [pc, #804]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a06:	430b      	orrs	r3, r1
 8004a08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f002 0801 	and.w	r8, r2, #1
 8004a18:	f04f 0900 	mov.w	r9, #0
 8004a1c:	ea58 0309 	orrs.w	r3, r8, r9
 8004a20:	d042      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d823      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a7d 	.word	0x08004a7d
 8004a38:	08004a4d 	.word	0x08004a4d
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a7d 	.word	0x08004a7d
 8004a44:	08004a7d 	.word	0x08004a7d
 8004a48:	08004a7d 	.word	0x08004a7d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a50:	3308      	adds	r3, #8
 8004a52:	4618      	mov	r0, r3
 8004a54:	f004 fee0 	bl	8009818 <RCCEx_PLL2_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004a5e:	e00e      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a64:	3330      	adds	r3, #48	@ 0x30
 8004a66:	4618      	mov	r0, r3
 8004a68:	f004 ff6e 	bl	8009948 <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a86:	4ba9      	ldr	r3, [pc, #676]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a8c:	f023 0107 	bic.w	r1, r3, #7
 8004a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a96:	4aa5      	ldr	r2, [pc, #660]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a9e:	e003      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aa4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f002 0a02 	and.w	sl, r2, #2
 8004ab4:	f04f 0b00 	mov.w	fp, #0
 8004ab8:	ea5a 030b 	orrs.w	r3, sl, fp
 8004abc:	f000 8088 	beq.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac6:	2b28      	cmp	r3, #40	@ 0x28
 8004ac8:	d868      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004aca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004ba5 	.word	0x08004ba5
 8004ad4:	08004b9d 	.word	0x08004b9d
 8004ad8:	08004b9d 	.word	0x08004b9d
 8004adc:	08004b9d 	.word	0x08004b9d
 8004ae0:	08004b9d 	.word	0x08004b9d
 8004ae4:	08004b9d 	.word	0x08004b9d
 8004ae8:	08004b9d 	.word	0x08004b9d
 8004aec:	08004b9d 	.word	0x08004b9d
 8004af0:	08004b75 	.word	0x08004b75
 8004af4:	08004b9d 	.word	0x08004b9d
 8004af8:	08004b9d 	.word	0x08004b9d
 8004afc:	08004b9d 	.word	0x08004b9d
 8004b00:	08004b9d 	.word	0x08004b9d
 8004b04:	08004b9d 	.word	0x08004b9d
 8004b08:	08004b9d 	.word	0x08004b9d
 8004b0c:	08004b9d 	.word	0x08004b9d
 8004b10:	08004b89 	.word	0x08004b89
 8004b14:	08004b9d 	.word	0x08004b9d
 8004b18:	08004b9d 	.word	0x08004b9d
 8004b1c:	08004b9d 	.word	0x08004b9d
 8004b20:	08004b9d 	.word	0x08004b9d
 8004b24:	08004b9d 	.word	0x08004b9d
 8004b28:	08004b9d 	.word	0x08004b9d
 8004b2c:	08004b9d 	.word	0x08004b9d
 8004b30:	08004ba5 	.word	0x08004ba5
 8004b34:	08004b9d 	.word	0x08004b9d
 8004b38:	08004b9d 	.word	0x08004b9d
 8004b3c:	08004b9d 	.word	0x08004b9d
 8004b40:	08004b9d 	.word	0x08004b9d
 8004b44:	08004b9d 	.word	0x08004b9d
 8004b48:	08004b9d 	.word	0x08004b9d
 8004b4c:	08004b9d 	.word	0x08004b9d
 8004b50:	08004ba5 	.word	0x08004ba5
 8004b54:	08004b9d 	.word	0x08004b9d
 8004b58:	08004b9d 	.word	0x08004b9d
 8004b5c:	08004b9d 	.word	0x08004b9d
 8004b60:	08004b9d 	.word	0x08004b9d
 8004b64:	08004b9d 	.word	0x08004b9d
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004b9d 	.word	0x08004b9d
 8004b70:	08004ba5 	.word	0x08004ba5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b78:	3308      	adds	r3, #8
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f004 fe4c 	bl	8009818 <RCCEx_PLL2_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004b86:	e00e      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b8c:	3330      	adds	r3, #48	@ 0x30
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f004 feda 	bl	8009948 <RCCEx_PLL3_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004b9a:	e004      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004bae:	4b5f      	ldr	r3, [pc, #380]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bb4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004bc6:	e003      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bcc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f002 0304 	and.w	r3, r2, #4
 8004bdc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004be6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8004bea:	460b      	mov	r3, r1
 8004bec:	4313      	orrs	r3, r2
 8004bee:	d04e      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bf6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004bfa:	d02c      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004bfc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004c00:	d825      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c06:	d028      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0c:	d81f      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004c0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c10:	d025      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004c12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c14:	d81b      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004c16:	2b80      	cmp	r3, #128	@ 0x80
 8004c18:	d00f      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004c1a:	2b80      	cmp	r3, #128	@ 0x80
 8004c1c:	d817      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01f      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004c22:	2b40      	cmp	r3, #64	@ 0x40
 8004c24:	d113      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f004 fdf3 	bl	8009818 <RCCEx_PLL2_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004c38:	e014      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c3e:	3330      	adds	r3, #48	@ 0x30
 8004c40:	4618      	mov	r0, r3
 8004c42:	f004 fe81 	bl	8009948 <RCCEx_PLL3_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c56:	bf00      	nop
 8004c58:	e004      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10c      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c72:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c84:	e003      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f002 0308 	and.w	r3, r2, #8
 8004c9a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004ca4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	d056      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cb4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004cb8:	d031      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004cba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004cbe:	d82a      	bhi.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc4:	d02d      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004cc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cca:	d824      	bhi.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ccc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004cd0:	d029      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004cd2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004cd6:	d81e      	bhi.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cdc:	d011      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce2:	d818      	bhi.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d023      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cec:	d113      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f004 fd8f 	bl	8009818 <RCCEx_PLL2_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004d00:	e017      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d06:	3330      	adds	r3, #48	@ 0x30
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f004 fe1d 	bl	8009948 <RCCEx_PLL3_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004d14:	e00d      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d1c:	e009      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004d1e:	bf00      	nop
 8004d20:	e007      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004d22:	bf00      	nop
 8004d24:	e005      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004d26:	bf00      	nop
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004d2a:	bf00      	nop
 8004d2c:	44020c00 	.word	0x44020c00
        break;
 8004d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d3a:	4bbb      	ldr	r3, [pc, #748]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d40:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d4a:	4ab7      	ldr	r2, [pc, #732]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d52:	e003      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f002 0310 	and.w	r3, r2, #16
 8004d68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004d72:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	d053      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d86:	d031      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004d88:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d8c:	d82a      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d92:	d02d      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d98:	d824      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d9e:	d029      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004da0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004da4:	d81e      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004daa:	d011      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db0:	d818      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d020      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dba:	d113      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 fd28 	bl	8009818 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004dce:	e014      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dd4:	3330      	adds	r3, #48	@ 0x30
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f004 fdb6 	bl	8009948 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004de2:	e00a      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004dea:	e006      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004dec:	bf00      	nop
 8004dee:	e004      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004df0:	bf00      	nop
 8004df2:	e002      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004df4:	bf00      	nop
 8004df6:	e000      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004e02:	4b89      	ldr	r3, [pc, #548]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e12:	4a85      	ldr	r2, [pc, #532]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004e14:	430b      	orrs	r3, r1
 8004e16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e1a:	e003      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f002 0320 	and.w	r3, r2, #32
 8004e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004e3a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d053      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004e4e:	d031      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004e50:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004e54:	d82a      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e5a:	d02d      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e60:	d824      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e62:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004e66:	d029      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004e68:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004e6c:	d81e      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e72:	d011      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e78:	d818      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004e7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e82:	d113      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e88:	3308      	adds	r3, #8
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f004 fcc4 	bl	8009818 <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004e96:	e014      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e9c:	3330      	adds	r3, #48	@ 0x30
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f004 fd52 	bl	8009948 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004eb2:	e006      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004eb4:	bf00      	nop
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004eb8:	bf00      	nop
 8004eba:	e002      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004eca:	4b57      	ldr	r3, [pc, #348]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ed0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	4a53      	ldr	r2, [pc, #332]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ee8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004ef8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004f02:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d053      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f12:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f16:	d031      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004f18:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f1c:	d82a      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f22:	d02d      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f28:	d824      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004f2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f2e:	d029      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f34:	d81e      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004f36:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f3a:	d011      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004f3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f40:	d818      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d020      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f4a:	d113      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f50:	3308      	adds	r3, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 fc60 	bl	8009818 <RCCEx_PLL2_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004f5e:	e014      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f64:	3330      	adds	r3, #48	@ 0x30
 8004f66:	4618      	mov	r0, r3
 8004f68:	f004 fcee 	bl	8009948 <RCCEx_PLL3_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004f72:	e00a      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f7a:	e006      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f7c:	bf00      	nop
 8004f7e:	e004      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f80:	bf00      	nop
 8004f82:	e002      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004f92:	4b25      	ldr	r3, [pc, #148]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f98:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8004f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa2:	4a21      	ldr	r2, [pc, #132]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004faa:	e003      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fb0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004fc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004fca:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d055      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fda:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004fde:	d033      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004fe0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004fe4:	d82c      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004fe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fea:	d02f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004fec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ff0:	d826      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ff6:	d02b      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ffc:	d820      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005002:	d013      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005008:	d81a      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d022      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800500e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005012:	d115      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005018:	3308      	adds	r3, #8
 800501a:	4618      	mov	r0, r3
 800501c:	f004 fbfc 	bl	8009818 <RCCEx_PLL2_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005026:	e016      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005028:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800502c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005030:	3330      	adds	r3, #48	@ 0x30
 8005032:	4618      	mov	r0, r3
 8005034:	f004 fc88 	bl	8009948 <RCCEx_PLL3_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800503e:	e00a      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005046:	e006      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005048:	bf00      	nop
 800504a:	e004      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800504c:	bf00      	nop
 800504e:	e002      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005056:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10c      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800505e:	4bbb      	ldr	r3, [pc, #748]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005064:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800506c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800506e:	4ab7      	ldr	r2, [pc, #732]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005070:	430b      	orrs	r3, r1
 8005072:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005076:	e003      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800507c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800508c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005090:	2300      	movs	r3, #0
 8005092:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005096:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800509a:	460b      	mov	r3, r1
 800509c:	4313      	orrs	r3, r2
 800509e:	d053      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80050a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050aa:	d031      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80050ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050b0:	d82a      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80050b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050b6:	d02d      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80050b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050bc:	d824      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80050be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050c2:	d029      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80050c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050c8:	d81e      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80050ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ce:	d011      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80050d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050d4:	d818      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d020      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x754>
 80050da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050de:	d113      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050e4:	3308      	adds	r3, #8
 80050e6:	4618      	mov	r0, r3
 80050e8:	f004 fb96 	bl	8009818 <RCCEx_PLL2_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80050f2:	e014      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050f8:	3330      	adds	r3, #48	@ 0x30
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 fc24 	bl	8009948 <RCCEx_PLL3_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005106:	e00a      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800510e:	e006      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005110:	bf00      	nop
 8005112:	e004      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005114:	bf00      	nop
 8005116:	e002      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800511c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10c      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005126:	4b89      	ldr	r3, [pc, #548]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800512c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005136:	4a85      	ldr	r2, [pc, #532]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005138:	430b      	orrs	r3, r1
 800513a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800513e:	e003      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005144:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005154:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800515e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d055      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800516c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005170:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005174:	d031      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005176:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800517a:	d82a      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800517c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005180:	d02d      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005186:	d824      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005188:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800518c:	d029      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800518e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005192:	d81e      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005198:	d011      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800519a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800519e:	d818      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d020      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80051a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051a8:	d113      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ae:	3308      	adds	r3, #8
 80051b0:	4618      	mov	r0, r3
 80051b2:	f004 fb31 	bl	8009818 <RCCEx_PLL2_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80051bc:	e014      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051c2:	3330      	adds	r3, #48	@ 0x30
 80051c4:	4618      	mov	r0, r3
 80051c6:	f004 fbbf 	bl	8009948 <RCCEx_PLL3_Config>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80051d0:	e00a      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051d8:	e006      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80051da:	bf00      	nop
 80051dc:	e004      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80051de:	bf00      	nop
 80051e0:	e002      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80051e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80051f0:	4b56      	ldr	r3, [pc, #344]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80051f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051f6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80051fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005202:	4a52      	ldr	r2, [pc, #328]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005204:	430b      	orrs	r3, r1
 8005206:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800520a:	e003      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005210:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005220:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005224:	2300      	movs	r3, #0
 8005226:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800522a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800522e:	460b      	mov	r3, r1
 8005230:	4313      	orrs	r3, r2
 8005232:	d044      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005234:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800523c:	2b05      	cmp	r3, #5
 800523e:	d823      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005240:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	08005291 	.word	0x08005291
 800524c:	08005261 	.word	0x08005261
 8005250:	08005275 	.word	0x08005275
 8005254:	08005291 	.word	0x08005291
 8005258:	08005291 	.word	0x08005291
 800525c:	08005291 	.word	0x08005291
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005260:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005264:	3308      	adds	r3, #8
 8005266:	4618      	mov	r0, r3
 8005268:	f004 fad6 	bl	8009818 <RCCEx_PLL2_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005272:	e00e      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005274:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005278:	3330      	adds	r3, #48	@ 0x30
 800527a:	4618      	mov	r0, r3
 800527c:	f004 fb64 	bl	8009948 <RCCEx_PLL3_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005286:	e004      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005292:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10d      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800529a:	4b2c      	ldr	r3, [pc, #176]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800529c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052a0:	f023 0107 	bic.w	r1, r3, #7
 80052a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ac:	4a27      	ldr	r2, [pc, #156]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80052be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80052ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052ce:	2300      	movs	r3, #0
 80052d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052d4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80052d8:	460b      	mov	r3, r1
 80052da:	4313      	orrs	r3, r2
 80052dc:	d04f      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80052de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e6:	2b50      	cmp	r3, #80	@ 0x50
 80052e8:	d029      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80052ea:	2b50      	cmp	r3, #80	@ 0x50
 80052ec:	d823      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80052ee:	2b40      	cmp	r3, #64	@ 0x40
 80052f0:	d027      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80052f2:	2b40      	cmp	r3, #64	@ 0x40
 80052f4:	d81f      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80052f6:	2b30      	cmp	r3, #48	@ 0x30
 80052f8:	d025      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80052fa:	2b30      	cmp	r3, #48	@ 0x30
 80052fc:	d81b      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d00f      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005302:	2b20      	cmp	r3, #32
 8005304:	d817      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d022      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800530a:	2b10      	cmp	r3, #16
 800530c:	d113      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800530e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005312:	3308      	adds	r3, #8
 8005314:	4618      	mov	r0, r3
 8005316:	f004 fa7f 	bl	8009818 <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005320:	e017      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005326:	3330      	adds	r3, #48	@ 0x30
 8005328:	4618      	mov	r0, r3
 800532a:	f004 fb0d 	bl	8009948 <RCCEx_PLL3_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005334:	e00d      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800533c:	e009      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800533e:	bf00      	nop
 8005340:	e007      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005342:	bf00      	nop
 8005344:	e005      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005346:	bf00      	nop
 8005348:	e003      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800534a:	bf00      	nop
 800534c:	44020c00 	.word	0x44020c00
        break;
 8005350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005352:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10d      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800535a:	4baf      	ldr	r3, [pc, #700]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800535c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005360:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536c:	4aaa      	ldr	r2, [pc, #680]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800536e:	430b      	orrs	r3, r1
 8005370:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005376:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800537a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800537e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800538a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800538e:	2300      	movs	r3, #0
 8005390:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005394:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005398:	460b      	mov	r3, r1
 800539a:	4313      	orrs	r3, r2
 800539c:	d055      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800539e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80053aa:	d031      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80053ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80053b0:	d82a      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80053b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053b6:	d02d      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80053b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053bc:	d824      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80053be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053c2:	d029      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80053c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053c8:	d81e      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80053ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053ce:	d011      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80053d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d4:	d818      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d020      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80053da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053de:	d113      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053e4:	3308      	adds	r3, #8
 80053e6:	4618      	mov	r0, r3
 80053e8:	f004 fa16 	bl	8009818 <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80053f2:	e014      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053f8:	3330      	adds	r3, #48	@ 0x30
 80053fa:	4618      	mov	r0, r3
 80053fc:	f004 faa4 	bl	8009948 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005406:	e00a      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800540e:	e006      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005410:	bf00      	nop
 8005412:	e004      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800541c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005426:	4b7c      	ldr	r3, [pc, #496]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800542c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005438:	4a77      	ldr	r2, [pc, #476]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800543a:	430b      	orrs	r3, r1
 800543c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005440:	e003      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005446:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800544a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005456:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800545a:	2300      	movs	r3, #0
 800545c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005460:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005464:	460b      	mov	r3, r1
 8005466:	4313      	orrs	r3, r2
 8005468:	d03d      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800546a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005472:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005476:	d01b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005478:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800547c:	d814      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800547e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005482:	d017      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005488:	d80e      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d014      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800548e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005492:	d109      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005494:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005498:	3330      	adds	r3, #48	@ 0x30
 800549a:	4618      	mov	r0, r3
 800549c:	f004 fa54 	bl	8009948 <RCCEx_PLL3_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80054a6:	e008      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054ae:	e004      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80054b0:	bf00      	nop
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80054b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10d      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80054c2:	4b55      	ldr	r3, [pc, #340]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054c8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80054cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d4:	4a50      	ldr	r2, [pc, #320]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80054d6:	430b      	orrs	r3, r1
 80054d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80054f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054f6:	2300      	movs	r3, #0
 80054f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005500:	460b      	mov	r3, r1
 8005502:	4313      	orrs	r3, r2
 8005504:	d03d      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800550a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800550e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005512:	d01b      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005514:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005518:	d814      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800551a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800551e:	d017      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005520:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005524:	d80e      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d014      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800552a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800552e:	d109      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005530:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005534:	3330      	adds	r3, #48	@ 0x30
 8005536:	4618      	mov	r0, r3
 8005538:	f004 fa06 	bl	8009948 <RCCEx_PLL3_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800554a:	e004      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800554c:	bf00      	nop
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800555e:	4b2e      	ldr	r3, [pc, #184]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005560:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005564:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005568:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800556c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005570:	4a29      	ldr	r2, [pc, #164]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005572:	430b      	orrs	r3, r1
 8005574:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800557e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800558e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005598:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d040      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80055a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055ae:	d01b      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80055b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055b4:	d814      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80055b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055ba:	d017      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80055bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055c0:	d80e      	bhi.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d014      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80055c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ca:	d109      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055d0:	3330      	adds	r3, #48	@ 0x30
 80055d2:	4618      	mov	r0, r3
 80055d4:	f004 f9b8 	bl	8009948 <RCCEx_PLL3_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80055de:	e008      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055e6:	e004      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80055e8:	bf00      	nop
 80055ea:	e002      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80055f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d110      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80055fa:	4b07      	ldr	r3, [pc, #28]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005600:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800560c:	4a02      	ldr	r2, [pc, #8]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800560e:	430b      	orrs	r3, r1
 8005610:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005614:	e006      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005616:	bf00      	nop
 8005618:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005620:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	2100      	movs	r1, #0
 800562e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800563a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800563e:	460b      	mov	r3, r1
 8005640:	4313      	orrs	r3, r2
 8005642:	d03d      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005648:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800564c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005650:	d01b      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005652:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005656:	d814      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005658:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800565c:	d017      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800565e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005662:	d80e      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d014      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800566c:	d109      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800566e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005672:	3330      	adds	r3, #48	@ 0x30
 8005674:	4618      	mov	r0, r3
 8005676:	f004 f967 	bl	8009948 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005680:	e008      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005688:	e004      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005694:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10d      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800569c:	4bbe      	ldr	r3, [pc, #760]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800569e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056a2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80056a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ae:	4aba      	ldr	r2, [pc, #744]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80056b0:	430b      	orrs	r3, r1
 80056b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056b6:	e003      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80056c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80056cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80056da:	460b      	mov	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	d035      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80056e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056ec:	d015      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80056ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056f2:	d80e      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d012      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80056f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056fc:	d109      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005702:	3330      	adds	r3, #48	@ 0x30
 8005704:	4618      	mov	r0, r3
 8005706:	f004 f91f 	bl	8009948 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005728:	4b9b      	ldr	r3, [pc, #620]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800572a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800572e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800573a:	4a97      	ldr	r2, [pc, #604]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800573c:	430b      	orrs	r3, r1
 800573e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005742:	e003      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005748:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800574c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	2100      	movs	r1, #0
 8005756:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800575a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800575e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005762:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005766:	460b      	mov	r3, r1
 8005768:	4313      	orrs	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800576c:	4b8a      	ldr	r3, [pc, #552]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4a89      	ldr	r2, [pc, #548]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005772:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005776:	61d3      	str	r3, [r2, #28]
 8005778:	4b87      	ldr	r3, [pc, #540]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005780:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005784:	4a84      	ldr	r2, [pc, #528]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005786:	430b      	orrs	r3, r1
 8005788:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800578a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005796:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80057a0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80057a4:	460b      	mov	r3, r1
 80057a6:	4313      	orrs	r3, r2
 80057a8:	d055      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80057aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80057b6:	d031      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80057b8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80057bc:	d82a      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80057be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c2:	d02d      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80057c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c8:	d824      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80057ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ce:	d029      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057d4:	d81e      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80057d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057da:	d011      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e0:	d818      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d020      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80057e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ea:	d113      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057f0:	3308      	adds	r3, #8
 80057f2:	4618      	mov	r0, r3
 80057f4:	f004 f810 	bl	8009818 <RCCEx_PLL2_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80057fe:	e014      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005804:	3330      	adds	r3, #48	@ 0x30
 8005806:	4618      	mov	r0, r3
 8005808:	f004 f89e 	bl	8009948 <RCCEx_PLL3_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005812:	e00a      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800581a:	e006      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800581c:	bf00      	nop
 800581e:	e004      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005820:	bf00      	nop
 8005822:	e002      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005832:	4b59      	ldr	r3, [pc, #356]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005834:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005838:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800583c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005844:	4a54      	ldr	r2, [pc, #336]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005846:	430b      	orrs	r3, r1
 8005848:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005852:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005856:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005866:	2300      	movs	r3, #0
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800586c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d055      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800587a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800587e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005882:	d031      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005884:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005888:	d82a      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800588a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800588e:	d02d      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005894:	d824      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005896:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800589a:	d029      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800589c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058a0:	d81e      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80058a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058a6:	d011      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80058a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ac:	d818      	bhi.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d020      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b6:	d113      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058bc:	3308      	adds	r3, #8
 80058be:	4618      	mov	r0, r3
 80058c0:	f003 ffaa 	bl	8009818 <RCCEx_PLL2_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80058ca:	e014      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058d0:	3330      	adds	r3, #48	@ 0x30
 80058d2:	4618      	mov	r0, r3
 80058d4:	f004 f838 	bl	8009948 <RCCEx_PLL3_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80058de:	e00a      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058e6:	e006      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80058e8:	bf00      	nop
 80058ea:	e004      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80058f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10d      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80058fe:	4b26      	ldr	r3, [pc, #152]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005900:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005904:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005908:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800590c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005910:	4a21      	ldr	r2, [pc, #132]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005912:	430b      	orrs	r3, r1
 8005914:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005918:	e003      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800591e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005922:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	2100      	movs	r1, #0
 800592c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005938:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800593c:	460b      	mov	r3, r1
 800593e:	4313      	orrs	r3, r2
 8005940:	d057      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005942:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800594a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800594e:	d033      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005954:	d82c      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005956:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800595a:	d02f      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800595c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005960:	d826      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005962:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005966:	d02b      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005968:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800596c:	d820      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800596e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005972:	d013      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005978:	d81a      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d022      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800597e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005982:	d115      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005984:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005988:	3308      	adds	r3, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f003 ff44 	bl	8009818 <RCCEx_PLL2_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005996:	e016      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005998:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800599c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a0:	3330      	adds	r3, #48	@ 0x30
 80059a2:	4618      	mov	r0, r3
 80059a4:	f003 ffd0 	bl	8009948 <RCCEx_PLL3_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80059ae:	e00a      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059b6:	e006      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80059b8:	bf00      	nop
 80059ba:	e004      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80059bc:	bf00      	nop
 80059be:	e002      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80059c0:	bf00      	nop
 80059c2:	e000      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80059c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10d      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80059ce:	4bbb      	ldr	r3, [pc, #748]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80059d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80059d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059e0:	4ab6      	ldr	r2, [pc, #728]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80059e2:	430b      	orrs	r3, r1
 80059e4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80059e8:	e003      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80059f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	2100      	movs	r1, #0
 80059fc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	d055      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a1a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005a1e:	d031      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005a20:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005a24:	d82a      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005a26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a2a:	d02d      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a30:	d824      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005a32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a36:	d029      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005a38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a3c:	d81e      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005a3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a42:	d011      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005a44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a48:	d818      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d020      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a52:	d113      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a58:	3308      	adds	r3, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f003 fedc 	bl	8009818 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005a66:	e014      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a6c:	3330      	adds	r3, #48	@ 0x30
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f003 ff6a 	bl	8009948 <RCCEx_PLL3_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005a7a:	e00a      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a82:	e006      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005a84:	bf00      	nop
 8005a86:	e004      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005a88:	bf00      	nop
 8005a8a:	e002      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10d      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005a9a:	4b88      	ldr	r3, [pc, #544]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005a9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005aa0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005aac:	4a83      	ldr	r2, [pc, #524]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ab4:	e003      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005aba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005abe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ad4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4313      	orrs	r3, r2
 8005adc:	d055      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ae2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ae6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005aea:	d031      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005aec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005af0:	d82a      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005af2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005af6:	d02d      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005afc:	d824      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005afe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b02:	d029      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005b04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b08:	d81e      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005b0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b0e:	d011      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b14:	d818      	bhi.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005b1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b1e:	d113      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b24:	3308      	adds	r3, #8
 8005b26:	4618      	mov	r0, r3
 8005b28:	f003 fe76 	bl	8009818 <RCCEx_PLL2_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005b32:	e014      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b38:	3330      	adds	r3, #48	@ 0x30
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f003 ff04 	bl	8009948 <RCCEx_PLL3_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005b46:	e00a      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b4e:	e006      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005b50:	bf00      	nop
 8005b52:	e004      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005b54:	bf00      	nop
 8005b56:	e002      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005b58:	bf00      	nop
 8005b5a:	e000      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10d      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005b66:	4b55      	ldr	r3, [pc, #340]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b78:	4a50      	ldr	r2, [pc, #320]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005b80:	e003      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	2100      	movs	r1, #0
 8005b94:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ba0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	d055      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005baa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bb6:	d031      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bbc:	d82a      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc2:	d02d      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc8:	d824      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005bca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bce:	d029      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005bd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bd4:	d81e      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bda:	d011      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be0:	d818      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d020      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005be6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bea:	d113      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f003 fe10 	bl	8009818 <RCCEx_PLL2_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005bfe:	e014      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c04:	3330      	adds	r3, #48	@ 0x30
 8005c06:	4618      	mov	r0, r3
 8005c08:	f003 fe9e 	bl	8009948 <RCCEx_PLL3_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005c12:	e00a      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c1a:	e006      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005c1c:	bf00      	nop
 8005c1e:	e004      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005c20:	bf00      	nop
 8005c22:	e002      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005c24:	bf00      	nop
 8005c26:	e000      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10d      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005c32:	4b22      	ldr	r3, [pc, #136]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c38:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c44:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c4c:	e003      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c66:	2300      	movs	r3, #0
 8005c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c70:	460b      	mov	r3, r1
 8005c72:	4313      	orrs	r3, r2
 8005c74:	d055      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c82:	d035      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c88:	d82e      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005c8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c8e:	d031      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005c90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c94:	d828      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c9a:	d01b      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ca0:	d822      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005caa:	d009      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005cac:	e01c      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cae:	4b03      	ldr	r3, [pc, #12]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb2:	4a02      	ldr	r2, [pc, #8]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cba:	e01c      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005cbc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f003 fda6 	bl	8009818 <RCCEx_PLL2_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cd2:	e010      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cd8:	3330      	adds	r3, #48	@ 0x30
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f003 fe34 	bl	8009948 <RCCEx_PLL3_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ce6:	e006      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cee:	e002      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005cf0:	bf00      	nop
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10d      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005cfe:	4bc3      	ldr	r3, [pc, #780]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d10:	4abe      	ldr	r2, [pc, #760]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d18:	e003      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d38:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d051      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005d4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d4e:	d033      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005d50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d54:	d82c      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005d56:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005d5a:	d02d      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005d5c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005d60:	d826      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d66:	d019      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005d68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d6c:	d820      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005d72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d76:	d007      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005d78:	e01a      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d7a:	4ba4      	ldr	r3, [pc, #656]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	4aa3      	ldr	r2, [pc, #652]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d84:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005d86:	e018      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f003 fd42 	bl	8009818 <RCCEx_PLL2_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005d9a:	e00e      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005da0:	3330      	adds	r3, #48	@ 0x30
 8005da2:	4618      	mov	r0, r3
 8005da4:	f003 fdd0 	bl	8009948 <RCCEx_PLL3_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005dae:	e004      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005dc2:	4b92      	ldr	r3, [pc, #584]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dc8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005dd4:	4a8d      	ldr	r2, [pc, #564]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005ddc:	e003      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005de2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005df2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005df4:	2300      	movs	r3, #0
 8005df6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005df8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	d032      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d80f      	bhi.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d211      	bcs.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d911      	bls.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d109      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e1e:	3308      	adds	r3, #8
 8005e20:	4618      	mov	r0, r3
 8005e22:	f003 fcf9 	bl	8009818 <RCCEx_PLL2_Config>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e2c:	e006      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e34:	e002      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10d      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005e44:	4b71      	ldr	r3, [pc, #452]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e4a:	f023 0107 	bic.w	r1, r3, #7
 8005e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e56:	4a6d      	ldr	r2, [pc, #436]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e64:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	2100      	movs	r1, #0
 8005e72:	6739      	str	r1, [r7, #112]	@ 0x70
 8005e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e78:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e7a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4313      	orrs	r3, r2
 8005e82:	d024      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d005      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e9a:	e002      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10d      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005eaa:	4b58      	ldr	r3, [pc, #352]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eb0:	f023 0108 	bic.w	r1, r3, #8
 8005eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ebc:	4a53      	ldr	r2, [pc, #332]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005eca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005eda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005edc:	2300      	movs	r3, #0
 8005ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ee0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f000 80b9 	beq.w	800605e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005eec:	4b48      	ldr	r3, [pc, #288]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef0:	4a47      	ldr	r2, [pc, #284]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ef8:	f7fb fcdc 	bl	80018b4 <HAL_GetTick>
 8005efc:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005f00:	e00b      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f02:	f7fb fcd7 	bl	80018b4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d903      	bls.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f18:	e005      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0ed      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005f26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 8093 	bne.w	8006056 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f30:	4b36      	ldr	r3, [pc, #216]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005f3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d023      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f4a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8005f4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01b      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f56:	4b2d      	ldr	r3, [pc, #180]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f60:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f64:	4b29      	ldr	r3, [pc, #164]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f6a:	4a28      	ldr	r2, [pc, #160]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f74:	4b25      	ldr	r3, [pc, #148]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f7a:	4a24      	ldr	r2, [pc, #144]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f84:	4a21      	ldr	r2, [pc, #132]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f86:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d019      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fb fc8b 	bl	80018b4 <HAL_GetTick>
 8005f9e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fa2:	e00d      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa4:	f7fb fc86 	bl	80018b4 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d903      	bls.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8005fbe:	e006      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc0:	4b12      	ldr	r3, [pc, #72]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ea      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005fce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d13a      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fda:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe6:	d115      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8005fe8:	4b08      	ldr	r3, [pc, #32]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ff4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ffe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006002:	4a02      	ldr	r2, [pc, #8]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006004:	430b      	orrs	r3, r1
 8006006:	61d3      	str	r3, [r2, #28]
 8006008:	e00a      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800600a:	bf00      	nop
 800600c:	44020c00 	.word	0x44020c00
 8006010:	44020800 	.word	0x44020800
 8006014:	4b9f      	ldr	r3, [pc, #636]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	4a9e      	ldr	r2, [pc, #632]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800601a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800601e:	61d3      	str	r3, [r2, #28]
 8006020:	4b9c      	ldr	r3, [pc, #624]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006026:	4a9b      	ldr	r2, [pc, #620]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800602c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006030:	4b98      	ldr	r3, [pc, #608]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006032:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800603a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800603e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006042:	4a94      	ldr	r2, [pc, #592]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006044:	430b      	orrs	r3, r1
 8006046:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800604a:	e008      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800604c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006050:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006054:	e003      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800605a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800605e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800606a:	663b      	str	r3, [r7, #96]	@ 0x60
 800606c:	2300      	movs	r3, #0
 800606e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006070:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d035      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800607a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800607e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006082:	2b30      	cmp	r3, #48	@ 0x30
 8006084:	d014      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006086:	2b30      	cmp	r3, #48	@ 0x30
 8006088:	d80e      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800608a:	2b20      	cmp	r3, #32
 800608c:	d012      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800608e:	2b20      	cmp	r3, #32
 8006090:	d80a      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d010      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006096:	2b10      	cmp	r3, #16
 8006098:	d106      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800609a:	4b7e      	ldr	r3, [pc, #504]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800609c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609e:	4a7d      	ldr	r2, [pc, #500]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80060a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80060a6:	e008      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060ae:	e004      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80060b0:	bf00      	nop
 80060b2:	e002      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80060b4:	bf00      	nop
 80060b6:	e000      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80060b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80060c2:	4b74      	ldr	r3, [pc, #464]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80060c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80060d4:	4a6f      	ldr	r2, [pc, #444]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80060d6:	430b      	orrs	r3, r1
 80060d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80060dc:	e003      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80060f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060f4:	2300      	movs	r3, #0
 80060f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80060fc:	460b      	mov	r3, r1
 80060fe:	4313      	orrs	r3, r2
 8006100:	d033      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006102:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006106:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	d007      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006112:	e010      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006114:	4b5f      	ldr	r3, [pc, #380]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	4a5e      	ldr	r2, [pc, #376]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800611a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006120:	e00d      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006126:	3308      	adds	r3, #8
 8006128:	4618      	mov	r0, r3
 800612a:	f003 fb75 	bl	8009818 <RCCEx_PLL2_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006134:	e003      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800613c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006146:	4b53      	ldr	r3, [pc, #332]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800614c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006150:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006154:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006158:	4a4e      	ldr	r2, [pc, #312]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800615a:	430b      	orrs	r3, r1
 800615c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006160:	e003      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006166:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800616a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006176:	653b      	str	r3, [r7, #80]	@ 0x50
 8006178:	2300      	movs	r3, #0
 800617a:	657b      	str	r3, [r7, #84]	@ 0x54
 800617c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d033      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006186:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800618a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006192:	2b80      	cmp	r3, #128	@ 0x80
 8006194:	d007      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006196:	e010      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b3e      	ldr	r3, [pc, #248]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800619a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619c:	4a3d      	ldr	r2, [pc, #244]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80061a4:	e00d      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061aa:	3308      	adds	r3, #8
 80061ac:	4618      	mov	r0, r3
 80061ae:	f003 fb33 	bl	8009818 <RCCEx_PLL2_Config>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10d      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80061ca:	4b32      	ldr	r3, [pc, #200]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061d0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80061d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80061dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061de:	430b      	orrs	r3, r1
 80061e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061e4:	e003      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80061ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80061fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061fc:	2300      	movs	r3, #0
 80061fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006200:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006204:	460b      	mov	r3, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	d04a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800620a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800620e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006212:	2b04      	cmp	r3, #4
 8006214:	d827      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006216:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	08006231 	.word	0x08006231
 8006220:	0800623f 	.word	0x0800623f
 8006224:	08006253 	.word	0x08006253
 8006228:	0800626f 	.word	0x0800626f
 800622c:	0800626f 	.word	0x0800626f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4b18      	ldr	r3, [pc, #96]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006234:	4a17      	ldr	r2, [pc, #92]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800623c:	e018      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800623e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006242:	3308      	adds	r3, #8
 8006244:	4618      	mov	r0, r3
 8006246:	f003 fae7 	bl	8009818 <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006250:	e00e      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006252:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006256:	3330      	adds	r3, #48	@ 0x30
 8006258:	4618      	mov	r0, r3
 800625a:	f003 fb75 	bl	8009948 <RCCEx_PLL3_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006264:	e004      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800626e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006270:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10f      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006278:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800627a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800627e:	f023 0107 	bic.w	r1, r3, #7
 8006282:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800628a:	4a02      	ldr	r2, [pc, #8]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800628c:	430b      	orrs	r3, r1
 800628e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006292:	e005      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006294:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800629c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80062a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80062ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80062ae:	2300      	movs	r3, #0
 80062b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f000 8081 	beq.w	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80062be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d85f      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80062ca:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	08006355 	.word	0x08006355
 80062d4:	0800638b 	.word	0x0800638b
 80062d8:	0800638b 	.word	0x0800638b
 80062dc:	0800638b 	.word	0x0800638b
 80062e0:	0800638b 	.word	0x0800638b
 80062e4:	0800638b 	.word	0x0800638b
 80062e8:	0800638b 	.word	0x0800638b
 80062ec:	0800638b 	.word	0x0800638b
 80062f0:	08006363 	.word	0x08006363
 80062f4:	0800638b 	.word	0x0800638b
 80062f8:	0800638b 	.word	0x0800638b
 80062fc:	0800638b 	.word	0x0800638b
 8006300:	0800638b 	.word	0x0800638b
 8006304:	0800638b 	.word	0x0800638b
 8006308:	0800638b 	.word	0x0800638b
 800630c:	0800638b 	.word	0x0800638b
 8006310:	08006377 	.word	0x08006377
 8006314:	0800638b 	.word	0x0800638b
 8006318:	0800638b 	.word	0x0800638b
 800631c:	0800638b 	.word	0x0800638b
 8006320:	0800638b 	.word	0x0800638b
 8006324:	0800638b 	.word	0x0800638b
 8006328:	0800638b 	.word	0x0800638b
 800632c:	0800638b 	.word	0x0800638b
 8006330:	08006393 	.word	0x08006393
 8006334:	0800638b 	.word	0x0800638b
 8006338:	0800638b 	.word	0x0800638b
 800633c:	0800638b 	.word	0x0800638b
 8006340:	0800638b 	.word	0x0800638b
 8006344:	0800638b 	.word	0x0800638b
 8006348:	0800638b 	.word	0x0800638b
 800634c:	0800638b 	.word	0x0800638b
 8006350:	08006393 	.word	0x08006393
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006354:	4bab      	ldr	r3, [pc, #684]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006358:	4aaa      	ldr	r2, [pc, #680]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800635a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800635e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006360:	e018      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006362:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006366:	3308      	adds	r3, #8
 8006368:	4618      	mov	r0, r3
 800636a:	f003 fa55 	bl	8009818 <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006374:	e00e      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006376:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800637a:	3330      	adds	r3, #48	@ 0x30
 800637c:	4618      	mov	r0, r3
 800637e:	f003 fae3 	bl	8009948 <RCCEx_PLL3_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006388:	e004      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006390:	e000      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006394:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10d      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800639c:	4b99      	ldr	r3, [pc, #612]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800639e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063ae:	4a95      	ldr	r2, [pc, #596]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80063b6:	e003      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80063c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80063cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063ce:	2300      	movs	r3, #0
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80063d6:	460b      	mov	r3, r1
 80063d8:	4313      	orrs	r3, r2
 80063da:	d04e      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80063dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e8:	d02e      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ee:	d827      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80063f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80063f2:	d02b      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80063f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80063f6:	d823      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80063f8:	2b80      	cmp	r3, #128	@ 0x80
 80063fa:	d017      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80063fc:	2b80      	cmp	r3, #128	@ 0x80
 80063fe:	d81f      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006404:	2b40      	cmp	r3, #64	@ 0x40
 8006406:	d007      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006408:	e01a      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640a:	4b7e      	ldr	r3, [pc, #504]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	4a7d      	ldr	r2, [pc, #500]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006414:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006416:	e01a      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800641c:	3308      	adds	r3, #8
 800641e:	4618      	mov	r0, r3
 8006420:	f003 f9fa 	bl	8009818 <RCCEx_PLL2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800642a:	e010      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800642c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006430:	3330      	adds	r3, #48	@ 0x30
 8006432:	4618      	mov	r0, r3
 8006434:	f003 fa88 	bl	8009948 <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800643e:	e006      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006446:	e002      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800644c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006456:	4b6b      	ldr	r3, [pc, #428]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800645c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006468:	4a66      	ldr	r2, [pc, #408]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800646a:	430b      	orrs	r3, r1
 800646c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006470:	e003      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006476:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800647a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006486:	633b      	str	r3, [r7, #48]	@ 0x30
 8006488:	2300      	movs	r3, #0
 800648a:	637b      	str	r3, [r7, #52]	@ 0x34
 800648c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006490:	460b      	mov	r3, r1
 8006492:	4313      	orrs	r3, r2
 8006494:	d055      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800649a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800649e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80064a2:	d031      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80064a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80064a8:	d82a      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80064aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ae:	d02d      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80064b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064b4:	d824      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80064b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80064ba:	d029      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80064bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80064c0:	d81e      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80064c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c6:	d011      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064cc:	d818      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d020      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d6:	d113      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064dc:	3308      	adds	r3, #8
 80064de:	4618      	mov	r0, r3
 80064e0:	f003 f99a 	bl	8009818 <RCCEx_PLL2_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80064ea:	e014      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f0:	3330      	adds	r3, #48	@ 0x30
 80064f2:	4618      	mov	r0, r3
 80064f4:	f003 fa28 	bl	8009948 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80064fe:	e00a      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006506:	e006      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006508:	bf00      	nop
 800650a:	e004      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800650c:	bf00      	nop
 800650e:	e002      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006510:	bf00      	nop
 8006512:	e000      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006516:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10d      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800651e:	4b39      	ldr	r3, [pc, #228]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006524:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800652c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006530:	4a34      	ldr	r2, [pc, #208]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006532:	430b      	orrs	r3, r1
 8006534:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006538:	e003      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800653e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006542:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800654e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006550:	2300      	movs	r3, #0
 8006552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006554:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006558:	460b      	mov	r3, r1
 800655a:	4313      	orrs	r3, r2
 800655c:	d058      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800655e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006566:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800656a:	d031      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800656c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006570:	d82a      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006572:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006576:	d02d      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800657c:	d824      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800657e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006582:	d029      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006584:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006588:	d81e      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800658e:	d011      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006594:	d818      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d020      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800659a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800659e:	d113      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a4:	3308      	adds	r3, #8
 80065a6:	4618      	mov	r0, r3
 80065a8:	f003 f936 	bl	8009818 <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80065b2:	e014      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b8:	3330      	adds	r3, #48	@ 0x30
 80065ba:	4618      	mov	r0, r3
 80065bc:	f003 f9c4 	bl	8009948 <RCCEx_PLL3_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80065c6:	e00a      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065ce:	e006      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80065d0:	bf00      	nop
 80065d2:	e004      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80065dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d110      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80065e6:	4b07      	ldr	r3, [pc, #28]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80065f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065f8:	4902      	ldr	r1, [pc, #8]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006600:	e006      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006602:	bf00      	nop
 8006604:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006608:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800660c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	2100      	movs	r1, #0
 800661a:	6239      	str	r1, [r7, #32]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
 8006622:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006626:	460b      	mov	r3, r1
 8006628:	4313      	orrs	r3, r2
 800662a:	d055      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800662c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006634:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006638:	d031      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800663a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800663e:	d82a      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006644:	d02d      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800664a:	d824      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800664c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006650:	d029      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006652:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006656:	d81e      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800665c:	d011      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800665e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006662:	d818      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d020      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800666c:	d113      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800666e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006672:	3308      	adds	r3, #8
 8006674:	4618      	mov	r0, r3
 8006676:	f003 f8cf 	bl	8009818 <RCCEx_PLL2_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006680:	e014      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006682:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006686:	3330      	adds	r3, #48	@ 0x30
 8006688:	4618      	mov	r0, r3
 800668a:	f003 f95d 	bl	8009948 <RCCEx_PLL3_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006694:	e00a      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800669c:	e006      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800669e:	bf00      	nop
 80066a0:	e004      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80066aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10d      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80066b4:	4b88      	ldr	r3, [pc, #544]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80066b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ba:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80066be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066c6:	4984      	ldr	r1, [pc, #528]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80066d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	2100      	movs	r1, #0
 80066e2:	61b9      	str	r1, [r7, #24]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80066ee:	460b      	mov	r3, r1
 80066f0:	4313      	orrs	r3, r2
 80066f2:	d03d      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80066f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d81c      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006700:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	08006743 	.word	0x08006743
 800670c:	08006719 	.word	0x08006719
 8006710:	08006727 	.word	0x08006727
 8006714:	08006743 	.word	0x08006743
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006718:	4b6f      	ldr	r3, [pc, #444]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	4a6e      	ldr	r2, [pc, #440]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800671e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006722:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006724:	e00e      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006726:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800672a:	3308      	adds	r3, #8
 800672c:	4618      	mov	r0, r3
 800672e:	f003 f873 	bl	8009818 <RCCEx_PLL2_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006738:	e004      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006744:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800674c:	4b62      	ldr	r3, [pc, #392]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800674e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006752:	f023 0203 	bic.w	r2, r3, #3
 8006756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800675a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800675e:	495e      	ldr	r1, [pc, #376]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006766:	e003      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800676c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006770:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	2100      	movs	r1, #0
 800677a:	6139      	str	r1, [r7, #16]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006786:	460b      	mov	r3, r1
 8006788:	4313      	orrs	r3, r2
 800678a:	d03a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800678c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006790:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006798:	d00e      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800679a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679e:	d815      	bhi.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d017      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80067a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a8:	d110      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067aa:	4b4b      	ldr	r3, [pc, #300]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80067ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ae:	4a4a      	ldr	r2, [pc, #296]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80067b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80067b6:	e00e      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067bc:	3308      	adds	r3, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f003 f82a 	bl	8009818 <RCCEx_PLL2_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80067ca:	e004      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10d      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80067de:	4b3e      	ldr	r3, [pc, #248]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80067e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80067f0:	4939      	ldr	r1, [pc, #228]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80067f8:	e003      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	2100      	movs	r1, #0
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d038      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800681e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006822:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006826:	2b30      	cmp	r3, #48	@ 0x30
 8006828:	d01b      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800682a:	2b30      	cmp	r3, #48	@ 0x30
 800682c:	d815      	bhi.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800682e:	2b10      	cmp	r3, #16
 8006830:	d002      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006832:	2b20      	cmp	r3, #32
 8006834:	d007      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006836:	e010      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006838:	4b27      	ldr	r3, [pc, #156]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	4a26      	ldr	r2, [pc, #152]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800683e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006842:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006844:	e00e      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800684a:	3330      	adds	r3, #48	@ 0x30
 800684c:	4618      	mov	r0, r3
 800684e:	f003 f87b 	bl	8009948 <RCCEx_PLL3_Config>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006858:	e004      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006860:	e000      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006864:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10d      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800686c:	4b1a      	ldr	r3, [pc, #104]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800686e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006872:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800687a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800687e:	4916      	ldr	r1, [pc, #88]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006886:	e003      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800688c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	2100      	movs	r1, #0
 800689a:	6039      	str	r1, [r7, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068a6:	460b      	mov	r3, r1
 80068a8:	4313      	orrs	r3, r2
 80068aa:	d00c      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80068be:	4906      	ldr	r1, [pc, #24]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80068c6:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80068d0:	46bd      	mov	sp, r7
 80068d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068d6:	bf00      	nop
 80068d8:	44020c00 	.word	0x44020c00

080068dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80068dc:	b480      	push	{r7}
 80068de:	b08b      	sub	sp, #44	@ 0x2c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80068e4:	4bae      	ldr	r3, [pc, #696]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80068e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ec:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80068ee:	4bac      	ldr	r3, [pc, #688]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80068f8:	4ba9      	ldr	r3, [pc, #676]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80068fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006902:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006904:	4ba6      	ldr	r3, [pc, #664]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006910:	4ba3      	ldr	r3, [pc, #652]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006928:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8126 	beq.w	8006b80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b03      	cmp	r3, #3
 8006938:	d053      	beq.n	80069e2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d86f      	bhi.n	8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d003      	beq.n	800694e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d02b      	beq.n	80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800694c:	e068      	b.n	8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800694e:	4b94      	ldr	r3, [pc, #592]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	08db      	lsrs	r3, r3, #3
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	4a92      	ldr	r2, [pc, #584]	@ (8006ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800695a:	fa22 f303 	lsr.w	r3, r2, r3
 800695e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	ee07 3a90 	vmov	s15, r3
 800697e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006982:	ed97 6a04 	vldr	s12, [r7, #16]
 8006986:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800698a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800698e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80069a2:	e068      	b.n	8006a76 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006bac <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80069b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80069c4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80069c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80069e0:	e049      	b.n	8006a76 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	ee07 3a90 	vmov	s15, r3
 80069e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80069f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a02:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006a1e:	e02a      	b.n	8006a76 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a20:	4b5f      	ldr	r3, [pc, #380]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	08db      	lsrs	r3, r3, #3
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a30:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a54:	ed97 6a04 	vldr	s12, [r7, #16]
 8006a58:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006a74:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a76:	4b4a      	ldr	r3, [pc, #296]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a82:	d121      	bne.n	8006ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006a84:	4b46      	ldr	r3, [pc, #280]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d017      	beq.n	8006ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a90:	4b43      	ldr	r3, [pc, #268]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a94:	0a5b      	lsrs	r3, r3, #9
 8006a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006aaa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e006      	b.n	8006ace <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e002      	b.n	8006ace <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ace:	4b34      	ldr	r3, [pc, #208]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ada:	d121      	bne.n	8006b20 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006adc:	4b30      	ldr	r3, [pc, #192]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d017      	beq.n	8006b18 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006afe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006b02:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b0e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	e006      	b.n	8006b26 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	605a      	str	r2, [r3, #4]
 8006b1e:	e002      	b.n	8006b26 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b26:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b32:	d121      	bne.n	8006b78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006b34:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b40:	4b17      	ldr	r3, [pc, #92]	@ (8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b44:	0e1b      	lsrs	r3, r3, #24
 8006b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b56:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006b5a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b66:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b6e:	e010      	b.n	8006b92 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	609a      	str	r2, [r3, #8]
}
 8006b76:	e00c      	b.n	8006b92 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	609a      	str	r2, [r3, #8]
}
 8006b7e:	e008      	b.n	8006b92 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
}
 8006b92:	bf00      	nop
 8006b94:	372c      	adds	r7, #44	@ 0x2c
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	44020c00 	.word	0x44020c00
 8006ba4:	03d09000 	.word	0x03d09000
 8006ba8:	46000000 	.word	0x46000000
 8006bac:	4a742400 	.word	0x4a742400
 8006bb0:	4af42400 	.word	0x4af42400

08006bb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b08b      	sub	sp, #44	@ 0x2c
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006bbc:	4bae      	ldr	r3, [pc, #696]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006bc6:	4bac      	ldr	r3, [pc, #688]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006bd0:	4ba9      	ldr	r3, [pc, #676]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bda:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006bdc:	4ba6      	ldr	r3, [pc, #664]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006be8:	4ba3      	ldr	r3, [pc, #652]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bec:	08db      	lsrs	r3, r3, #3
 8006bee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	fb02 f303 	mul.w	r3, r2, r3
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c00:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8126 	beq.w	8006e58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d053      	beq.n	8006cba <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d86f      	bhi.n	8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d02b      	beq.n	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006c24:	e068      	b.n	8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c26:	4b94      	ldr	r3, [pc, #592]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	08db      	lsrs	r3, r3, #3
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	4a92      	ldr	r2, [pc, #584]	@ (8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006c32:	fa22 f303 	lsr.w	r3, r2, r3
 8006c36:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c5e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006c7a:	e068      	b.n	8006d4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c98:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c9c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006cb8:	e049      	b.n	8006d4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a04 	vldr	s12, [r7, #16]
 8006cda:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006cf6:	e02a      	b.n	8006d4e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	08db      	lsrs	r3, r3, #3
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	4a5e      	ldr	r2, [pc, #376]	@ (8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d04:	fa22 f303 	lsr.w	r3, r2, r3
 8006d08:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	ee07 3a90 	vmov	s15, r3
 8006d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d30:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006d4c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d5a:	d121      	bne.n	8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006d5c:	4b46      	ldr	r3, [pc, #280]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d017      	beq.n	8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d68:	4b43      	ldr	r3, [pc, #268]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6c:	0a5b      	lsrs	r3, r3, #9
 8006d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006d7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006d82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e006      	b.n	8006da6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e002      	b.n	8006da6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da6:	4b34      	ldr	r3, [pc, #208]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db2:	d121      	bne.n	8006df8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006db4:	4b30      	ldr	r3, [pc, #192]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d017      	beq.n	8006df0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006dda:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	605a      	str	r2, [r3, #4]
 8006dee:	e006      	b.n	8006dfe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	e002      	b.n	8006dfe <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e0a:	d121      	bne.n	8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d017      	beq.n	8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e18:	4b17      	ldr	r3, [pc, #92]	@ (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1c:	0e1b      	lsrs	r3, r3, #24
 8006e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006e32:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e3e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e46:	e010      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	609a      	str	r2, [r3, #8]
}
 8006e4e:	e00c      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	609a      	str	r2, [r3, #8]
}
 8006e56:	e008      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]
}
 8006e6a:	bf00      	nop
 8006e6c:	372c      	adds	r7, #44	@ 0x2c
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	44020c00 	.word	0x44020c00
 8006e7c:	03d09000 	.word	0x03d09000
 8006e80:	46000000 	.word	0x46000000
 8006e84:	4a742400 	.word	0x4a742400
 8006e88:	4af42400 	.word	0x4af42400

08006e8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b08b      	sub	sp, #44	@ 0x2c
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006e94:	4bae      	ldr	r3, [pc, #696]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006e9e:	4bac      	ldr	r3, [pc, #688]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006ea8:	4ba9      	ldr	r3, [pc, #676]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006eb2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006eb4:	4ba6      	ldr	r3, [pc, #664]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb8:	091b      	lsrs	r3, r3, #4
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006ec0:	4ba3      	ldr	r3, [pc, #652]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ec4:	08db      	lsrs	r3, r3, #3
 8006ec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 8126 	beq.w	8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d053      	beq.n	8006f92 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d86f      	bhi.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d003      	beq.n	8006efe <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d02b      	beq.n	8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006efc:	e068      	b.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006efe:	4b94      	ldr	r3, [pc, #592]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	08db      	lsrs	r3, r3, #3
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	4a92      	ldr	r2, [pc, #584]	@ (8007154 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f32:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f36:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006f52:	e068      	b.n	8007026 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800715c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8006f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f70:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f74:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006f90:	e049      	b.n	8007026 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007160 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8006fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a04 	vldr	s12, [r7, #16]
 8006fb2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006fce:	e02a      	b.n	8007026 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	08db      	lsrs	r3, r3, #3
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	4a5e      	ldr	r2, [pc, #376]	@ (8007154 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007004:	ed97 6a04 	vldr	s12, [r7, #16]
 8007008:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007158 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800700c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007014:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007020:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007024:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007026:	4b4a      	ldr	r3, [pc, #296]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800702e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007032:	d121      	bne.n	8007078 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007034:	4b46      	ldr	r3, [pc, #280]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d017      	beq.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007040:	4b43      	ldr	r3, [pc, #268]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007044:	0a5b      	lsrs	r3, r3, #9
 8007046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007056:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800705a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800705e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	e006      	b.n	800707e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e002      	b.n	800707e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800707e:	4b34      	ldr	r3, [pc, #208]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007086:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800708a:	d121      	bne.n	80070d0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800708c:	4b30      	ldr	r3, [pc, #192]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800708e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d017      	beq.n	80070c8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007098:	4b2d      	ldr	r3, [pc, #180]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800709a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80070b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	e006      	b.n	80070d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	605a      	str	r2, [r3, #4]
 80070ce:	e002      	b.n	80070d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070e2:	d121      	bne.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80070e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d017      	beq.n	8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070f0:	4b17      	ldr	r3, [pc, #92]	@ (8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f4:	0e1b      	lsrs	r3, r3, #24
 80070f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007106:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800710a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800710e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007116:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800711e:	e010      	b.n	8007142 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	609a      	str	r2, [r3, #8]
}
 8007126:	e00c      	b.n	8007142 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	609a      	str	r2, [r3, #8]
}
 800712e:	e008      	b.n	8007142 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	609a      	str	r2, [r3, #8]
}
 8007142:	bf00      	nop
 8007144:	372c      	adds	r7, #44	@ 0x2c
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	44020c00 	.word	0x44020c00
 8007154:	03d09000 	.word	0x03d09000
 8007158:	46000000 	.word	0x46000000
 800715c:	4a742400 	.word	0x4a742400
 8007160:	4af42400 	.word	0x4af42400

08007164 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b08f      	sub	sp, #60	@ 0x3c
 8007168:	af00      	add	r7, sp, #0
 800716a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800716e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007172:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007176:	4321      	orrs	r1, r4
 8007178:	d150      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800717a:	4b26      	ldr	r3, [pc, #152]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800717c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007184:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007186:	4b23      	ldr	r3, [pc, #140]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b02      	cmp	r3, #2
 8007192:	d108      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800719a:	d104      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800719c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a2:	f002 bb2a 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80071a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071b4:	d108      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071bc:	d104      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80071be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c4:	f002 bb19 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80071c8:	4b12      	ldr	r3, [pc, #72]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071d4:	d119      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071dc:	d115      	bne.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80071de:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80071e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ea:	d30a      	bcc.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80071ec:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	0a1b      	lsrs	r3, r3, #8
 80071f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071f6:	4a08      	ldr	r2, [pc, #32]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80071fe:	f002 bafc 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007206:	f002 baf8 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	637b      	str	r3, [r7, #52]	@ 0x34
 800720e:	f002 baf4 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007212:	bf00      	nop
 8007214:	44020c00 	.word	0x44020c00
 8007218:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800721c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007220:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007224:	ea50 0104 	orrs.w	r1, r0, r4
 8007228:	f001 8275 	beq.w	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800722c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007230:	2801      	cmp	r0, #1
 8007232:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007236:	f082 82dd 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800723a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800723e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007242:	ea50 0104 	orrs.w	r1, r0, r4
 8007246:	f001 816c 	beq.w	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800724a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800724e:	2801      	cmp	r0, #1
 8007250:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007254:	f082 82ce 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800725c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007260:	ea50 0104 	orrs.w	r1, r0, r4
 8007264:	f001 8602 	beq.w	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800726c:	2801      	cmp	r0, #1
 800726e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007272:	f082 82bf 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800727a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800727e:	ea50 0104 	orrs.w	r1, r0, r4
 8007282:	f001 854c 	beq.w	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800728a:	2801      	cmp	r0, #1
 800728c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007290:	f082 82b0 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007298:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800729c:	ea50 0104 	orrs.w	r1, r0, r4
 80072a0:	f001 849e 	beq.w	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80072a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072a8:	2801      	cmp	r0, #1
 80072aa:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80072ae:	f082 82a1 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b6:	f1a1 0420 	sub.w	r4, r1, #32
 80072ba:	ea50 0104 	orrs.w	r1, r0, r4
 80072be:	f001 83e8 	beq.w	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80072c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072c6:	2801      	cmp	r0, #1
 80072c8:	f171 0120 	sbcs.w	r1, r1, #32
 80072cc:	f082 8292 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072d4:	f1a1 0410 	sub.w	r4, r1, #16
 80072d8:	ea50 0104 	orrs.w	r1, r0, r4
 80072dc:	f002 8256 	beq.w	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80072e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072e4:	2801      	cmp	r0, #1
 80072e6:	f171 0110 	sbcs.w	r1, r1, #16
 80072ea:	f082 8283 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80072ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072f2:	f1a1 0408 	sub.w	r4, r1, #8
 80072f6:	ea50 0104 	orrs.w	r1, r0, r4
 80072fa:	f002 81cc 	beq.w	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80072fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007302:	2801      	cmp	r0, #1
 8007304:	f171 0108 	sbcs.w	r1, r1, #8
 8007308:	f082 8274 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800730c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007310:	1f0c      	subs	r4, r1, #4
 8007312:	ea50 0104 	orrs.w	r1, r0, r4
 8007316:	f001 8648 	beq.w	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800731a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800731e:	2801      	cmp	r0, #1
 8007320:	f171 0104 	sbcs.w	r1, r1, #4
 8007324:	f082 8266 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800732c:	1e8c      	subs	r4, r1, #2
 800732e:	ea50 0104 	orrs.w	r1, r0, r4
 8007332:	f002 8143 	beq.w	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800733a:	2801      	cmp	r0, #1
 800733c:	f171 0102 	sbcs.w	r1, r1, #2
 8007340:	f082 8258 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007348:	1e4c      	subs	r4, r1, #1
 800734a:	ea50 0104 	orrs.w	r1, r0, r4
 800734e:	f002 80ce 	beq.w	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007356:	2801      	cmp	r0, #1
 8007358:	f171 0101 	sbcs.w	r1, r1, #1
 800735c:	f082 824a 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007364:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007368:	4321      	orrs	r1, r4
 800736a:	f002 8059 	beq.w	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800736e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007372:	4cd9      	ldr	r4, [pc, #868]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007374:	42a0      	cmp	r0, r4
 8007376:	f171 0100 	sbcs.w	r1, r1, #0
 800737a:	f082 823b 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800737e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007382:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007386:	4321      	orrs	r1, r4
 8007388:	f001 87d9 	beq.w	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800738c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007390:	4cd2      	ldr	r4, [pc, #840]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007392:	42a0      	cmp	r0, r4
 8007394:	f171 0100 	sbcs.w	r1, r1, #0
 8007398:	f082 822c 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800739c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80073a4:	4321      	orrs	r1, r4
 80073a6:	f001 8751 	beq.w	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80073aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ae:	4ccc      	ldr	r4, [pc, #816]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80073b0:	42a0      	cmp	r0, r4
 80073b2:	f171 0100 	sbcs.w	r1, r1, #0
 80073b6:	f082 821d 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073be:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80073c2:	4321      	orrs	r1, r4
 80073c4:	f001 869a 	beq.w	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80073c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073cc:	4cc5      	ldr	r4, [pc, #788]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80073ce:	42a0      	cmp	r0, r4
 80073d0:	f171 0100 	sbcs.w	r1, r1, #0
 80073d4:	f082 820e 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073dc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80073e0:	4321      	orrs	r1, r4
 80073e2:	f001 8612 	beq.w	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80073e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ea:	4cbf      	ldr	r4, [pc, #764]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80073ec:	42a0      	cmp	r0, r4
 80073ee:	f171 0100 	sbcs.w	r1, r1, #0
 80073f2:	f082 81ff 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073fa:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80073fe:	4321      	orrs	r1, r4
 8007400:	f002 817e 	beq.w	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007408:	4cb8      	ldr	r4, [pc, #736]	@ (80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800740a:	42a0      	cmp	r0, r4
 800740c:	f171 0100 	sbcs.w	r1, r1, #0
 8007410:	f082 81f0 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007418:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800741c:	4321      	orrs	r1, r4
 800741e:	f000 829e 	beq.w	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007426:	4cb2      	ldr	r4, [pc, #712]	@ (80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007428:	42a0      	cmp	r0, r4
 800742a:	f171 0100 	sbcs.w	r1, r1, #0
 800742e:	f082 81e1 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007436:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800743a:	4321      	orrs	r1, r4
 800743c:	f000 826d 	beq.w	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007440:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007444:	4cab      	ldr	r4, [pc, #684]	@ (80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007446:	42a0      	cmp	r0, r4
 8007448:	f171 0100 	sbcs.w	r1, r1, #0
 800744c:	f082 81d2 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007454:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007458:	4321      	orrs	r1, r4
 800745a:	f001 800d 	beq.w	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800745e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007462:	4ca5      	ldr	r4, [pc, #660]	@ (80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007464:	42a0      	cmp	r0, r4
 8007466:	f171 0100 	sbcs.w	r1, r1, #0
 800746a:	f082 81c3 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800746e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007472:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007476:	4321      	orrs	r1, r4
 8007478:	f000 81d0 	beq.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800747c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007480:	4c9e      	ldr	r4, [pc, #632]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007482:	42a0      	cmp	r0, r4
 8007484:	f171 0100 	sbcs.w	r1, r1, #0
 8007488:	f082 81b4 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800748c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007490:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007494:	4321      	orrs	r1, r4
 8007496:	f000 8142 	beq.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800749a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800749e:	4c98      	ldr	r4, [pc, #608]	@ (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074a0:	42a0      	cmp	r0, r4
 80074a2:	f171 0100 	sbcs.w	r1, r1, #0
 80074a6:	f082 81a5 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ae:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80074b2:	4321      	orrs	r1, r4
 80074b4:	f001 824e 	beq.w	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80074b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074bc:	4c91      	ldr	r4, [pc, #580]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80074be:	42a0      	cmp	r0, r4
 80074c0:	f171 0100 	sbcs.w	r1, r1, #0
 80074c4:	f082 8196 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074cc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80074d0:	4321      	orrs	r1, r4
 80074d2:	f001 8197 	beq.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80074d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074da:	4c8b      	ldr	r4, [pc, #556]	@ (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80074dc:	42a0      	cmp	r0, r4
 80074de:	f171 0100 	sbcs.w	r1, r1, #0
 80074e2:	f082 8187 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ea:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80074ee:	4321      	orrs	r1, r4
 80074f0:	f001 8154 	beq.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80074f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f8:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80074fc:	f171 0100 	sbcs.w	r1, r1, #0
 8007500:	f082 8178 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007508:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800750c:	4321      	orrs	r1, r4
 800750e:	f001 80b7 	beq.w	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007516:	f248 0401 	movw	r4, #32769	@ 0x8001
 800751a:	42a0      	cmp	r0, r4
 800751c:	f171 0100 	sbcs.w	r1, r1, #0
 8007520:	f082 8168 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007528:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800752c:	4321      	orrs	r1, r4
 800752e:	f001 8064 	beq.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007536:	f244 0401 	movw	r4, #16385	@ 0x4001
 800753a:	42a0      	cmp	r0, r4
 800753c:	f171 0100 	sbcs.w	r1, r1, #0
 8007540:	f082 8158 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007548:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800754c:	4321      	orrs	r1, r4
 800754e:	f001 8011 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007556:	f242 0401 	movw	r4, #8193	@ 0x2001
 800755a:	42a0      	cmp	r0, r4
 800755c:	f171 0100 	sbcs.w	r1, r1, #0
 8007560:	f082 8148 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007568:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800756c:	4321      	orrs	r1, r4
 800756e:	f000 871e 	beq.w	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007576:	f241 0401 	movw	r4, #4097	@ 0x1001
 800757a:	42a0      	cmp	r0, r4
 800757c:	f171 0100 	sbcs.w	r1, r1, #0
 8007580:	f082 8138 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007588:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800758c:	4321      	orrs	r1, r4
 800758e:	f000 86a8 	beq.w	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007596:	f640 0401 	movw	r4, #2049	@ 0x801
 800759a:	42a0      	cmp	r0, r4
 800759c:	f171 0100 	sbcs.w	r1, r1, #0
 80075a0:	f082 8128 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075a8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80075ac:	4321      	orrs	r1, r4
 80075ae:	f000 8632 	beq.w	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80075b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075b6:	f240 4401 	movw	r4, #1025	@ 0x401
 80075ba:	42a0      	cmp	r0, r4
 80075bc:	f171 0100 	sbcs.w	r1, r1, #0
 80075c0:	f082 8118 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075c8:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80075cc:	4321      	orrs	r1, r4
 80075ce:	f000 85b0 	beq.w	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80075d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075d6:	f240 2401 	movw	r4, #513	@ 0x201
 80075da:	42a0      	cmp	r0, r4
 80075dc:	f171 0100 	sbcs.w	r1, r1, #0
 80075e0:	f082 8108 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075e8:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80075ec:	4321      	orrs	r1, r4
 80075ee:	f000 8535 	beq.w	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80075f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075f6:	f240 1401 	movw	r4, #257	@ 0x101
 80075fa:	42a0      	cmp	r0, r4
 80075fc:	f171 0100 	sbcs.w	r1, r1, #0
 8007600:	f082 80f8 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007608:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800760c:	4321      	orrs	r1, r4
 800760e:	f000 84ba 	beq.w	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007616:	2881      	cmp	r0, #129	@ 0x81
 8007618:	f171 0100 	sbcs.w	r1, r1, #0
 800761c:	f082 80ea 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007624:	2821      	cmp	r0, #33	@ 0x21
 8007626:	f171 0100 	sbcs.w	r1, r1, #0
 800762a:	d26f      	bcs.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800762c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007630:	4301      	orrs	r1, r0
 8007632:	f002 80df 	beq.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800763a:	1e42      	subs	r2, r0, #1
 800763c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007640:	2a20      	cmp	r2, #32
 8007642:	f173 0100 	sbcs.w	r1, r3, #0
 8007646:	f082 80d5 	bcs.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800764a:	2a1f      	cmp	r2, #31
 800764c:	f202 80d2 	bhi.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007650:	a101      	add	r1, pc, #4	@ (adr r1, 8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007652:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007656:	bf00      	nop
 8007658:	080079b9 	.word	0x080079b9
 800765c:	08007a85 	.word	0x08007a85
 8007660:	080097f5 	.word	0x080097f5
 8007664:	08007b45 	.word	0x08007b45
 8007668:	080097f5 	.word	0x080097f5
 800766c:	080097f5 	.word	0x080097f5
 8007670:	080097f5 	.word	0x080097f5
 8007674:	08007c15 	.word	0x08007c15
 8007678:	080097f5 	.word	0x080097f5
 800767c:	080097f5 	.word	0x080097f5
 8007680:	080097f5 	.word	0x080097f5
 8007684:	080097f5 	.word	0x080097f5
 8007688:	080097f5 	.word	0x080097f5
 800768c:	080097f5 	.word	0x080097f5
 8007690:	080097f5 	.word	0x080097f5
 8007694:	08007cf7 	.word	0x08007cf7
 8007698:	080097f5 	.word	0x080097f5
 800769c:	080097f5 	.word	0x080097f5
 80076a0:	080097f5 	.word	0x080097f5
 80076a4:	080097f5 	.word	0x080097f5
 80076a8:	080097f5 	.word	0x080097f5
 80076ac:	080097f5 	.word	0x080097f5
 80076b0:	080097f5 	.word	0x080097f5
 80076b4:	080097f5 	.word	0x080097f5
 80076b8:	080097f5 	.word	0x080097f5
 80076bc:	080097f5 	.word	0x080097f5
 80076c0:	080097f5 	.word	0x080097f5
 80076c4:	080097f5 	.word	0x080097f5
 80076c8:	080097f5 	.word	0x080097f5
 80076cc:	080097f5 	.word	0x080097f5
 80076d0:	080097f5 	.word	0x080097f5
 80076d4:	08007dcd 	.word	0x08007dcd
 80076d8:	80000001 	.word	0x80000001
 80076dc:	40000001 	.word	0x40000001
 80076e0:	20000001 	.word	0x20000001
 80076e4:	10000001 	.word	0x10000001
 80076e8:	08000001 	.word	0x08000001
 80076ec:	04000001 	.word	0x04000001
 80076f0:	00800001 	.word	0x00800001
 80076f4:	00400001 	.word	0x00400001
 80076f8:	00200001 	.word	0x00200001
 80076fc:	00100001 	.word	0x00100001
 8007700:	00080001 	.word	0x00080001
 8007704:	00040001 	.word	0x00040001
 8007708:	00020001 	.word	0x00020001
 800770c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007710:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007714:	430b      	orrs	r3, r1
 8007716:	f000 83c4 	beq.w	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800771a:	f002 b86b 	b.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800771e:	4ba1      	ldr	r3, [pc, #644]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007724:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007728:	633b      	str	r3, [r7, #48]	@ 0x30
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007730:	d036      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007738:	d86b      	bhi.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007740:	d02b      	beq.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007748:	d863      	bhi.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007750:	d01b      	beq.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007758:	d85b      	bhi.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	d004      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007766:	d008      	beq.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007768:	e053      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800776a:	f107 0320 	add.w	r3, r7, #32
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff f8b4 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007778:	e04e      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800777a:	f107 0314 	add.w	r3, r7, #20
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fa18 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007788:	e046      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff fb7c 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007798:	e03e      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800779a:	4b83      	ldr	r3, [pc, #524]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800779e:	e03b      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077a0:	4b80      	ldr	r3, [pc, #512]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80077aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077ac:	4b7d      	ldr	r3, [pc, #500]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d10c      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80077b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077be:	4b79      	ldr	r3, [pc, #484]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	08db      	lsrs	r3, r3, #3
 80077c4:	f003 0303 	and.w	r3, r3, #3
 80077c8:	4a78      	ldr	r2, [pc, #480]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d0:	e01e      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077d2:	4b74      	ldr	r3, [pc, #464]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077de:	d106      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80077e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077e6:	d102      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077e8:	4b71      	ldr	r3, [pc, #452]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80077ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ec:	e010      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077ee:	4b6d      	ldr	r3, [pc, #436]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077fa:	d106      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80077fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007802:	d102      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007804:	4b6b      	ldr	r3, [pc, #428]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
 8007808:	e002      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800780e:	e003      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007816:	bf00      	nop
          }
        }
        break;
 8007818:	f001 bfef 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800781c:	4b61      	ldr	r3, [pc, #388]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800781e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007822:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007826:	633b      	str	r3, [r7, #48]	@ 0x30
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800782e:	d036      	beq.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007836:	d86b      	bhi.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800783e:	d02b      	beq.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007846:	d863      	bhi.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784e:	d01b      	beq.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007856:	d85b      	bhi.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007864:	d008      	beq.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007866:	e053      	b.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007868:	f107 0320 	add.w	r3, r7, #32
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff f835 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007876:	e04e      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff f999 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007886:	e046      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007888:	f107 0308 	add.w	r3, r7, #8
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fafd 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007896:	e03e      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007898:	4b43      	ldr	r3, [pc, #268]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800789a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800789c:	e03b      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800789e:	4b41      	ldr	r3, [pc, #260]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078aa:	4b3e      	ldr	r3, [pc, #248]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d10c      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80078b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078bc:	4b39      	ldr	r3, [pc, #228]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	08db      	lsrs	r3, r3, #3
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	4a39      	ldr	r2, [pc, #228]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80078c8:	fa22 f303 	lsr.w	r3, r2, r3
 80078cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ce:	e01e      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078d0:	4b34      	ldr	r3, [pc, #208]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078dc:	d106      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80078de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e4:	d102      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078e6:	4b32      	ldr	r3, [pc, #200]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ea:	e010      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078ec:	4b2d      	ldr	r3, [pc, #180]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f8:	d106      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80078fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007900:	d102      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007902:	4b2c      	ldr	r3, [pc, #176]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007904:	637b      	str	r3, [r7, #52]	@ 0x34
 8007906:	e002      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800790c:	e003      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800790e:	e002      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007914:	bf00      	nop
          }
        }
        break;
 8007916:	f001 bf70 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800791a:	4b22      	ldr	r3, [pc, #136]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800791c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	2b00      	cmp	r3, #0
 800792a:	d108      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800792c:	f107 0320 	add.w	r3, r7, #32
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe ffd3 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800793a:	f001 bf5e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	2b40      	cmp	r3, #64	@ 0x40
 8007942:	d108      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff f933 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007952:	f001 bf52 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800795a:	f001 bf4e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800795e:	4b11      	ldr	r3, [pc, #68]	@ (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007968:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	2b00      	cmp	r3, #0
 800796e:	d108      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007970:	f107 0320 	add.w	r3, r7, #32
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe ffb1 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800797e:	f001 bf3c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	2b80      	cmp	r3, #128	@ 0x80
 8007986:	d108      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007988:	f107 0314 	add.w	r3, r7, #20
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff f911 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007996:	f001 bf30 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800799e:	f001 bf2c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079a2:	bf00      	nop
 80079a4:	44020c00 	.word	0x44020c00
 80079a8:	00bb8000 	.word	0x00bb8000
 80079ac:	03d09000 	.word	0x03d09000
 80079b0:	003d0900 	.word	0x003d0900
 80079b4:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80079b8:	4b9d      	ldr	r3, [pc, #628]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80079ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80079ca:	f7fc ff99 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 80079ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80079d0:	f001 bf13 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80079d4:	4b96      	ldr	r3, [pc, #600]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e0:	d10a      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d107      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e8:	f107 0314 	add.w	r3, r7, #20
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff f8e1 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	e043      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80079f8:	4b8d      	ldr	r3, [pc, #564]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a04:	d10a      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d107      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fa3b 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1a:	e031      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007a1c:	4b84      	ldr	r3, [pc, #528]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d10c      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d109      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a2e:	4b80      	ldr	r3, [pc, #512]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	08db      	lsrs	r3, r3, #3
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	4a7e      	ldr	r2, [pc, #504]	@ (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a40:	e01e      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007a42:	4b7b      	ldr	r3, [pc, #492]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a4e:	d105      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d102      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007a56:	4b78      	ldr	r3, [pc, #480]	@ (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5a:	e011      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007a5c:	4b74      	ldr	r3, [pc, #464]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d106      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	2b05      	cmp	r3, #5
 8007a6e:	d103      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a76:	e003      	b.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a7c:	f001 bebd 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a80:	f001 bebb 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007a84:	4b6a      	ldr	r3, [pc, #424]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007a8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a8e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d104      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a96:	f7fc ff1d 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007a9a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a9c:	f001 bead 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007aa0:	4b63      	ldr	r3, [pc, #396]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aac:	d10a      	bne.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d107      	bne.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab4:	f107 0314 	add.w	r3, r7, #20
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff f87b 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac2:	e03d      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d108      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff f9dc 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad8:	f001 be8f 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007adc:	4b54      	ldr	r3, [pc, #336]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d10c      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aea:	2b18      	cmp	r3, #24
 8007aec:	d109      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007aee:	4b50      	ldr	r3, [pc, #320]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	08db      	lsrs	r3, r3, #3
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	4a4e      	ldr	r2, [pc, #312]	@ (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007afa:	fa22 f303 	lsr.w	r3, r2, r3
 8007afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b00:	e01e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007b02:	4b4b      	ldr	r3, [pc, #300]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b0e:	d105      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d102      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007b16:	4b48      	ldr	r3, [pc, #288]	@ (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1a:	e011      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007b1c:	4b44      	ldr	r3, [pc, #272]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d106      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	2b28      	cmp	r3, #40	@ 0x28
 8007b2e:	d103      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007b30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b36:	e003      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b3c:	f001 be5d 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b40:	f001 be5b 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007b44:	4b3a      	ldr	r3, [pc, #232]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b4a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007b4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d104      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b56:	f7fc febd 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007b5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b5c:	f001 be4d 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007b60:	4b33      	ldr	r3, [pc, #204]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b6c:	d10a      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	2b40      	cmp	r3, #64	@ 0x40
 8007b72:	d107      	bne.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff f81b 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b82:	e045      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007b84:	4b2a      	ldr	r3, [pc, #168]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b90:	d10a      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	2b80      	cmp	r3, #128	@ 0x80
 8007b96:	d107      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b98:	f107 0308 	add.w	r3, r7, #8
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff f975 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba6:	e033      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007ba8:	4b21      	ldr	r3, [pc, #132]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d10c      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bb8:	d109      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bba:	4b1d      	ldr	r3, [pc, #116]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	08db      	lsrs	r3, r3, #3
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bcc:	e020      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007bce:	4b18      	ldr	r3, [pc, #96]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bda:	d106      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007be2:	d102      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007be4:	4b14      	ldr	r3, [pc, #80]	@ (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007be8:	e012      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007bea:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d107      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007bfe:	d103      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c06:	e003      	b.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c0c:	f001 bdf5 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c10:	f001 bdf3 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007c14:	4b06      	ldr	r3, [pc, #24]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c1a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007c1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10a      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c26:	f7fc fe55 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007c2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c2c:	f001 bde5 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c30:	44020c00 	.word	0x44020c00
 8007c34:	03d09000 	.word	0x03d09000
 8007c38:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007c3c:	4ba0      	ldr	r3, [pc, #640]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c48:	d10b      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c50:	d107      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c52:	f107 0314 	add.w	r3, r7, #20
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe ffac 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c60:	e047      	b.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007c62:	4b97      	ldr	r3, [pc, #604]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c6e:	d10b      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c76:	d107      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c78:	f107 0308 	add.w	r3, r7, #8
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff f905 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c86:	e034      	b.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007c88:	4b8d      	ldr	r3, [pc, #564]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d10d      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c9a:	d109      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c9c:	4b88      	ldr	r3, [pc, #544]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	08db      	lsrs	r3, r3, #3
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	4a87      	ldr	r2, [pc, #540]	@ (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cae:	e020      	b.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007cb0:	4b83      	ldr	r3, [pc, #524]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc4:	d102      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007cc6:	4b80      	ldr	r3, [pc, #512]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cca:	e012      	b.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007ccc:	4b7c      	ldr	r3, [pc, #496]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d107      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007ce0:	d103      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce8:	e003      	b.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cee:	f001 bd84 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cf2:	f001 bd82 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007cf6:	4b72      	ldr	r3, [pc, #456]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cfc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007d00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d08:	f7fc fde4 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007d0c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d0e:	f001 bd74 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007d12:	4b6b      	ldr	r3, [pc, #428]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d1e:	d10b      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d28:	f107 0314 	add.w	r3, r7, #20
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe ff41 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d36:	e047      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007d38:	4b61      	ldr	r3, [pc, #388]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d44:	d10b      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d4c:	d107      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d4e:	f107 0308 	add.w	r3, r7, #8
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff f89a 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d5c:	e034      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007d5e:	4b58      	ldr	r3, [pc, #352]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d10d      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d70:	d109      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d72:	4b53      	ldr	r3, [pc, #332]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	08db      	lsrs	r3, r3, #3
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	4a51      	ldr	r2, [pc, #324]	@ (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d84:	e020      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007d86:	4b4e      	ldr	r3, [pc, #312]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d92:	d106      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d9a:	d102      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007d9c:	4b4a      	ldr	r3, [pc, #296]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da0:	e012      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007da2:	4b47      	ldr	r3, [pc, #284]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d107      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007db6:	d103      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbe:	e003      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dc4:	f001 bd19 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dc8:	f001 bd17 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007dd2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007dd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007dde:	f7fc fd79 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007de2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007de4:	f001 bd09 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007de8:	4b35      	ldr	r3, [pc, #212]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007df0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007df4:	d10b      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dfc:	d107      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dfe:	f107 0314 	add.w	r3, r7, #20
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fed6 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0c:	e047      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e1a:	d10b      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e22:	d107      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e24:	f107 0308 	add.w	r3, r7, #8
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff f82f 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e32:	e034      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007e34:	4b22      	ldr	r3, [pc, #136]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d10d      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007e46:	d109      	bne.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e48:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	08db      	lsrs	r3, r3, #3
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	4a1c      	ldr	r2, [pc, #112]	@ (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e5a:	e020      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007e5c:	4b18      	ldr	r3, [pc, #96]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e68:	d106      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e70:	d102      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007e72:	4b15      	ldr	r3, [pc, #84]	@ (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e76:	e012      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007e78:	4b11      	ldr	r3, [pc, #68]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d107      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007e8c:	d103      	bne.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e94:	e003      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e9a:	f001 bcae 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e9e:	f001 bcac 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007ea2:	4b07      	ldr	r3, [pc, #28]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ea8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8007eac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10b      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007eb4:	f7fc fd0e 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007eb8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007eba:	f001 bc9e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ebe:	bf00      	nop
 8007ec0:	44020c00 	.word	0x44020c00
 8007ec4:	03d09000 	.word	0x03d09000
 8007ec8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007ecc:	4ba0      	ldr	r3, [pc, #640]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ed4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed8:	d10b      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ee0:	d107      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee2:	f107 0314 	add.w	r3, r7, #20
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fe64 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef0:	e047      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007ef2:	4b97      	ldr	r3, [pc, #604]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007efe:	d10b      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f06:	d107      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f08:	f107 0308 	add.w	r3, r7, #8
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe ffbd 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f16:	e034      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007f18:	4b8d      	ldr	r3, [pc, #564]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d10d      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007f2a:	d109      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f2c:	4b88      	ldr	r3, [pc, #544]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	08db      	lsrs	r3, r3, #3
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	4a87      	ldr	r2, [pc, #540]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3e:	e020      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007f40:	4b83      	ldr	r3, [pc, #524]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f4c:	d106      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f54:	d102      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007f56:	4b80      	ldr	r3, [pc, #512]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5a:	e012      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007f5c:	4b7c      	ldr	r3, [pc, #496]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d107      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007f70:	d103      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8007f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f78:	e003      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f7e:	f001 bc3c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f82:	f001 bc3a 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007f86:	4b72      	ldr	r3, [pc, #456]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f8c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007f90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f98:	f7fc fc9c 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8007f9c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f9e:	f001 bc2c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007fa2:	4b6b      	ldr	r3, [pc, #428]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fae:	d10b      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fb6:	d107      	bne.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fdf9 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc6:	e047      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007fc8:	4b61      	ldr	r3, [pc, #388]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd4:	d10b      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fdc:	d107      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fde:	f107 0308 	add.w	r3, r7, #8
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe ff52 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fec:	e034      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007fee:	4b58      	ldr	r3, [pc, #352]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d10d      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008000:	d109      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008002:	4b53      	ldr	r3, [pc, #332]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	08db      	lsrs	r3, r3, #3
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	4a51      	ldr	r2, [pc, #324]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800800e:	fa22 f303 	lsr.w	r3, r2, r3
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
 8008014:	e020      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008016:	4b4e      	ldr	r3, [pc, #312]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800801e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008022:	d106      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800802a:	d102      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800802c:	4b4a      	ldr	r3, [pc, #296]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800802e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008030:	e012      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008032:	4b47      	ldr	r3, [pc, #284]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b02      	cmp	r3, #2
 800803e:	d107      	bne.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008042:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008046:	d103      	bne.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800804c:	637b      	str	r3, [r7, #52]	@ 0x34
 800804e:	e003      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008054:	f001 bbd1 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008058:	f001 bbcf 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800805c:	4b3c      	ldr	r3, [pc, #240]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800805e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008062:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008066:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800806e:	f7fc fc31 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8008072:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008074:	f001 bbc1 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008078:	4b35      	ldr	r3, [pc, #212]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008084:	d10b      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800808c:	d107      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800808e:	f107 0314 	add.w	r3, r7, #20
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fd8e 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
 800809c:	e047      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800809e:	4b2c      	ldr	r3, [pc, #176]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080aa:	d10b      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080b2:	d107      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe fee7 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	e034      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80080c4:	4b22      	ldr	r3, [pc, #136]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d10d      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80080d6:	d109      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	08db      	lsrs	r3, r3, #3
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ea:	e020      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80080ec:	4b18      	ldr	r3, [pc, #96]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f8:	d106      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008100:	d102      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008102:	4b15      	ldr	r3, [pc, #84]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
 8008106:	e012      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008108:	4b11      	ldr	r3, [pc, #68]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800810a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b02      	cmp	r3, #2
 8008114:	d107      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800811c:	d103      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800811e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008122:	637b      	str	r3, [r7, #52]	@ 0x34
 8008124:	e003      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800812a:	f001 bb66 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800812e:	f001 bb64 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008132:	4b07      	ldr	r3, [pc, #28]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008138:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800813c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10b      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008144:	f7fc fbc6 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8008148:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800814a:	f001 bb56 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800814e:	bf00      	nop
 8008150:	44020c00 	.word	0x44020c00
 8008154:	03d09000 	.word	0x03d09000
 8008158:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800815c:	4ba1      	ldr	r3, [pc, #644]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008168:	d10b      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008170:	d107      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008172:	f107 0314 	add.w	r3, r7, #20
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fd1c 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008180:	e047      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008182:	4b98      	ldr	r3, [pc, #608]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800818a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818e:	d10b      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008196:	d107      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008198:	f107 0308 	add.w	r3, r7, #8
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fe75 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a6:	e034      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80081a8:	4b8e      	ldr	r3, [pc, #568]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d10d      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80081ba:	d109      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081bc:	4b89      	ldr	r3, [pc, #548]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	08db      	lsrs	r3, r3, #3
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	4a88      	ldr	r2, [pc, #544]	@ (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
 80081cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ce:	e020      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80081d0:	4b84      	ldr	r3, [pc, #528]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081dc:	d106      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80081de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081e4:	d102      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80081e6:	4b81      	ldr	r3, [pc, #516]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ea:	e012      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80081ec:	4b7d      	ldr	r3, [pc, #500]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80081ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d107      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008200:	d103      	bne.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008206:	637b      	str	r3, [r7, #52]	@ 0x34
 8008208:	e003      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800820e:	f001 baf4 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008212:	f001 baf2 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008216:	4b73      	ldr	r3, [pc, #460]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008218:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008228:	f7fc fb54 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 800822c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800822e:	f001 bae4 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008232:	4b6c      	ldr	r3, [pc, #432]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800823a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800823e:	d10a      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	2b01      	cmp	r3, #1
 8008244:	d107      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008246:	f107 0314 	add.w	r3, r7, #20
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fcb2 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	637b      	str	r3, [r7, #52]	@ 0x34
 8008254:	e043      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008256:	4b63      	ldr	r3, [pc, #396]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800825e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008262:	d10a      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	2b02      	cmp	r3, #2
 8008268:	d107      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fe0c 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
 8008278:	e031      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800827a:	4b5a      	ldr	r3, [pc, #360]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10c      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	2b03      	cmp	r3, #3
 800828a:	d109      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800828c:	4b55      	ldr	r3, [pc, #340]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	08db      	lsrs	r3, r3, #3
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	4a54      	ldr	r2, [pc, #336]	@ (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008298:	fa22 f303 	lsr.w	r3, r2, r3
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34
 800829e:	e01e      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80082a0:	4b50      	ldr	r3, [pc, #320]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ac:	d105      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d102      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80082b4:	4b4d      	ldr	r3, [pc, #308]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80082b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b8:	e011      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80082ba:	4b4a      	ldr	r3, [pc, #296]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d106      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d103      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80082ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d4:	e003      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082da:	f001 ba8e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082de:	f001 ba8c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80082e2:	4b40      	ldr	r3, [pc, #256]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80082e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082f4:	f7fc faee 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 80082f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80082fa:	f001 ba7e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80082fe:	4b39      	ldr	r3, [pc, #228]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800830a:	d10a      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800830c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830e:	2b10      	cmp	r3, #16
 8008310:	d107      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fc4c 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008320:	e043      	b.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008322:	4b30      	ldr	r3, [pc, #192]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800832a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800832e:	d10a      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	2b20      	cmp	r3, #32
 8008334:	d107      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fda6 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	637b      	str	r3, [r7, #52]	@ 0x34
 8008344:	e031      	b.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008346:	4b27      	ldr	r3, [pc, #156]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b02      	cmp	r3, #2
 8008350:	d10c      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	2b30      	cmp	r3, #48	@ 0x30
 8008356:	d109      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008358:	4b22      	ldr	r3, [pc, #136]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	08db      	lsrs	r3, r3, #3
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	4a21      	ldr	r2, [pc, #132]	@ (80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008364:	fa22 f303 	lsr.w	r3, r2, r3
 8008368:	637b      	str	r3, [r7, #52]	@ 0x34
 800836a:	e01e      	b.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800836c:	4b1d      	ldr	r3, [pc, #116]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008378:	d105      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800837a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837c:	2b40      	cmp	r3, #64	@ 0x40
 800837e:	d102      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008380:	4b1a      	ldr	r3, [pc, #104]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008382:	637b      	str	r3, [r7, #52]	@ 0x34
 8008384:	e011      	b.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008386:	4b17      	ldr	r3, [pc, #92]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b02      	cmp	r3, #2
 8008392:	d106      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	2b50      	cmp	r3, #80	@ 0x50
 8008398:	d103      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800839a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800839e:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a0:	e003      	b.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083a6:	f001 ba28 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083aa:	f001 ba26 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80083ae:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083b4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80083b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d104      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80083c0:	f7fc fab4 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 80083c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80083c6:	f001 ba18 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083d0:	d10e      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d2:	f107 0314 	add.w	r3, r7, #20
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fbec 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083e0:	f001 ba0b 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083e4:	44020c00 	.word	0x44020c00
 80083e8:	03d09000 	.word	0x03d09000
 80083ec:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083f6:	d108      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f8:	f107 0308 	add.w	r3, r7, #8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fd45 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008406:	f001 b9f8 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800840a:	4ba4      	ldr	r3, [pc, #656]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b02      	cmp	r3, #2
 8008414:	d10d      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800841c:	d109      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800841e:	4b9f      	ldr	r3, [pc, #636]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	08db      	lsrs	r3, r3, #3
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	4a9d      	ldr	r2, [pc, #628]	@ (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800842a:	fa22 f303 	lsr.w	r3, r2, r3
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008430:	e020      	b.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008432:	4b9a      	ldr	r3, [pc, #616]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800843a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800843e:	d106      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008446:	d102      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008448:	4b96      	ldr	r3, [pc, #600]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
 800844c:	e012      	b.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800844e:	4b93      	ldr	r3, [pc, #588]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b02      	cmp	r3, #2
 800845a:	d107      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008462:	d103      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008464:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
 800846a:	e003      	b.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800846c:	2300      	movs	r3, #0
 800846e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008470:	f001 b9c3 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008474:	f001 b9c1 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008478:	4b88      	ldr	r3, [pc, #544]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800847a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800848a:	f7fc fa07 	bl	800489c <HAL_RCC_GetHCLKFreq>
 800848e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008490:	f001 b9b3 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	2b01      	cmp	r3, #1
 8008498:	d104      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800849a:	f7fc f8d3 	bl	8004644 <HAL_RCC_GetSysClockFreq>
 800849e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084a0:	f001 b9ab 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d108      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084aa:	f107 0314 	add.w	r3, r7, #20
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fb80 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084b8:	f001 b99f 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80084bc:	4b77      	ldr	r3, [pc, #476]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084c8:	d105      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d102      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80084d0:	4b75      	ldr	r3, [pc, #468]	@ (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d4:	e023      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80084d6:	4b71      	ldr	r3, [pc, #452]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d10c      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d109      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084e8:	4b6c      	ldr	r3, [pc, #432]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	4a6b      	ldr	r2, [pc, #428]	@ (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fa:	e010      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80084fc:	4b67      	ldr	r3, [pc, #412]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008508:	d105      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	2b05      	cmp	r3, #5
 800850e:	d102      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008510:	4b64      	ldr	r3, [pc, #400]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
 8008514:	e003      	b.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800851a:	f001 b96e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800851e:	f001 b96c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008522:	4b5e      	ldr	r3, [pc, #376]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800852e:	4b5b      	ldr	r3, [pc, #364]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b02      	cmp	r3, #2
 800853a:	d106      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	2b00      	cmp	r3, #0
 8008540:	d103      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
 8008548:	e012      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800854a:	4b54      	ldr	r3, [pc, #336]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800854c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	2b08      	cmp	r3, #8
 800855e:	d103      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008560:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
 8008566:	e003      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800856c:	f001 b945 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008570:	f001 b943 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008574:	4b49      	ldr	r3, [pc, #292]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800857a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800857e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008582:	2b00      	cmp	r3, #0
 8008584:	d104      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008586:	f7fc f9a5 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 800858a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800858c:	f001 b935 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008596:	d108      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008598:	f107 0308 	add.w	r3, r7, #8
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe fc75 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085a6:	f001 b928 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80085aa:	4b3c      	ldr	r3, [pc, #240]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d10d      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085bc:	d109      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085be:	4b37      	ldr	r3, [pc, #220]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	08db      	lsrs	r3, r3, #3
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	4a35      	ldr	r2, [pc, #212]	@ (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80085ca:	fa22 f303 	lsr.w	r3, r2, r3
 80085ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d0:	e011      	b.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80085d2:	4b32      	ldr	r3, [pc, #200]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085de:	d106      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085e6:	d102      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80085e8:	4b2e      	ldr	r3, [pc, #184]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80085ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ec:	e003      	b.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085f2:	f001 b902 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085f6:	f001 b900 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80085fa:	4b28      	ldr	r3, [pc, #160]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008600:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008604:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	2b00      	cmp	r3, #0
 800860a:	d104      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800860c:	f7fc f962 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8008610:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008612:	f001 b8f2 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008618:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800861c:	d108      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800861e:	f107 0308 	add.w	r3, r7, #8
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fc32 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800862c:	f001 b8e5 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008630:	4b1a      	ldr	r3, [pc, #104]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b02      	cmp	r3, #2
 800863a:	d10d      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800863c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008642:	d109      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008644:	4b15      	ldr	r3, [pc, #84]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	08db      	lsrs	r3, r3, #3
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	4a14      	ldr	r2, [pc, #80]	@ (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008650:	fa22 f303 	lsr.w	r3, r2, r3
 8008654:	637b      	str	r3, [r7, #52]	@ 0x34
 8008656:	e011      	b.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008658:	4b10      	ldr	r3, [pc, #64]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008664:	d106      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008668:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800866c:	d102      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800866e:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008670:	637b      	str	r3, [r7, #52]	@ 0x34
 8008672:	e003      	b.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008678:	f001 b8bf 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800867c:	f001 b8bd 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008680:	4b06      	ldr	r3, [pc, #24]	@ (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008682:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008686:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800868a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10c      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008692:	f7fc f94b 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 8008696:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008698:	f001 b8af 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800869c:	44020c00 	.word	0x44020c00
 80086a0:	03d09000 	.word	0x03d09000
 80086a4:	003d0900 	.word	0x003d0900
 80086a8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086b2:	d108      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe fbe7 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086c2:	f001 b89a 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80086c6:	4b9f      	ldr	r3, [pc, #636]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d10d      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086d8:	d109      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086da:	4b9a      	ldr	r3, [pc, #616]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	4a98      	ldr	r2, [pc, #608]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80086e6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	e011      	b.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80086ee:	4b95      	ldr	r3, [pc, #596]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008704:	4b91      	ldr	r3, [pc, #580]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
 8008708:	e003      	b.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800870e:	f001 b874 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008712:	f001 b872 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008716:	4b8b      	ldr	r3, [pc, #556]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008718:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800871c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008720:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008728:	f7fc f900 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 800872c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800872e:	f001 b864 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008738:	d108      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fba4 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008748:	f001 b857 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800874c:	4b7d      	ldr	r3, [pc, #500]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b02      	cmp	r3, #2
 8008756:	d10d      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800875e:	d109      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008760:	4b78      	ldr	r3, [pc, #480]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	08db      	lsrs	r3, r3, #3
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	4a77      	ldr	r2, [pc, #476]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800876c:	fa22 f303 	lsr.w	r3, r2, r3
 8008770:	637b      	str	r3, [r7, #52]	@ 0x34
 8008772:	e011      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008774:	4b73      	ldr	r3, [pc, #460]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800877c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008780:	d106      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008788:	d102      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800878a:	4b70      	ldr	r3, [pc, #448]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800878c:	637b      	str	r3, [r7, #52]	@ 0x34
 800878e:	e003      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008794:	f001 b831 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008798:	f001 b82f 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800879c:	4b69      	ldr	r3, [pc, #420]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800879e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087a2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80087a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d104      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087ae:	f7fc f891 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 80087b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80087b4:	f001 b821 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80087b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087be:	d108      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fb61 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ce:	f001 b814 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80087d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d10e      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087e4:	d10a      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087e6:	4b57      	ldr	r3, [pc, #348]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	08db      	lsrs	r3, r3, #3
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	4a55      	ldr	r2, [pc, #340]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80087f2:	fa22 f303 	lsr.w	r3, r2, r3
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f8:	f000 bfff 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008800:	f000 bffb 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008804:	4b4f      	ldr	r3, [pc, #316]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008806:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800880a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008816:	d056      	beq.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800881e:	f200 808b 	bhi.w	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008828:	d03e      	beq.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008830:	f200 8082 	bhi.w	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800883a:	d027      	beq.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008842:	d879      	bhi.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800884a:	d017      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008852:	d871      	bhi.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008860:	d004      	beq.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008862:	e069      	b.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008864:	f7fc f862 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 8008868:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800886a:	e068      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe f99f 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800887a:	e060      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800887c:	f107 0308 	add.w	r3, r7, #8
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe fb03 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800888a:	e058      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800888c:	4b2d      	ldr	r3, [pc, #180]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800888e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b02      	cmp	r3, #2
 8008898:	d103      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800889a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80088a0:	e04d      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088a6:	e04a      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80088a8:	4b26      	ldr	r3, [pc, #152]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088b6:	d103      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80088b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80088bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80088be:	e03e      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088c4:	e03b      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80088d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d10c      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d109      	bne.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088e4:	4b17      	ldr	r3, [pc, #92]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	08db      	lsrs	r3, r3, #3
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	4a16      	ldr	r2, [pc, #88]	@ (8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80088f0:	fa22 f303 	lsr.w	r3, r2, r3
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f6:	e01e      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088f8:	4b12      	ldr	r3, [pc, #72]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008904:	d106      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800890c:	d102      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800890e:	4b0f      	ldr	r3, [pc, #60]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
 8008912:	e010      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008914:	4b0b      	ldr	r3, [pc, #44]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800891c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008920:	d106      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008928:	d102      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800892a:	4b09      	ldr	r3, [pc, #36]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
 800892e:	e002      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008934:	e003      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008936:	e002      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800893c:	bf00      	nop
          }
        }
        break;
 800893e:	f000 bf5c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008942:	bf00      	nop
 8008944:	44020c00 	.word	0x44020c00
 8008948:	03d09000 	.word	0x03d09000
 800894c:	003d0900 	.word	0x003d0900
 8008950:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008954:	4b9e      	ldr	r3, [pc, #632]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008956:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800895a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800895e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008966:	d056      	beq.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800896e:	f200 808b 	bhi.w	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008978:	d03e      	beq.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008980:	f200 8082 	bhi.w	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800898a:	d027      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800898c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008992:	d879      	bhi.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800899a:	d017      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089a2:	d871      	bhi.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d004      	beq.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089b0:	d004      	beq.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80089b2:	e069      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80089b4:	f7fb ff8e 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 80089b8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80089ba:	e068      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe f8f7 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089ca:	e060      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fa5b 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089da:	e058      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089dc:	4b7c      	ldr	r3, [pc, #496]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80089de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d103      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80089ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089f0:	e04d      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089f6:	e04a      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80089f8:	4b75      	ldr	r3, [pc, #468]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80089fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a06:	d103      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008a08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008a0e:	e03e      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a14:	e03b      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a16:	4b6e      	ldr	r3, [pc, #440]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a22:	4b6b      	ldr	r3, [pc, #428]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d10c      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d109      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a34:	4b66      	ldr	r3, [pc, #408]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	08db      	lsrs	r3, r3, #3
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	4a65      	ldr	r2, [pc, #404]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a46:	e01e      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a48:	4b61      	ldr	r3, [pc, #388]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a54:	d106      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a5c:	d102      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a62:	e010      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a64:	4b5a      	ldr	r3, [pc, #360]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a70:	d106      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a78:	d102      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a7a:	4b58      	ldr	r3, [pc, #352]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7e:	e002      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008a84:	e003      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008a86:	e002      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a8c:	bf00      	nop
          }
        }
        break;
 8008a8e:	f000 beb4 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008a92:	4b4f      	ldr	r3, [pc, #316]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008a94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a98:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008aa4:	d056      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008aac:	f200 808b 	bhi.w	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ab6:	d03e      	beq.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008abe:	f200 8082 	bhi.w	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ac8:	d027      	beq.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ad0:	d879      	bhi.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ad8:	d017      	beq.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ae0:	d871      	bhi.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d004      	beq.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aee:	d004      	beq.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008af0:	e069      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008af2:	f7fb ff1b 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 8008af6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008af8:	e068      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008afa:	f107 0314 	add.w	r3, r7, #20
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe f858 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b08:	e060      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b0a:	f107 0308 	add.w	r3, r7, #8
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe f9bc 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b18:	e058      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d103      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b2e:	e04d      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b34:	e04a      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b36:	4b26      	ldr	r3, [pc, #152]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b44:	d103      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008b46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b4a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b4c:	e03e      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b52:	e03b      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b54:	4b1e      	ldr	r3, [pc, #120]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b5a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b60:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d10c      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d109      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b72:	4b17      	ldr	r3, [pc, #92]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	08db      	lsrs	r3, r3, #3
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	4a15      	ldr	r2, [pc, #84]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b84:	e01e      	b.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b86:	4b12      	ldr	r3, [pc, #72]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b92:	d106      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b9a:	d102      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba0:	e010      	b.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bae:	d106      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bb6:	d102      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008bb8:	4b08      	ldr	r3, [pc, #32]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bbc:	e002      	b.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008bc2:	e003      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008bc4:	e002      	b.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bca:	bf00      	nop
          }
        }
        break;
 8008bcc:	f000 be15 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bd0:	44020c00 	.word	0x44020c00
 8008bd4:	03d09000 	.word	0x03d09000
 8008bd8:	003d0900 	.word	0x003d0900
 8008bdc:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008be0:	4b9e      	ldr	r3, [pc, #632]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008be2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008be6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008bea:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bee:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008bf2:	d056      	beq.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008bfa:	f200 808b 	bhi.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c04:	d03e      	beq.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c0c:	f200 8082 	bhi.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c16:	d027      	beq.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c1e:	d879      	bhi.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c26:	d017      	beq.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c2e:	d871      	bhi.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c3c:	d004      	beq.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008c3e:	e069      	b.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008c40:	f7fb fe74 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 8008c44:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c46:	e068      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c48:	f107 0314 	add.w	r3, r7, #20
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fd ffb1 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c56:	e060      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c58:	f107 0308 	add.w	r3, r7, #8
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe f915 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c66:	e058      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c68:	4b7c      	ldr	r3, [pc, #496]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d103      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c7c:	e04d      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c82:	e04a      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008c84:	4b75      	ldr	r3, [pc, #468]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c92:	d103      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008c94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c9a:	e03e      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ca0:	e03b      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ca8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cae:	4b6b      	ldr	r3, [pc, #428]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d10c      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cc0:	4b66      	ldr	r3, [pc, #408]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a65      	ldr	r2, [pc, #404]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd2:	e01e      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cd4:	4b61      	ldr	r3, [pc, #388]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ce0:	d106      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008cea:	4b5e      	ldr	r3, [pc, #376]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	e010      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cfc:	d106      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d04:	d102      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d06:	4b58      	ldr	r3, [pc, #352]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0a:	e002      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d10:	e003      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008d12:	e002      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d18:	bf00      	nop
          }
        }
        break;
 8008d1a:	f000 bd6e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d24:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008d30:	d056      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008d38:	f200 808b 	bhi.w	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d42:	d03e      	beq.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d4a:	f200 8082 	bhi.w	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d54:	d027      	beq.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d5c:	d879      	bhi.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d64:	d017      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d6c:	d871      	bhi.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d004      	beq.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d7a:	d004      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008d7c:	e069      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008d7e:	f7fb fdd5 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 8008d82:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008d84:	e068      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d86:	f107 0314 	add.w	r3, r7, #20
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fd ff12 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d94:	e060      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d96:	f107 0308 	add.w	r3, r7, #8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe f876 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008da4:	e058      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008da6:	4b2d      	ldr	r3, [pc, #180]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d103      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008db4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008db8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008dba:	e04d      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dc0:	e04a      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008dc2:	4b26      	ldr	r3, [pc, #152]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd0:	d103      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008dd2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008dd8:	e03e      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dde:	e03b      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008de0:	4b1e      	ldr	r3, [pc, #120]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008de6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008dea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dec:	4b1b      	ldr	r3, [pc, #108]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d10c      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d109      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dfe:	4b17      	ldr	r3, [pc, #92]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	08db      	lsrs	r3, r3, #3
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	4a15      	ldr	r2, [pc, #84]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e10:	e01e      	b.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e12:	4b12      	ldr	r3, [pc, #72]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e1e:	d106      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e26:	d102      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e28:	4b0e      	ldr	r3, [pc, #56]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2c:	e010      	b.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e3a:	d106      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e42:	d102      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e44:	4b08      	ldr	r3, [pc, #32]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e48:	e002      	b.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e4e:	e003      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008e50:	e002      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e56:	bf00      	nop
          }
        }
        break;
 8008e58:	f000 bccf 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e5c:	44020c00 	.word	0x44020c00
 8008e60:	03d09000 	.word	0x03d09000
 8008e64:	003d0900 	.word	0x003d0900
 8008e68:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008e6c:	4b9e      	ldr	r3, [pc, #632]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008e6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e7e:	d056      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e86:	f200 808b 	bhi.w	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e90:	d03e      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e98:	f200 8082 	bhi.w	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ea2:	d027      	beq.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008eaa:	d879      	bhi.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eb2:	d017      	beq.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eba:	d871      	bhi.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ec8:	d004      	beq.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008eca:	e069      	b.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008ecc:	f7fb fd2e 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 8008ed0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ed2:	e068      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd fe6b 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ee2:	e060      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee4:	f107 0308 	add.w	r3, r7, #8
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fd ffcf 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ef2:	e058      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ef4:	4b7c      	ldr	r3, [pc, #496]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d103      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8008f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f08:	e04d      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f0e:	e04a      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f10:	4b75      	ldr	r3, [pc, #468]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f1e:	d103      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8008f20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f26:	e03e      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f2c:	e03b      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d10c      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d109      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f4c:	4b66      	ldr	r3, [pc, #408]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	08db      	lsrs	r3, r3, #3
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	4a65      	ldr	r2, [pc, #404]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5e:	e01e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f60:	4b61      	ldr	r3, [pc, #388]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d106      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f74:	d102      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f76:	4b5e      	ldr	r3, [pc, #376]	@ (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7a:	e010      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f88:	d106      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f90:	d102      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f92:	4b58      	ldr	r3, [pc, #352]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f96:	e002      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f9c:	e003      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008f9e:	e002      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fa4:	bf00      	nop
          }
        }
        break;
 8008fa6:	f000 bc28 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008faa:	4b4f      	ldr	r3, [pc, #316]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fb4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fc2:	d106      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d103      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008fca:	4b4a      	ldr	r3, [pc, #296]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008fce:	f000 bc14 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd8:	d108      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fda:	f107 0320 	add.w	r3, r7, #32
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd fc7c 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fe8:	f000 bc07 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff2:	d107      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff4:	f107 0314 	add.w	r3, r7, #20
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fd fddb 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009002:	e3fa      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009008:	e3f7      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800900a:	4b37      	ldr	r3, [pc, #220]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800900c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009010:	f003 0307 	and.w	r3, r3, #7
 8009014:	633b      	str	r3, [r7, #48]	@ 0x30
 8009016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009018:	2b04      	cmp	r3, #4
 800901a:	d861      	bhi.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800901c:	a201      	add	r2, pc, #4	@ (adr r2, 8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800901e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009022:	bf00      	nop
 8009024:	08009039 	.word	0x08009039
 8009028:	08009049 	.word	0x08009049
 800902c:	08009059 	.word	0x08009059
 8009030:	08009069 	.word	0x08009069
 8009034:	0800906f 	.word	0x0800906f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009038:	f107 0320 	add.w	r3, r7, #32
 800903c:	4618      	mov	r0, r3
 800903e:	f7fd fc4d 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009046:	e04e      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009048:	f107 0314 	add.w	r3, r7, #20
 800904c:	4618      	mov	r0, r3
 800904e:	f7fd fdb1 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009056:	e046      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009058:	f107 0308 	add.w	r3, r7, #8
 800905c:	4618      	mov	r0, r3
 800905e:	f7fd ff15 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009066:	e03e      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009068:	4b23      	ldr	r3, [pc, #140]	@ (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800906a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800906c:	e03b      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800906e:	4b1e      	ldr	r3, [pc, #120]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009074:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009078:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800907a:	4b1b      	ldr	r3, [pc, #108]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b02      	cmp	r3, #2
 8009084:	d10c      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d109      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800908c:	4b16      	ldr	r3, [pc, #88]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	08db      	lsrs	r3, r3, #3
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	4a15      	ldr	r2, [pc, #84]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009098:	fa22 f303 	lsr.w	r3, r2, r3
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	e01e      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090a0:	4b11      	ldr	r3, [pc, #68]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ac:	d106      	bne.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80090ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b4:	d102      	bne.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090b6:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ba:	e010      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090bc:	4b0a      	ldr	r3, [pc, #40]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090c8:	d106      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80090ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090d0:	d102      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090d2:	4b08      	ldr	r3, [pc, #32]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80090d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d6:	e002      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090dc:	e003      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80090de:	e002      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090e4:	bf00      	nop
          }
        }
        break;
 80090e6:	e388      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090e8:	44020c00 	.word	0x44020c00
 80090ec:	03d09000 	.word	0x03d09000
 80090f0:	003d0900 	.word	0x003d0900
 80090f4:	007a1200 	.word	0x007a1200
 80090f8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80090fc:	4ba9      	ldr	r3, [pc, #676]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80090fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009106:	633b      	str	r3, [r7, #48]	@ 0x30
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	2b20      	cmp	r3, #32
 800910c:	f200 809a 	bhi.w	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009110:	a201      	add	r2, pc, #4	@ (adr r2, 8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	0800919d 	.word	0x0800919d
 800911c:	08009245 	.word	0x08009245
 8009120:	08009245 	.word	0x08009245
 8009124:	08009245 	.word	0x08009245
 8009128:	08009245 	.word	0x08009245
 800912c:	08009245 	.word	0x08009245
 8009130:	08009245 	.word	0x08009245
 8009134:	08009245 	.word	0x08009245
 8009138:	080091ad 	.word	0x080091ad
 800913c:	08009245 	.word	0x08009245
 8009140:	08009245 	.word	0x08009245
 8009144:	08009245 	.word	0x08009245
 8009148:	08009245 	.word	0x08009245
 800914c:	08009245 	.word	0x08009245
 8009150:	08009245 	.word	0x08009245
 8009154:	08009245 	.word	0x08009245
 8009158:	080091bd 	.word	0x080091bd
 800915c:	08009245 	.word	0x08009245
 8009160:	08009245 	.word	0x08009245
 8009164:	08009245 	.word	0x08009245
 8009168:	08009245 	.word	0x08009245
 800916c:	08009245 	.word	0x08009245
 8009170:	08009245 	.word	0x08009245
 8009174:	08009245 	.word	0x08009245
 8009178:	080091cd 	.word	0x080091cd
 800917c:	08009245 	.word	0x08009245
 8009180:	08009245 	.word	0x08009245
 8009184:	08009245 	.word	0x08009245
 8009188:	08009245 	.word	0x08009245
 800918c:	08009245 	.word	0x08009245
 8009190:	08009245 	.word	0x08009245
 8009194:	08009245 	.word	0x08009245
 8009198:	080091d3 	.word	0x080091d3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800919c:	f107 0320 	add.w	r3, r7, #32
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fd fb9b 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091aa:	e04e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fd fcff 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091ba:	e046      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091bc:	f107 0308 	add.w	r3, r7, #8
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fd fe63 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091ca:	e03e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80091cc:	4b76      	ldr	r3, [pc, #472]	@ (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80091ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091d0:	e03b      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091d2:	4b74      	ldr	r3, [pc, #464]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80091d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80091dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091de:	4b71      	ldr	r3, [pc, #452]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d10c      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80091ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d109      	bne.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091f0:	4b6c      	ldr	r3, [pc, #432]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	4a6c      	ldr	r2, [pc, #432]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	637b      	str	r3, [r7, #52]	@ 0x34
 8009202:	e01e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009204:	4b67      	ldr	r3, [pc, #412]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800920c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009210:	d106      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009218:	d102      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800921a:	4b65      	ldr	r3, [pc, #404]	@ (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
 800921e:	e010      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009220:	4b60      	ldr	r3, [pc, #384]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800922e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009234:	d102      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009236:	4b5f      	ldr	r3, [pc, #380]	@ (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	e002      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009240:	e003      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009242:	e002      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009248:	bf00      	nop
          }
        }
        break;
 800924a:	e2d6      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800924c:	4b55      	ldr	r3, [pc, #340]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800924e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009252:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009256:	633b      	str	r3, [r7, #48]	@ 0x30
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800925e:	d031      	beq.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009266:	d866      	bhi.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	2bc0      	cmp	r3, #192	@ 0xc0
 800926c:	d027      	beq.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800926e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009270:	2bc0      	cmp	r3, #192	@ 0xc0
 8009272:	d860      	bhi.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	2b80      	cmp	r3, #128	@ 0x80
 8009278:	d019      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800927a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927c:	2b80      	cmp	r3, #128	@ 0x80
 800927e:	d85a      	bhi.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	2b40      	cmp	r3, #64	@ 0x40
 800928a:	d008      	beq.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800928c:	e053      	b.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800928e:	f107 0320 	add.w	r3, r7, #32
 8009292:	4618      	mov	r0, r3
 8009294:	f7fd fb22 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800929c:	e04e      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800929e:	f107 0314 	add.w	r3, r7, #20
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fd fc86 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092ac:	e046      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ae:	f107 0308 	add.w	r3, r7, #8
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fd fdea 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092bc:	e03e      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80092be:	4b3a      	ldr	r3, [pc, #232]	@ (80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80092c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092c2:	e03b      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092c4:	4b37      	ldr	r3, [pc, #220]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80092c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092ca:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092d0:	4b34      	ldr	r3, [pc, #208]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d10c      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092e2:	4b30      	ldr	r3, [pc, #192]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	08db      	lsrs	r3, r3, #3
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	4a2f      	ldr	r2, [pc, #188]	@ (80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80092ee:	fa22 f303 	lsr.w	r3, r2, r3
 80092f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092f4:	e01e      	b.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092f6:	4b2b      	ldr	r3, [pc, #172]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009302:	d106      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800930a:	d102      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800930c:	4b28      	ldr	r3, [pc, #160]	@ (80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009310:	e010      	b.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009312:	4b24      	ldr	r3, [pc, #144]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800931a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800931e:	d106      	bne.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009326:	d102      	bne.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009328:	4b22      	ldr	r3, [pc, #136]	@ (80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800932a:	637b      	str	r3, [r7, #52]	@ 0x34
 800932c:	e002      	b.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009332:	e003      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009334:	e002      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933a:	bf00      	nop
          }
        }
        break;
 800933c:	e25d      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800933e:	4b19      	ldr	r3, [pc, #100]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009344:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009348:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009350:	f7fb fad6 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8009354:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009356:	e250      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009358:	4b12      	ldr	r3, [pc, #72]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009364:	d10b      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800936c:	d107      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800936e:	f107 0314 	add.w	r3, r7, #20
 8009372:	4618      	mov	r0, r3
 8009374:	f7fd fc1e 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	637b      	str	r3, [r7, #52]	@ 0x34
 800937c:	e04f      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800937e:	4b09      	ldr	r3, [pc, #36]	@ (80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800938a:	d115      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009392:	d111      	bne.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	4618      	mov	r0, r3
 800939a:	f7fd fd77 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a2:	e03c      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80093a4:	44020c00 	.word	0x44020c00
 80093a8:	00bb8000 	.word	0x00bb8000
 80093ac:	03d09000 	.word	0x03d09000
 80093b0:	003d0900 	.word	0x003d0900
 80093b4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80093b8:	4b94      	ldr	r3, [pc, #592]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d10d      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80093ca:	d109      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093cc:	4b8f      	ldr	r3, [pc, #572]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	08db      	lsrs	r3, r3, #3
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	4a8e      	ldr	r2, [pc, #568]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80093d8:	fa22 f303 	lsr.w	r3, r2, r3
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093de:	e01e      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80093e0:	4b8a      	ldr	r3, [pc, #552]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093ec:	d106      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093f4:	d102      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80093f6:	4b87      	ldr	r3, [pc, #540]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80093f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093fa:	e010      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80093fc:	4b83      	ldr	r3, [pc, #524]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009408:	d106      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009410:	d102      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009412:	4b81      	ldr	r3, [pc, #516]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009414:	637b      	str	r3, [r7, #52]	@ 0x34
 8009416:	e002      	b.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800941c:	e1ed      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800941e:	e1ec      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009420:	4b7a      	ldr	r3, [pc, #488]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009426:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800942a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	2b00      	cmp	r3, #0
 8009430:	d103      	bne.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009432:	f7fb fa7b 	bl	800492c <HAL_RCC_GetPCLK3Freq>
 8009436:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009438:	e1df      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800943a:	4b74      	ldr	r3, [pc, #464]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009446:	d10b      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800944e:	d107      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009450:	f107 0314 	add.w	r3, r7, #20
 8009454:	4618      	mov	r0, r3
 8009456:	f7fd fbad 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34
 800945e:	e045      	b.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009460:	4b6a      	ldr	r3, [pc, #424]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800946c:	d10b      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800946e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009474:	d107      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009476:	f107 0308 	add.w	r3, r7, #8
 800947a:	4618      	mov	r0, r3
 800947c:	f7fd fd06 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
 8009484:	e032      	b.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009486:	4b61      	ldr	r3, [pc, #388]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b02      	cmp	r3, #2
 8009490:	d10d      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009498:	d109      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800949a:	4b5c      	ldr	r3, [pc, #368]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	08db      	lsrs	r3, r3, #3
 80094a0:	f003 0303 	and.w	r3, r3, #3
 80094a4:	4a5a      	ldr	r2, [pc, #360]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80094a6:	fa22 f303 	lsr.w	r3, r2, r3
 80094aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ac:	e01e      	b.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80094ae:	4b57      	ldr	r3, [pc, #348]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ba:	d106      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094c2:	d102      	bne.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80094c4:	4b53      	ldr	r3, [pc, #332]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80094c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c8:	e010      	b.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80094ca:	4b50      	ldr	r3, [pc, #320]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094d6:	d106      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80094de:	d102      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80094e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e4:	e002      	b.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ea:	e186      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094ec:	e185      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80094ee:	4b47      	ldr	r3, [pc, #284]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80094f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094f4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80094f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d103      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009500:	f7fb f9fe 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8009504:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009506:	e178      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009508:	4b40      	ldr	r3, [pc, #256]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009514:	d10b      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800951c:	d107      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800951e:	f107 0314 	add.w	r3, r7, #20
 8009522:	4618      	mov	r0, r3
 8009524:	f7fd fb46 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	637b      	str	r3, [r7, #52]	@ 0x34
 800952c:	e045      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800952e:	4b37      	ldr	r3, [pc, #220]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800953a:	d10b      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009542:	d107      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009544:	f107 0308 	add.w	r3, r7, #8
 8009548:	4618      	mov	r0, r3
 800954a:	f7fd fc9f 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
 8009552:	e032      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009554:	4b2d      	ldr	r3, [pc, #180]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b02      	cmp	r3, #2
 800955e:	d10d      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009562:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009566:	d109      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009568:	4b28      	ldr	r3, [pc, #160]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	08db      	lsrs	r3, r3, #3
 800956e:	f003 0303 	and.w	r3, r3, #3
 8009572:	4a27      	ldr	r2, [pc, #156]	@ (8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009574:	fa22 f303 	lsr.w	r3, r2, r3
 8009578:	637b      	str	r3, [r7, #52]	@ 0x34
 800957a:	e01e      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800957c:	4b23      	ldr	r3, [pc, #140]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009588:	d106      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009590:	d102      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009592:	4b20      	ldr	r3, [pc, #128]	@ (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
 8009596:	e010      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009598:	4b1c      	ldr	r3, [pc, #112]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a4:	d106      	bne.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80095ac:	d102      	bne.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80095ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80095b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b2:	e002      	b.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095b8:	e11f      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095ba:	e11e      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80095bc:	4b13      	ldr	r3, [pc, #76]	@ (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80095c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d85f      	bhi.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80095ce:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	080095e5 	.word	0x080095e5
 80095d8:	080095ed 	.word	0x080095ed
 80095dc:	080095fd 	.word	0x080095fd
 80095e0:	0800961d 	.word	0x0800961d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80095e4:	f7fb f95a 	bl	800489c <HAL_RCC_GetHCLKFreq>
 80095e8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80095ea:	e053      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ec:	f107 0320 	add.w	r3, r7, #32
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fd f973 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095fa:	e04b      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fc:	f107 0314 	add.w	r3, r7, #20
 8009600:	4618      	mov	r0, r3
 8009602:	f7fd fad7 	bl	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800960a:	e043      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800960c:	44020c00 	.word	0x44020c00
 8009610:	03d09000 	.word	0x03d09000
 8009614:	003d0900 	.word	0x003d0900
 8009618:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800961c:	4b79      	ldr	r3, [pc, #484]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800961e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009622:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009626:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009628:	4b76      	ldr	r3, [pc, #472]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b02      	cmp	r3, #2
 8009632:	d10c      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800963a:	4b72      	ldr	r3, [pc, #456]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	08db      	lsrs	r3, r3, #3
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	4a70      	ldr	r2, [pc, #448]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009646:	fa22 f303 	lsr.w	r3, r2, r3
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
 800964c:	e01e      	b.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800964e:	4b6d      	ldr	r3, [pc, #436]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800965a:	d106      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800965c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009662:	d102      	bne.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009664:	4b69      	ldr	r3, [pc, #420]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009666:	637b      	str	r3, [r7, #52]	@ 0x34
 8009668:	e010      	b.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800966a:	4b66      	ldr	r3, [pc, #408]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009676:	d106      	bne.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800967e:	d102      	bne.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009680:	4b63      	ldr	r3, [pc, #396]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009682:	637b      	str	r3, [r7, #52]	@ 0x34
 8009684:	e002      	b.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800968a:	e003      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800968c:	e002      	b.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009692:	bf00      	nop
          }
        }
        break;
 8009694:	e0b1      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009696:	4b5b      	ldr	r3, [pc, #364]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800969c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80096a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80096a2:	4b58      	ldr	r3, [pc, #352]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80096a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d106      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80096b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80096bc:	e01f      	b.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80096be:	4b51      	ldr	r3, [pc, #324]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80096c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096cc:	d106      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80096ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d0:	2b40      	cmp	r3, #64	@ 0x40
 80096d2:	d103      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80096d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80096d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096da:	e010      	b.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80096dc:	4b49      	ldr	r3, [pc, #292]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e8:	d106      	bne.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80096ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ec:	2b80      	cmp	r3, #128	@ 0x80
 80096ee:	d103      	bne.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80096f0:	f248 0312 	movw	r3, #32786	@ 0x8012
 80096f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096f6:	e002      	b.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80096fc:	e07d      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096fe:	e07c      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009700:	4b40      	ldr	r3, [pc, #256]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009706:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800970a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800970c:	4b3d      	ldr	r3, [pc, #244]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009718:	d105      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	2b00      	cmp	r3, #0
 800971e:	d102      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009720:	4b3c      	ldr	r3, [pc, #240]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
 8009724:	e031      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009726:	4b37      	ldr	r3, [pc, #220]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800972e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009732:	d10a      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009736:	2b10      	cmp	r3, #16
 8009738:	d107      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800973a:	f107 0320 	add.w	r3, r7, #32
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd f8cc 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	637b      	str	r3, [r7, #52]	@ 0x34
 8009748:	e01f      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800974a:	4b2e      	ldr	r3, [pc, #184]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800974c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b02      	cmp	r3, #2
 8009756:	d106      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	2b20      	cmp	r3, #32
 800975c:	d103      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800975e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009762:	637b      	str	r3, [r7, #52]	@ 0x34
 8009764:	e011      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009766:	4b27      	ldr	r3, [pc, #156]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800976c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009770:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009774:	d106      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	2b30      	cmp	r3, #48	@ 0x30
 800977a:	d103      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800977c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
 8009782:	e002      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009788:	e037      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800978a:	e036      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800978c:	4b1d      	ldr	r3, [pc, #116]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800978e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009792:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009796:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	2b10      	cmp	r3, #16
 800979c:	d107      	bne.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800979e:	f107 0320 	add.w	r3, r7, #32
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fd f89a 	bl	80068dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80097ac:	e025      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80097ae:	4b15      	ldr	r3, [pc, #84]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ba:	d10a      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80097bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d107      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fd fb60 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d0:	e00f      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80097d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097de:	d105      	bne.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80097e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e2:	2b30      	cmp	r3, #48	@ 0x30
 80097e4:	d102      	bne.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80097e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80097e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ea:	e002      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 80097f0:	e003      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80097f2:	e002      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097f8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 80097fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	373c      	adds	r7, #60	@ 0x3c
 8009800:	46bd      	mov	sp, r7
 8009802:	bd90      	pop	{r4, r7, pc}
 8009804:	44020c00 	.word	0x44020c00
 8009808:	03d09000 	.word	0x03d09000
 800980c:	003d0900 	.word	0x003d0900
 8009810:	007a1200 	.word	0x007a1200
 8009814:	02dc6c00 	.word	0x02dc6c00

08009818 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009820:	4b48      	ldr	r3, [pc, #288]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a47      	ldr	r2, [pc, #284]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 8009826:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800982a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800982c:	f7f8 f842 	bl	80018b4 <HAL_GetTick>
 8009830:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009832:	e008      	b.n	8009846 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009834:	f7f8 f83e 	bl	80018b4 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	2b02      	cmp	r3, #2
 8009840:	d901      	bls.n	8009846 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e07a      	b.n	800993c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009846:	4b3f      	ldr	r3, [pc, #252]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1f0      	bne.n	8009834 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009852:	4b3c      	ldr	r3, [pc, #240]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 8009854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009856:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6811      	ldr	r1, [r2, #0]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6852      	ldr	r2, [r2, #4]
 8009866:	0212      	lsls	r2, r2, #8
 8009868:	430a      	orrs	r2, r1
 800986a:	4936      	ldr	r1, [pc, #216]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 800986c:	4313      	orrs	r3, r2
 800986e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	3b01      	subs	r3, #1
 8009876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	3b01      	subs	r3, #1
 8009880:	025b      	lsls	r3, r3, #9
 8009882:	b29b      	uxth	r3, r3
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	3b01      	subs	r3, #1
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	3b01      	subs	r3, #1
 800989a:	061b      	lsls	r3, r3, #24
 800989c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098a0:	4928      	ldr	r1, [pc, #160]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80098a6:	4b27      	ldr	r3, [pc, #156]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098aa:	f023 020c 	bic.w	r2, r3, #12
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	4924      	ldr	r1, [pc, #144]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80098b8:	4b22      	ldr	r3, [pc, #136]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	f023 0220 	bic.w	r2, r3, #32
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	491f      	ldr	r1, [pc, #124]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80098ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	491c      	ldr	r1, [pc, #112]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80098d8:	4b1a      	ldr	r3, [pc, #104]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	4a19      	ldr	r2, [pc, #100]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098de:	f023 0310 	bic.w	r3, r3, #16
 80098e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80098e4:	4b17      	ldr	r3, [pc, #92]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6a12      	ldr	r2, [r2, #32]
 80098f4:	00d2      	lsls	r2, r2, #3
 80098f6:	4913      	ldr	r1, [pc, #76]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80098fc:	4b11      	ldr	r3, [pc, #68]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	4a10      	ldr	r2, [pc, #64]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 8009902:	f043 0310 	orr.w	r3, r3, #16
 8009906:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009908:	4b0e      	ldr	r3, [pc, #56]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a0d      	ldr	r2, [pc, #52]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 800990e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009912:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009914:	f7f7 ffce 	bl	80018b4 <HAL_GetTick>
 8009918:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800991a:	e008      	b.n	800992e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800991c:	f7f7 ffca 	bl	80018b4 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	2b02      	cmp	r3, #2
 8009928:	d901      	bls.n	800992e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e006      	b.n	800993c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800992e:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <RCCEx_PLL2_Config+0x12c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0f0      	beq.n	800991c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800993a:	2300      	movs	r3, #0

}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	44020c00 	.word	0x44020c00

08009948 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009950:	4b48      	ldr	r3, [pc, #288]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a47      	ldr	r2, [pc, #284]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800995a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800995c:	f7f7 ffaa 	bl	80018b4 <HAL_GetTick>
 8009960:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009962:	e008      	b.n	8009976 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009964:	f7f7 ffa6 	bl	80018b4 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e07a      	b.n	8009a6c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009976:	4b3f      	ldr	r3, [pc, #252]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f0      	bne.n	8009964 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009982:	4b3c      	ldr	r3, [pc, #240]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009986:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800998a:	f023 0303 	bic.w	r3, r3, #3
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	6811      	ldr	r1, [r2, #0]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6852      	ldr	r2, [r2, #4]
 8009996:	0212      	lsls	r2, r2, #8
 8009998:	430a      	orrs	r2, r1
 800999a:	4936      	ldr	r1, [pc, #216]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 800999c:	4313      	orrs	r3, r2
 800999e:	630b      	str	r3, [r1, #48]	@ 0x30
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	025b      	lsls	r3, r3, #9
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	041b      	lsls	r3, r3, #16
 80099be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	061b      	lsls	r3, r3, #24
 80099cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099d0:	4928      	ldr	r1, [pc, #160]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099d6:	4b27      	ldr	r3, [pc, #156]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 80099d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099da:	f023 020c 	bic.w	r2, r3, #12
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	4924      	ldr	r1, [pc, #144]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80099e8:	4b22      	ldr	r3, [pc, #136]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 80099ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ec:	f023 0220 	bic.w	r2, r3, #32
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	491f      	ldr	r1, [pc, #124]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80099fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 80099fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a02:	491c      	ldr	r1, [pc, #112]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009a08:	4b1a      	ldr	r3, [pc, #104]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a0c:	4a19      	ldr	r2, [pc, #100]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a0e:	f023 0310 	bic.w	r3, r3, #16
 8009a12:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009a14:	4b17      	ldr	r3, [pc, #92]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a1c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	6a12      	ldr	r2, [r2, #32]
 8009a24:	00d2      	lsls	r2, r2, #3
 8009a26:	4913      	ldr	r1, [pc, #76]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009a2c:	4b11      	ldr	r3, [pc, #68]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a30:	4a10      	ldr	r2, [pc, #64]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a32:	f043 0310 	orr.w	r3, r3, #16
 8009a36:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009a38:	4b0e      	ldr	r3, [pc, #56]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a42:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a44:	f7f7 ff36 	bl	80018b4 <HAL_GetTick>
 8009a48:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a4a:	e008      	b.n	8009a5e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a4c:	f7f7 ff32 	bl	80018b4 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d901      	bls.n	8009a5e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e006      	b.n	8009a6c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a5e:	4b05      	ldr	r3, [pc, #20]	@ (8009a74 <RCCEx_PLL3_Config+0x12c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0f0      	beq.n	8009a4c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	44020c00 	.word	0x44020c00

08009a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e049      	b.n	8009b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d106      	bne.n	8009aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f841 	bl	8009b26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f000 fa66 	bl	8009f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b2e:	bf00      	nop
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
	...

08009b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d001      	beq.n	8009b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e07c      	b.n	8009c4e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0201 	orr.w	r2, r2, #1
 8009b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a3a      	ldr	r2, [pc, #232]	@ (8009c5c <HAL_TIM_Base_Start_IT+0x120>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d04a      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a39      	ldr	r2, [pc, #228]	@ (8009c60 <HAL_TIM_Base_Start_IT+0x124>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d045      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b88:	d040      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b92:	d03b      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a32      	ldr	r2, [pc, #200]	@ (8009c64 <HAL_TIM_Base_Start_IT+0x128>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d036      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a31      	ldr	r2, [pc, #196]	@ (8009c68 <HAL_TIM_Base_Start_IT+0x12c>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d031      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a2f      	ldr	r2, [pc, #188]	@ (8009c6c <HAL_TIM_Base_Start_IT+0x130>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d02c      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8009c70 <HAL_TIM_Base_Start_IT+0x134>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d027      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8009c74 <HAL_TIM_Base_Start_IT+0x138>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d022      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a2b      	ldr	r2, [pc, #172]	@ (8009c78 <HAL_TIM_Base_Start_IT+0x13c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d01d      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a29      	ldr	r2, [pc, #164]	@ (8009c7c <HAL_TIM_Base_Start_IT+0x140>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d018      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a28      	ldr	r2, [pc, #160]	@ (8009c80 <HAL_TIM_Base_Start_IT+0x144>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d013      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a26      	ldr	r2, [pc, #152]	@ (8009c84 <HAL_TIM_Base_Start_IT+0x148>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d00e      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a25      	ldr	r2, [pc, #148]	@ (8009c88 <HAL_TIM_Base_Start_IT+0x14c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d009      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a23      	ldr	r2, [pc, #140]	@ (8009c8c <HAL_TIM_Base_Start_IT+0x150>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d004      	beq.n	8009c0c <HAL_TIM_Base_Start_IT+0xd0>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a22      	ldr	r2, [pc, #136]	@ (8009c90 <HAL_TIM_Base_Start_IT+0x154>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d115      	bne.n	8009c38 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	4b20      	ldr	r3, [pc, #128]	@ (8009c94 <HAL_TIM_Base_Start_IT+0x158>)
 8009c14:	4013      	ands	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b06      	cmp	r3, #6
 8009c1c:	d015      	beq.n	8009c4a <HAL_TIM_Base_Start_IT+0x10e>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c24:	d011      	beq.n	8009c4a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f042 0201 	orr.w	r2, r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c36:	e008      	b.n	8009c4a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	e000      	b.n	8009c4c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	40012c00 	.word	0x40012c00
 8009c60:	50012c00 	.word	0x50012c00
 8009c64:	40000400 	.word	0x40000400
 8009c68:	50000400 	.word	0x50000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	50000800 	.word	0x50000800
 8009c74:	40000c00 	.word	0x40000c00
 8009c78:	50000c00 	.word	0x50000c00
 8009c7c:	40013400 	.word	0x40013400
 8009c80:	50013400 	.word	0x50013400
 8009c84:	40001800 	.word	0x40001800
 8009c88:	50001800 	.word	0x50001800
 8009c8c:	40014000 	.word	0x40014000
 8009c90:	50014000 	.word	0x50014000
 8009c94:	00010007 	.word	0x00010007

08009c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d020      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f003 0302 	and.w	r3, r3, #2
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d01b      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f06f 0202 	mvn.w	r2, #2
 8009ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f931 	bl	8009f4a <HAL_TIM_IC_CaptureCallback>
 8009ce8:	e005      	b.n	8009cf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f923 	bl	8009f36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f934 	bl	8009f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d020      	beq.n	8009d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d01b      	beq.n	8009d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0204 	mvn.w	r2, #4
 8009d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f90b 	bl	8009f4a <HAL_TIM_IC_CaptureCallback>
 8009d34:	e005      	b.n	8009d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f8fd 	bl	8009f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f90e 	bl	8009f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f003 0308 	and.w	r3, r3, #8
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d020      	beq.n	8009d94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f003 0308 	and.w	r3, r3, #8
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d01b      	beq.n	8009d94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f06f 0208 	mvn.w	r2, #8
 8009d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2204      	movs	r2, #4
 8009d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	f003 0303 	and.w	r3, r3, #3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f8e5 	bl	8009f4a <HAL_TIM_IC_CaptureCallback>
 8009d80:	e005      	b.n	8009d8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f8d7 	bl	8009f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f8e8 	bl	8009f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f003 0310 	and.w	r3, r3, #16
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d020      	beq.n	8009de0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01b      	beq.n	8009de0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f06f 0210 	mvn.w	r2, #16
 8009db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2208      	movs	r2, #8
 8009db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f8bf 	bl	8009f4a <HAL_TIM_IC_CaptureCallback>
 8009dcc:	e005      	b.n	8009dda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f8b1 	bl	8009f36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f8c2 	bl	8009f5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00c      	beq.n	8009e04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d007      	beq.n	8009e04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f06f 0201 	mvn.w	r2, #1
 8009dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7f7 f8ee 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d104      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00c      	beq.n	8009e32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f9df 	bl	800a1f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00c      	beq.n	8009e56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f9d7 	bl	800a204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00c      	beq.n	8009e7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d007      	beq.n	8009e7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f87c 	bl	8009f72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f003 0320 	and.w	r3, r3, #32
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00c      	beq.n	8009e9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f06f 0220 	mvn.w	r2, #32
 8009e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f99f 	bl	800a1dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f9ab 	bl	800a218 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00c      	beq.n	8009ee6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f9a3 	bl	800a22c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00c      	beq.n	8009f0a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d007      	beq.n	8009f0a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f99b 	bl	800a240 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00c      	beq.n	8009f2e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d007      	beq.n	8009f2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f993 	bl	800a254 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f52:	bf00      	nop
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f7a:	bf00      	nop
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
	...

08009f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a7a      	ldr	r2, [pc, #488]	@ (800a184 <TIM_Base_SetConfig+0x1fc>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d02b      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a79      	ldr	r2, [pc, #484]	@ (800a188 <TIM_Base_SetConfig+0x200>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d027      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fae:	d023      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fb6:	d01f      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a74      	ldr	r2, [pc, #464]	@ (800a18c <TIM_Base_SetConfig+0x204>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d01b      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a73      	ldr	r2, [pc, #460]	@ (800a190 <TIM_Base_SetConfig+0x208>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d017      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a72      	ldr	r2, [pc, #456]	@ (800a194 <TIM_Base_SetConfig+0x20c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d013      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a71      	ldr	r2, [pc, #452]	@ (800a198 <TIM_Base_SetConfig+0x210>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d00f      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a70      	ldr	r2, [pc, #448]	@ (800a19c <TIM_Base_SetConfig+0x214>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d00b      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a6f      	ldr	r2, [pc, #444]	@ (800a1a0 <TIM_Base_SetConfig+0x218>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d007      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a6e      	ldr	r2, [pc, #440]	@ (800a1a4 <TIM_Base_SetConfig+0x21c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d003      	beq.n	8009ff8 <TIM_Base_SetConfig+0x70>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a6d      	ldr	r2, [pc, #436]	@ (800a1a8 <TIM_Base_SetConfig+0x220>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d108      	bne.n	800a00a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4313      	orrs	r3, r2
 800a008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a5d      	ldr	r2, [pc, #372]	@ (800a184 <TIM_Base_SetConfig+0x1fc>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d05b      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a5c      	ldr	r2, [pc, #368]	@ (800a188 <TIM_Base_SetConfig+0x200>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d057      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a020:	d053      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a028:	d04f      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a57      	ldr	r2, [pc, #348]	@ (800a18c <TIM_Base_SetConfig+0x204>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d04b      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a56      	ldr	r2, [pc, #344]	@ (800a190 <TIM_Base_SetConfig+0x208>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d047      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a55      	ldr	r2, [pc, #340]	@ (800a194 <TIM_Base_SetConfig+0x20c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d043      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a54      	ldr	r2, [pc, #336]	@ (800a198 <TIM_Base_SetConfig+0x210>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d03f      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a53      	ldr	r2, [pc, #332]	@ (800a19c <TIM_Base_SetConfig+0x214>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d03b      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a52      	ldr	r2, [pc, #328]	@ (800a1a0 <TIM_Base_SetConfig+0x218>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d037      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a51      	ldr	r2, [pc, #324]	@ (800a1a4 <TIM_Base_SetConfig+0x21c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d033      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a50      	ldr	r2, [pc, #320]	@ (800a1a8 <TIM_Base_SetConfig+0x220>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d02f      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a4f      	ldr	r2, [pc, #316]	@ (800a1ac <TIM_Base_SetConfig+0x224>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d02b      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a4e      	ldr	r2, [pc, #312]	@ (800a1b0 <TIM_Base_SetConfig+0x228>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d027      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a4d      	ldr	r2, [pc, #308]	@ (800a1b4 <TIM_Base_SetConfig+0x22c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d023      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a4c      	ldr	r2, [pc, #304]	@ (800a1b8 <TIM_Base_SetConfig+0x230>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d01f      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a4b      	ldr	r2, [pc, #300]	@ (800a1bc <TIM_Base_SetConfig+0x234>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d01b      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a4a      	ldr	r2, [pc, #296]	@ (800a1c0 <TIM_Base_SetConfig+0x238>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d017      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a49      	ldr	r2, [pc, #292]	@ (800a1c4 <TIM_Base_SetConfig+0x23c>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d013      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a48      	ldr	r2, [pc, #288]	@ (800a1c8 <TIM_Base_SetConfig+0x240>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00f      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a47      	ldr	r2, [pc, #284]	@ (800a1cc <TIM_Base_SetConfig+0x244>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00b      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a46      	ldr	r2, [pc, #280]	@ (800a1d0 <TIM_Base_SetConfig+0x248>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d007      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a45      	ldr	r2, [pc, #276]	@ (800a1d4 <TIM_Base_SetConfig+0x24c>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_Base_SetConfig+0x142>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a44      	ldr	r2, [pc, #272]	@ (800a1d8 <TIM_Base_SetConfig+0x250>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d108      	bne.n	800a0dc <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a20      	ldr	r2, [pc, #128]	@ (800a184 <TIM_Base_SetConfig+0x1fc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d023      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a1f      	ldr	r2, [pc, #124]	@ (800a188 <TIM_Base_SetConfig+0x200>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d01f      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a24      	ldr	r2, [pc, #144]	@ (800a1a4 <TIM_Base_SetConfig+0x21c>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d01b      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a23      	ldr	r2, [pc, #140]	@ (800a1a8 <TIM_Base_SetConfig+0x220>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d017      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a28      	ldr	r2, [pc, #160]	@ (800a1c4 <TIM_Base_SetConfig+0x23c>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d013      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a27      	ldr	r2, [pc, #156]	@ (800a1c8 <TIM_Base_SetConfig+0x240>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d00f      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a26      	ldr	r2, [pc, #152]	@ (800a1cc <TIM_Base_SetConfig+0x244>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d00b      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a25      	ldr	r2, [pc, #148]	@ (800a1d0 <TIM_Base_SetConfig+0x248>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d007      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a24      	ldr	r2, [pc, #144]	@ (800a1d4 <TIM_Base_SetConfig+0x24c>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d003      	beq.n	800a150 <TIM_Base_SetConfig+0x1c8>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a23      	ldr	r2, [pc, #140]	@ (800a1d8 <TIM_Base_SetConfig+0x250>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d103      	bne.n	800a158 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	691a      	ldr	r2, [r3, #16]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b01      	cmp	r3, #1
 800a168:	d105      	bne.n	800a176 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	f023 0201 	bic.w	r2, r3, #1
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	611a      	str	r2, [r3, #16]
  }
}
 800a176:	bf00      	nop
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	40012c00 	.word	0x40012c00
 800a188:	50012c00 	.word	0x50012c00
 800a18c:	40000400 	.word	0x40000400
 800a190:	50000400 	.word	0x50000400
 800a194:	40000800 	.word	0x40000800
 800a198:	50000800 	.word	0x50000800
 800a19c:	40000c00 	.word	0x40000c00
 800a1a0:	50000c00 	.word	0x50000c00
 800a1a4:	40013400 	.word	0x40013400
 800a1a8:	50013400 	.word	0x50013400
 800a1ac:	40001800 	.word	0x40001800
 800a1b0:	50001800 	.word	0x50001800
 800a1b4:	40001c00 	.word	0x40001c00
 800a1b8:	50001c00 	.word	0x50001c00
 800a1bc:	40002000 	.word	0x40002000
 800a1c0:	50002000 	.word	0x50002000
 800a1c4:	40014000 	.word	0x40014000
 800a1c8:	50014000 	.word	0x50014000
 800a1cc:	40014400 	.word	0x40014400
 800a1d0:	50014400 	.word	0x50014400
 800a1d4:	40014800 	.word	0x40014800
 800a1d8:	50014800 	.word	0x50014800

0800a1dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e042      	b.n	800a300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a280:	2b00      	cmp	r3, #0
 800a282:	d106      	bne.n	800a292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7f7 f84d 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2224      	movs	r2, #36	@ 0x24
 800a296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f022 0201 	bic.w	r2, r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fab4 	bl	800a820 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f8c3 	bl	800a444 <UART_SetConfig>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d101      	bne.n	800a2c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e01b      	b.n	800a300 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f042 0201 	orr.w	r2, r2, #1
 800a2f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fb33 	bl	800a964 <UART_CheckIdleState>
 800a2fe:	4603      	mov	r3, r0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	@ 0x28
 800a30c:	af02      	add	r7, sp, #8
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	4613      	mov	r3, r2
 800a316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a31e:	2b20      	cmp	r3, #32
 800a320:	f040 808b 	bne.w	800a43a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <HAL_UART_Transmit+0x28>
 800a32a:	88fb      	ldrh	r3, [r7, #6]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e083      	b.n	800a43c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a33e:	2b80      	cmp	r3, #128	@ 0x80
 800a340:	d107      	bne.n	800a352 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a350:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2221      	movs	r2, #33	@ 0x21
 800a35e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a362:	f7f7 faa7 	bl	80018b4 <HAL_GetTick>
 800a366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	88fa      	ldrh	r2, [r7, #6]
 800a36c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	88fa      	ldrh	r2, [r7, #6]
 800a374:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a380:	d108      	bne.n	800a394 <HAL_UART_Transmit+0x8c>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d104      	bne.n	800a394 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	61bb      	str	r3, [r7, #24]
 800a392:	e003      	b.n	800a39c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a39c:	e030      	b.n	800a400 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2180      	movs	r1, #128	@ 0x80
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 fb85 	bl	800aab8 <UART_WaitOnFlagUntilTimeout>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d005      	beq.n	800a3c0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2220      	movs	r2, #32
 800a3b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e03d      	b.n	800a43c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10b      	bne.n	800a3de <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	3302      	adds	r3, #2
 800a3da:	61bb      	str	r3, [r7, #24]
 800a3dc:	e007      	b.n	800a3ee <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	781a      	ldrb	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a406:	b29b      	uxth	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1c8      	bne.n	800a39e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2200      	movs	r2, #0
 800a414:	2140      	movs	r1, #64	@ 0x40
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 fb4e 	bl	800aab8 <UART_WaitOnFlagUntilTimeout>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2220      	movs	r2, #32
 800a426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e006      	b.n	800a43c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2220      	movs	r2, #32
 800a432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	e000      	b.n	800a43c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a43a:	2302      	movs	r3, #2
  }
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3720      	adds	r7, #32
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a448:	b094      	sub	sp, #80	@ 0x50
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	4b78      	ldr	r3, [pc, #480]	@ (800a63c <UART_SetConfig+0x1f8>)
 800a45a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	431a      	orrs	r2, r3
 800a466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	431a      	orrs	r2, r3
 800a46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	4313      	orrs	r3, r2
 800a472:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4971      	ldr	r1, [pc, #452]	@ (800a640 <UART_SetConfig+0x1fc>)
 800a47c:	4019      	ands	r1, r3
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a484:	430b      	orrs	r3, r1
 800a486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a494:	68d9      	ldr	r1, [r3, #12]
 800a496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	ea40 0301 	orr.w	r3, r0, r1
 800a49e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b64      	ldr	r3, [pc, #400]	@ (800a63c <UART_SetConfig+0x1f8>)
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d009      	beq.n	800a4c4 <UART_SetConfig+0x80>
 800a4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	4b63      	ldr	r3, [pc, #396]	@ (800a644 <UART_SetConfig+0x200>)
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d004      	beq.n	800a4c4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4bc:	6a1a      	ldr	r2, [r3, #32]
 800a4be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a4ce:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e2:	f023 000f 	bic.w	r0, r3, #15
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	ea40 0301 	orr.w	r3, r0, r1
 800a4f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	4b53      	ldr	r3, [pc, #332]	@ (800a648 <UART_SetConfig+0x204>)
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d102      	bne.n	800a504 <UART_SetConfig+0xc0>
 800a4fe:	2301      	movs	r3, #1
 800a500:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a502:	e066      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	4b50      	ldr	r3, [pc, #320]	@ (800a64c <UART_SetConfig+0x208>)
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d102      	bne.n	800a514 <UART_SetConfig+0xd0>
 800a50e:	2302      	movs	r3, #2
 800a510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a512:	e05e      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	4b4d      	ldr	r3, [pc, #308]	@ (800a650 <UART_SetConfig+0x20c>)
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d102      	bne.n	800a524 <UART_SetConfig+0xe0>
 800a51e:	2304      	movs	r3, #4
 800a520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a522:	e056      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	4b4a      	ldr	r3, [pc, #296]	@ (800a654 <UART_SetConfig+0x210>)
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d102      	bne.n	800a534 <UART_SetConfig+0xf0>
 800a52e:	2308      	movs	r3, #8
 800a530:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a532:	e04e      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	4b47      	ldr	r3, [pc, #284]	@ (800a658 <UART_SetConfig+0x214>)
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d102      	bne.n	800a544 <UART_SetConfig+0x100>
 800a53e:	2310      	movs	r3, #16
 800a540:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a542:	e046      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	4b44      	ldr	r3, [pc, #272]	@ (800a65c <UART_SetConfig+0x218>)
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d102      	bne.n	800a554 <UART_SetConfig+0x110>
 800a54e:	2320      	movs	r3, #32
 800a550:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a552:	e03e      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	4b41      	ldr	r3, [pc, #260]	@ (800a660 <UART_SetConfig+0x21c>)
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d102      	bne.n	800a564 <UART_SetConfig+0x120>
 800a55e:	2340      	movs	r3, #64	@ 0x40
 800a560:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a562:	e036      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	4b3e      	ldr	r3, [pc, #248]	@ (800a664 <UART_SetConfig+0x220>)
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d102      	bne.n	800a574 <UART_SetConfig+0x130>
 800a56e:	2380      	movs	r3, #128	@ 0x80
 800a570:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a572:	e02e      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	4b3b      	ldr	r3, [pc, #236]	@ (800a668 <UART_SetConfig+0x224>)
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d103      	bne.n	800a586 <UART_SetConfig+0x142>
 800a57e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a582:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a584:	e025      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b38      	ldr	r3, [pc, #224]	@ (800a66c <UART_SetConfig+0x228>)
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d103      	bne.n	800a598 <UART_SetConfig+0x154>
 800a590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a594:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a596:	e01c      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	4b34      	ldr	r3, [pc, #208]	@ (800a670 <UART_SetConfig+0x22c>)
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d103      	bne.n	800a5aa <UART_SetConfig+0x166>
 800a5a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5a8:	e013      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b31      	ldr	r3, [pc, #196]	@ (800a674 <UART_SetConfig+0x230>)
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d103      	bne.n	800a5bc <UART_SetConfig+0x178>
 800a5b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ba:	e00a      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a63c <UART_SetConfig+0x1f8>)
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d103      	bne.n	800a5ce <UART_SetConfig+0x18a>
 800a5c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5cc:	e001      	b.n	800a5d2 <UART_SetConfig+0x18e>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	4b19      	ldr	r3, [pc, #100]	@ (800a63c <UART_SetConfig+0x1f8>)
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d005      	beq.n	800a5e8 <UART_SetConfig+0x1a4>
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	4b18      	ldr	r3, [pc, #96]	@ (800a644 <UART_SetConfig+0x200>)
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	f040 8094 	bne.w	800a710 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a5e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	623b      	str	r3, [r7, #32]
 800a5ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a5f4:	f7fc fdb6 	bl	8007164 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5f8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80f7 	beq.w	800a7f0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a606:	4a1c      	ldr	r2, [pc, #112]	@ (800a678 <UART_SetConfig+0x234>)
 800a608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a60c:	461a      	mov	r2, r3
 800a60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a610:	fbb3 f3f2 	udiv	r3, r3, r2
 800a614:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	4613      	mov	r3, r2
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	4413      	add	r3, r2
 800a620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a622:	429a      	cmp	r2, r3
 800a624:	d305      	bcc.n	800a632 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a62c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a62e:	429a      	cmp	r2, r3
 800a630:	d924      	bls.n	800a67c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a638:	e069      	b.n	800a70e <UART_SetConfig+0x2ca>
 800a63a:	bf00      	nop
 800a63c:	44002400 	.word	0x44002400
 800a640:	cfff69f3 	.word	0xcfff69f3
 800a644:	54002400 	.word	0x54002400
 800a648:	40013800 	.word	0x40013800
 800a64c:	40004400 	.word	0x40004400
 800a650:	40004800 	.word	0x40004800
 800a654:	40004c00 	.word	0x40004c00
 800a658:	40005000 	.word	0x40005000
 800a65c:	40006400 	.word	0x40006400
 800a660:	40007800 	.word	0x40007800
 800a664:	40007c00 	.word	0x40007c00
 800a668:	40008000 	.word	0x40008000
 800a66c:	40006800 	.word	0x40006800
 800a670:	40006c00 	.word	0x40006c00
 800a674:	40008400 	.word	0x40008400
 800a678:	0800db1c 	.word	0x0800db1c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a67e:	2200      	movs	r2, #0
 800a680:	61bb      	str	r3, [r7, #24]
 800a682:	61fa      	str	r2, [r7, #28]
 800a684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a688:	4a64      	ldr	r2, [pc, #400]	@ (800a81c <UART_SetConfig+0x3d8>)
 800a68a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	2200      	movs	r2, #0
 800a692:	613b      	str	r3, [r7, #16]
 800a694:	617a      	str	r2, [r7, #20]
 800a696:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a69a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a69e:	f7f5 ff1b 	bl	80004d8 <__aeabi_uldivmod>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	f04f 0200 	mov.w	r2, #0
 800a6ae:	f04f 0300 	mov.w	r3, #0
 800a6b2:	020b      	lsls	r3, r1, #8
 800a6b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6b8:	0202      	lsls	r2, r0, #8
 800a6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6bc:	6849      	ldr	r1, [r1, #4]
 800a6be:	0849      	lsrs	r1, r1, #1
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	eb12 0804 	adds.w	r8, r2, r4
 800a6ca:	eb43 0905 	adc.w	r9, r3, r5
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	60bb      	str	r3, [r7, #8]
 800a6d6:	60fa      	str	r2, [r7, #12]
 800a6d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6dc:	4640      	mov	r0, r8
 800a6de:	4649      	mov	r1, r9
 800a6e0:	f7f5 fefa 	bl	80004d8 <__aeabi_uldivmod>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6f2:	d308      	bcc.n	800a706 <UART_SetConfig+0x2c2>
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6fa:	d204      	bcs.n	800a706 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a702:	60da      	str	r2, [r3, #12]
 800a704:	e003      	b.n	800a70e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a70c:	e070      	b.n	800a7f0 <UART_SetConfig+0x3ac>
 800a70e:	e06f      	b.n	800a7f0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a718:	d13c      	bne.n	800a794 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a71a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a71c:	2200      	movs	r2, #0
 800a71e:	603b      	str	r3, [r7, #0]
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a726:	f7fc fd1d 	bl	8007164 <HAL_RCCEx_GetPeriphCLKFreq>
 800a72a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a72c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d05e      	beq.n	800a7f0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a736:	4a39      	ldr	r2, [pc, #228]	@ (800a81c <UART_SetConfig+0x3d8>)
 800a738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a740:	fbb3 f3f2 	udiv	r3, r3, r2
 800a744:	005a      	lsls	r2, r3, #1
 800a746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	085b      	lsrs	r3, r3, #1
 800a74c:	441a      	add	r2, r3
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	fbb2 f3f3 	udiv	r3, r2, r3
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75a:	2b0f      	cmp	r3, #15
 800a75c:	d916      	bls.n	800a78c <UART_SetConfig+0x348>
 800a75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a764:	d212      	bcs.n	800a78c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f023 030f 	bic.w	r3, r3, #15
 800a76e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a77e:	4313      	orrs	r3, r2
 800a780:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a788:	60da      	str	r2, [r3, #12]
 800a78a:	e031      	b.n	800a7f0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a792:	e02d      	b.n	800a7f0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a796:	2200      	movs	r2, #0
 800a798:	469a      	mov	sl, r3
 800a79a:	4693      	mov	fp, r2
 800a79c:	4650      	mov	r0, sl
 800a79e:	4659      	mov	r1, fp
 800a7a0:	f7fc fce0 	bl	8007164 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7a4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d021      	beq.n	800a7f0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a81c <UART_SetConfig+0x3d8>)
 800a7b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	441a      	add	r2, r3
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d2:	2b0f      	cmp	r3, #15
 800a7d4:	d909      	bls.n	800a7ea <UART_SetConfig+0x3a6>
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7dc:	d205      	bcs.n	800a7ea <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60da      	str	r2, [r3, #12]
 800a7e8:	e002      	b.n	800a7f0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a802:	2200      	movs	r2, #0
 800a804:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a808:	2200      	movs	r2, #0
 800a80a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a80c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a810:	4618      	mov	r0, r3
 800a812:	3750      	adds	r7, #80	@ 0x50
 800a814:	46bd      	mov	sp, r7
 800a816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a81a:	bf00      	nop
 800a81c:	0800db1c 	.word	0x0800db1c

0800a820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82c:	f003 0308 	and.w	r3, r3, #8
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00a      	beq.n	800a84a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a870:	f003 0302 	and.w	r3, r3, #2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00a      	beq.n	800a88e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a892:	f003 0304 	and.w	r3, r3, #4
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00a      	beq.n	800a8d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01a      	beq.n	800a936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a91a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a91e:	d10a      	bne.n	800a936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	430a      	orrs	r2, r1
 800a934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a93a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	605a      	str	r2, [r3, #4]
  }
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b098      	sub	sp, #96	@ 0x60
 800a968:	af02      	add	r7, sp, #8
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a974:	f7f6 ff9e 	bl	80018b4 <HAL_GetTick>
 800a978:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0308 	and.w	r3, r3, #8
 800a984:	2b08      	cmp	r3, #8
 800a986:	d12f      	bne.n	800a9e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a988:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a990:	2200      	movs	r2, #0
 800a992:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f88e 	bl	800aab8 <UART_WaitOnFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d022      	beq.n	800a9e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e6      	bne.n	800a9a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e063      	b.n	800aab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0304 	and.w	r3, r3, #4
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d149      	bne.n	800aa8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f857 	bl	800aab8 <UART_WaitOnFlagUntilTimeout>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d03c      	beq.n	800aa8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e6      	bne.n	800aa10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3308      	adds	r3, #8
 800aa48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f023 0301 	bic.w	r3, r3, #1
 800aa58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3308      	adds	r3, #8
 800aa60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa62:	61fa      	str	r2, [r7, #28]
 800aa64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa66:	69b9      	ldr	r1, [r7, #24]
 800aa68:	69fa      	ldr	r2, [r7, #28]
 800aa6a:	e841 2300 	strex	r3, r2, [r1]
 800aa6e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1e5      	bne.n	800aa42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2220      	movs	r2, #32
 800aa7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa86:	2303      	movs	r3, #3
 800aa88:	e012      	b.n	800aab0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2220      	movs	r2, #32
 800aa8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3758      	adds	r7, #88	@ 0x58
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	4613      	mov	r3, r2
 800aac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aac8:	e04f      	b.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d04b      	beq.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad2:	f7f6 feef 	bl	80018b4 <HAL_GetTick>
 800aad6:	4602      	mov	r2, r0
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d302      	bcc.n	800aae8 <UART_WaitOnFlagUntilTimeout+0x30>
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e04e      	b.n	800ab8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d037      	beq.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b80      	cmp	r3, #128	@ 0x80
 800aafe:	d034      	beq.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2b40      	cmp	r3, #64	@ 0x40
 800ab04:	d031      	beq.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	69db      	ldr	r3, [r3, #28]
 800ab0c:	f003 0308 	and.w	r3, r3, #8
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d110      	bne.n	800ab36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2208      	movs	r2, #8
 800ab1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f000 f838 	bl	800ab92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2208      	movs	r2, #8
 800ab26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e029      	b.n	800ab8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab44:	d111      	bne.n	800ab6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 f81e 	bl	800ab92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e00f      	b.n	800ab8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69da      	ldr	r2, [r3, #28]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	4013      	ands	r3, r2
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	bf0c      	ite	eq
 800ab7a:	2301      	moveq	r3, #1
 800ab7c:	2300      	movne	r3, #0
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	461a      	mov	r2, r3
 800ab82:	79fb      	ldrb	r3, [r7, #7]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d0a0      	beq.n	800aaca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b095      	sub	sp, #84	@ 0x54
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba2:	e853 3f00 	ldrex	r3, [r3]
 800aba6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800abba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e6      	bne.n	800ab9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3308      	adds	r3, #8
 800abd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	e853 3f00 	ldrex	r3, [r3]
 800abda:	61fb      	str	r3, [r7, #28]
   return(result);
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abe2:	f023 0301 	bic.w	r3, r3, #1
 800abe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3308      	adds	r3, #8
 800abee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e3      	bne.n	800abcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d118      	bne.n	800ac3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f023 0310 	bic.w	r3, r3, #16
 800ac20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac2a:	61bb      	str	r3, [r7, #24]
 800ac2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	6979      	ldr	r1, [r7, #20]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	613b      	str	r3, [r7, #16]
   return(result);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e6      	bne.n	800ac0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2220      	movs	r2, #32
 800ac42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ac52:	bf00      	nop
 800ac54:	3754      	adds	r7, #84	@ 0x54
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b085      	sub	sp, #20
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d101      	bne.n	800ac74 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac70:	2302      	movs	r3, #2
 800ac72:	e027      	b.n	800acc4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2224      	movs	r2, #36	@ 0x24
 800ac80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f022 0201 	bic.w	r2, r2, #1
 800ac9a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aca2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2220      	movs	r2, #32
 800acb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d101      	bne.n	800ace8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ace4:	2302      	movs	r3, #2
 800ace6:	e02d      	b.n	800ad44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2224      	movs	r2, #36	@ 0x24
 800acf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 0201 	bic.w	r2, r2, #1
 800ad0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f84f 	bl	800adc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d101      	bne.n	800ad64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e02d      	b.n	800adc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2224      	movs	r2, #36	@ 0x24
 800ad70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0201 	bic.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f811 	bl	800adc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800add4:	2b00      	cmp	r3, #0
 800add6:	d108      	bne.n	800adea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ade8:	e031      	b.n	800ae4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adea:	2308      	movs	r3, #8
 800adec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adee:	2308      	movs	r3, #8
 800adf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	0e5b      	lsrs	r3, r3, #25
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 0307 	and.w	r3, r3, #7
 800ae00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	0f5b      	lsrs	r3, r3, #29
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	f003 0307 	and.w	r3, r3, #7
 800ae10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	7b3a      	ldrb	r2, [r7, #12]
 800ae16:	4911      	ldr	r1, [pc, #68]	@ (800ae5c <UARTEx_SetNbDataToProcess+0x94>)
 800ae18:	5c8a      	ldrb	r2, [r1, r2]
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae1e:	7b3a      	ldrb	r2, [r7, #12]
 800ae20:	490f      	ldr	r1, [pc, #60]	@ (800ae60 <UARTEx_SetNbDataToProcess+0x98>)
 800ae22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae24:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	7b7a      	ldrb	r2, [r7, #13]
 800ae34:	4909      	ldr	r1, [pc, #36]	@ (800ae5c <UARTEx_SetNbDataToProcess+0x94>)
 800ae36:	5c8a      	ldrb	r2, [r1, r2]
 800ae38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae3c:	7b7a      	ldrb	r2, [r7, #13]
 800ae3e:	4908      	ldr	r1, [pc, #32]	@ (800ae60 <UARTEx_SetNbDataToProcess+0x98>)
 800ae40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae42:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	0800db34 	.word	0x0800db34
 800ae60:	0800db3c 	.word	0x0800db3c

0800ae64 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08e      	sub	sp, #56	@ 0x38
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ae72:	2234      	movs	r2, #52	@ 0x34
 800ae74:	2100      	movs	r1, #0
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f001 fe8a 	bl	800cb90 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	f1a3 0208 	sub.w	r2, r3, #8
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800aeb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	4413      	add	r3, r2
 800aebc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800aebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec0:	3b04      	subs	r3, #4
 800aec2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800aec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800aecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aed0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800aed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed4:	3b04      	subs	r3, #4
 800aed6:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800aed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800aeea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aeee:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800aef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef6:	3304      	adds	r3, #4
 800aef8:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800aefa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefc:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af00:	4a1f      	ldr	r2, [pc, #124]	@ (800af80 <_tx_byte_pool_create+0x11c>)
 800af02:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af0a:	f3ef 8310 	mrs	r3, PRIMASK
 800af0e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 800af10:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800af12:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800af14:	b672      	cpsid	i
#endif
    return(int_posture);
 800af16:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800af18:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4a19      	ldr	r2, [pc, #100]	@ (800af84 <_tx_byte_pool_create+0x120>)
 800af1e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800af20:	4b19      	ldr	r3, [pc, #100]	@ (800af88 <_tx_byte_pool_create+0x124>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800af28:	4a18      	ldr	r2, [pc, #96]	@ (800af8c <_tx_byte_pool_create+0x128>)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	631a      	str	r2, [r3, #48]	@ 0x30
 800af3a:	e011      	b.n	800af60 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800af3c:	4b13      	ldr	r3, [pc, #76]	@ (800af8c <_tx_byte_pool_create+0x128>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af46:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	69fa      	ldr	r2, [r7, #28]
 800af58:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6a3a      	ldr	r2, [r7, #32]
 800af5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800af60:	4b09      	ldr	r3, [pc, #36]	@ (800af88 <_tx_byte_pool_create+0x124>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3301      	adds	r3, #1
 800af66:	4a08      	ldr	r2, [pc, #32]	@ (800af88 <_tx_byte_pool_create+0x124>)
 800af68:	6013      	str	r3, [r2, #0]
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f383 8810 	msr	PRIMASK, r3
}
 800af74:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3738      	adds	r7, #56	@ 0x38
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	ffffeeee 	.word	0xffffeeee
 800af84:	42595445 	.word	0x42595445
 800af88:	200013c4 	.word	0x200013c4
 800af8c:	200013c0 	.word	0x200013c0

0800af90 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800af94:	f000 fb18 	bl	800b5c8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800af98:	f000 ff20 	bl	800bddc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800af9c:	4b12      	ldr	r3, [pc, #72]	@ (800afe8 <_tx_initialize_high_level+0x58>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]
 800afa2:	4b12      	ldr	r3, [pc, #72]	@ (800afec <_tx_initialize_high_level+0x5c>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800afa8:	4b11      	ldr	r3, [pc, #68]	@ (800aff0 <_tx_initialize_high_level+0x60>)
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	4b11      	ldr	r3, [pc, #68]	@ (800aff4 <_tx_initialize_high_level+0x64>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800afb4:	4b10      	ldr	r3, [pc, #64]	@ (800aff8 <_tx_initialize_high_level+0x68>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	4b10      	ldr	r3, [pc, #64]	@ (800affc <_tx_initialize_high_level+0x6c>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800afc0:	4b0f      	ldr	r3, [pc, #60]	@ (800b000 <_tx_initialize_high_level+0x70>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	4b0f      	ldr	r3, [pc, #60]	@ (800b004 <_tx_initialize_high_level+0x74>)
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800afcc:	4b0e      	ldr	r3, [pc, #56]	@ (800b008 <_tx_initialize_high_level+0x78>)
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	4b0e      	ldr	r3, [pc, #56]	@ (800b00c <_tx_initialize_high_level+0x7c>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800afd8:	4b0d      	ldr	r3, [pc, #52]	@ (800b010 <_tx_initialize_high_level+0x80>)
 800afda:	2200      	movs	r2, #0
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	4b0d      	ldr	r3, [pc, #52]	@ (800b014 <_tx_initialize_high_level+0x84>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
#endif
}
 800afe4:	bf00      	nop
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20001398 	.word	0x20001398
 800afec:	2000139c 	.word	0x2000139c
 800aff0:	200013a0 	.word	0x200013a0
 800aff4:	200013a4 	.word	0x200013a4
 800aff8:	200013a8 	.word	0x200013a8
 800affc:	200013ac 	.word	0x200013ac
 800b000:	200013b8 	.word	0x200013b8
 800b004:	200013bc 	.word	0x200013bc
 800b008:	200013c0 	.word	0x200013c0
 800b00c:	200013c4 	.word	0x200013c4
 800b010:	200013b0 	.word	0x200013b0
 800b014:	200013b4 	.word	0x200013b4

0800b018 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b01c:	4b10      	ldr	r3, [pc, #64]	@ (800b060 <_tx_initialize_kernel_enter+0x48>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800b024:	d00c      	beq.n	800b040 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b026:	4b0e      	ldr	r3, [pc, #56]	@ (800b060 <_tx_initialize_kernel_enter+0x48>)
 800b028:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800b02c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b02e:	f7f5 f92d 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b032:	f7ff ffad 	bl	800af90 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b036:	4b0b      	ldr	r3, [pc, #44]	@ (800b064 <_tx_initialize_kernel_enter+0x4c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3301      	adds	r3, #1
 800b03c:	4a09      	ldr	r2, [pc, #36]	@ (800b064 <_tx_initialize_kernel_enter+0x4c>)
 800b03e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b040:	4b07      	ldr	r3, [pc, #28]	@ (800b060 <_tx_initialize_kernel_enter+0x48>)
 800b042:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800b046:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b048:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <_tx_initialize_kernel_enter+0x50>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f5 fbcf 	bl	80007f0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b052:	4b03      	ldr	r3, [pc, #12]	@ (800b060 <_tx_initialize_kernel_enter+0x48>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b058:	f7f5 f954 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b05c:	bf00      	nop
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	2000000c 	.word	0x2000000c
 800b064:	20001468 	.word	0x20001468
 800b068:	200013c8 	.word	0x200013c8

0800b06c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08e      	sub	sp, #56	@ 0x38
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b076:	f3ef 8310 	mrs	r3, PRIMASK
 800b07a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b07c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b07e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b080:	b672      	cpsid	i
    return(int_posture);
 800b082:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800b084:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b08a:	4a33      	ldr	r2, [pc, #204]	@ (800b158 <_tx_semaphore_cleanup+0xec>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d158      	bne.n	800b142 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d152      	bne.n	800b142 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0a0:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d04c      	beq.n	800b142 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a2b      	ldr	r2, [pc, #172]	@ (800b15c <_tx_semaphore_cleanup+0xf0>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d147      	bne.n	800b142 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d043      	beq.n	800b142 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	1e5a      	subs	r2, r3, #1
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d8:	2200      	movs	r2, #0
 800b0da:	60da      	str	r2, [r3, #12]
 800b0dc:	e013      	b.n	800b106 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0e8:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0ee:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0f4:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d102      	bne.n	800b106 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b104:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b10a:	2b06      	cmp	r3, #6
 800b10c:	d119      	bne.n	800b142 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	220d      	movs	r2, #13
 800b112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b116:	4b12      	ldr	r3, [pc, #72]	@ (800b160 <_tx_semaphore_cleanup+0xf4>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3301      	adds	r3, #1
 800b11c:	4a10      	ldr	r2, [pc, #64]	@ (800b160 <_tx_semaphore_cleanup+0xf4>)
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b122:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f383 8810 	msr	PRIMASK, r3
}
 800b12a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fb8d 	bl	800b84c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b132:	f3ef 8310 	mrs	r3, PRIMASK
 800b136:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b138:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b13a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b13c:	b672      	cpsid	i
    return(int_posture);
 800b13e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b140:	637b      	str	r3, [r7, #52]	@ 0x34
 800b142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b144:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f383 8810 	msr	PRIMASK, r3
}
 800b14c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b14e:	bf00      	nop
 800b150:	3738      	adds	r7, #56	@ 0x38
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	0800b06d 	.word	0x0800b06d
 800b15c:	53454d41 	.word	0x53454d41
 800b160:	20001468 	.word	0x20001468

0800b164 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08a      	sub	sp, #40	@ 0x28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800b170:	221c      	movs	r2, #28
 800b172:	2100      	movs	r1, #0
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f001 fd0b 	bl	800cb90 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b186:	f3ef 8310 	mrs	r3, PRIMASK
 800b18a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b18c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b18e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b190:	b672      	cpsid	i
    return(int_posture);
 800b192:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800b194:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	4a18      	ldr	r2, [pc, #96]	@ (800b1fc <_tx_semaphore_create+0x98>)
 800b19a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800b19c:	4b18      	ldr	r3, [pc, #96]	@ (800b200 <_tx_semaphore_create+0x9c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d109      	bne.n	800b1b8 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800b1a4:	4a17      	ldr	r2, [pc, #92]	@ (800b204 <_tx_semaphore_create+0xa0>)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	619a      	str	r2, [r3, #24]
 800b1b6:	e011      	b.n	800b1dc <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800b1b8:	4b12      	ldr	r3, [pc, #72]	@ (800b204 <_tx_semaphore_create+0xa0>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	69fa      	ldr	r2, [r7, #28]
 800b1d4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6a3a      	ldr	r2, [r7, #32]
 800b1da:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800b1dc:	4b08      	ldr	r3, [pc, #32]	@ (800b200 <_tx_semaphore_create+0x9c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a07      	ldr	r2, [pc, #28]	@ (800b200 <_tx_semaphore_create+0x9c>)
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	f383 8810 	msr	PRIMASK, r3
}
 800b1f0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3728      	adds	r7, #40	@ 0x28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	53454d41 	.word	0x53454d41
 800b200:	2000139c 	.word	0x2000139c
 800b204:	20001398 	.word	0x20001398

0800b208 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08e      	sub	sp, #56	@ 0x38
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b212:	2300      	movs	r3, #0
 800b214:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b216:	f3ef 8310 	mrs	r3, PRIMASK
 800b21a:	623b      	str	r3, [r7, #32]
    return(posture);
 800b21c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b21e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b220:	b672      	cpsid	i
    return(int_posture);
 800b222:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800b224:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	1e5a      	subs	r2, r3, #1
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	609a      	str	r2, [r3, #8]
 800b238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	f383 8810 	msr	PRIMASK, r3
}
 800b242:	e068      	b.n	800b316 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d05d      	beq.n	800b306 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b24a:	4b35      	ldr	r3, [pc, #212]	@ (800b320 <_tx_semaphore_get+0x118>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d008      	beq.n	800b264 <_tx_semaphore_get+0x5c>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f383 8810 	msr	PRIMASK, r3
}
 800b25c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800b25e:	230d      	movs	r3, #13
 800b260:	637b      	str	r3, [r7, #52]	@ 0x34
 800b262:	e058      	b.n	800b316 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b264:	4b2f      	ldr	r3, [pc, #188]	@ (800b324 <_tx_semaphore_get+0x11c>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800b26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26c:	4a2e      	ldr	r2, [pc, #184]	@ (800b328 <_tx_semaphore_get+0x120>)
 800b26e:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b278:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b280:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d109      	bne.n	800b2a0 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b290:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800b292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b296:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800b298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b29c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b29e:	e011      	b.n	800b2c4 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2aa:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2b6:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2bc:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c2:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800b2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d0:	2206      	movs	r2, #6
 800b2d2:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b320 <_tx_semaphore_get+0x118>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a0e      	ldr	r2, [pc, #56]	@ (800b320 <_tx_semaphore_get+0x118>)
 800b2e8:	6013      	str	r3, [r2, #0]
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f383 8810 	msr	PRIMASK, r3
}
 800b2f4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b2f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b2f8:	f000 fba8 	bl	800ba4c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b302:	637b      	str	r3, [r7, #52]	@ 0x34
 800b304:	e007      	b.n	800b316 <_tx_semaphore_get+0x10e>
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f383 8810 	msr	PRIMASK, r3
}
 800b310:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800b312:	230d      	movs	r3, #13
 800b314:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800b316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3738      	adds	r7, #56	@ 0x38
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20001468 	.word	0x20001468
 800b324:	200013d0 	.word	0x200013d0
 800b328:	0800b06d 	.word	0x0800b06d

0800b32c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08c      	sub	sp, #48	@ 0x30
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b334:	f3ef 8310 	mrs	r3, PRIMASK
 800b338:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b33a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b33c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b33e:	b672      	cpsid	i
    return(int_posture);
 800b340:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800b342:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800b34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10a      	bne.n	800b366 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	609a      	str	r2, [r3, #8]
 800b35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	f383 8810 	msr	PRIMASK, r3
}
 800b364:	e033      	b.n	800b3ce <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800b36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36e:	3b01      	subs	r3, #1
 800b370:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	2b00      	cmp	r3, #0
 800b376:	d103      	bne.n	800b380 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	60da      	str	r2, [r3, #12]
 800b37e:	e00e      	b.n	800b39e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b384:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a3a      	ldr	r2, [r7, #32]
 800b38a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b390:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	69fa      	ldr	r2, [r7, #28]
 800b396:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	6a3a      	ldr	r2, [r7, #32]
 800b39c:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3a2:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800b3b2:	4b09      	ldr	r3, [pc, #36]	@ (800b3d8 <_tx_semaphore_put+0xac>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	4a07      	ldr	r2, [pc, #28]	@ (800b3d8 <_tx_semaphore_put+0xac>)
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f383 8810 	msr	PRIMASK, r3
}
 800b3c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b3c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b3ca:	f000 fa3f 	bl	800b84c <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3730      	adds	r7, #48	@ 0x30
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	20001468 	.word	0x20001468

0800b3dc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b092      	sub	sp, #72	@ 0x48
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	643b      	str	r3, [r7, #64]	@ 0x40
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b3ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3f0:	21ef      	movs	r1, #239	@ 0xef
 800b3f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b3f4:	f001 fbcc 	bl	800cb90 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800b3f8:	22b0      	movs	r2, #176	@ 0xb0
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f001 fbc7 	bl	800cb90 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b418:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b41e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b424:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b42a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b432:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b438:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b444:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b448:	3b01      	subs	r3, #1
 800b44a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b44c:	4413      	add	r3, r2
 800b44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b454:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800b456:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d007      	beq.n	800b46e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800b46c:	e006      	b.n	800b47c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b472:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b478:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2203      	movs	r2, #3
 800b480:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4a48      	ldr	r2, [pc, #288]	@ (800b5a8 <_tx_thread_create+0x1cc>)
 800b486:	655a      	str	r2, [r3, #84]	@ 0x54
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b48e:	4947      	ldr	r1, [pc, #284]	@ (800b5ac <_tx_thread_create+0x1d0>)
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f7f4 ff9d 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b496:	f3ef 8310 	mrs	r3, PRIMASK
 800b49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b49e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4a0:	b672      	cpsid	i
    return(int_posture);
 800b4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800b4a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4a41      	ldr	r2, [pc, #260]	@ (800b5b0 <_tx_thread_create+0x1d4>)
 800b4aa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800b4ac:	4b41      	ldr	r3, [pc, #260]	@ (800b5b4 <_tx_thread_create+0x1d8>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10b      	bne.n	800b4cc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800b4b4:	4a40      	ldr	r2, [pc, #256]	@ (800b5b8 <_tx_thread_create+0x1dc>)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800b4ca:	e016      	b.n	800b4fa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800b4cc:	4b3a      	ldr	r3, [pc, #232]	@ (800b5b8 <_tx_thread_create+0x1dc>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800b4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4d8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800b4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800b4fa:	4b2e      	ldr	r3, [pc, #184]	@ (800b5b4 <_tx_thread_create+0x1d8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	3301      	adds	r3, #1
 800b500:	4a2c      	ldr	r2, [pc, #176]	@ (800b5b4 <_tx_thread_create+0x1d8>)
 800b502:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b504:	4b2d      	ldr	r3, [pc, #180]	@ (800b5bc <_tx_thread_create+0x1e0>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3301      	adds	r3, #1
 800b50a:	4a2c      	ldr	r2, [pc, #176]	@ (800b5bc <_tx_thread_create+0x1e0>)
 800b50c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800b50e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b510:	2b01      	cmp	r3, #1
 800b512:	d129      	bne.n	800b568 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b514:	f3ef 8305 	mrs	r3, IPSR
 800b518:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800b51a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800b51c:	4b28      	ldr	r3, [pc, #160]	@ (800b5c0 <_tx_thread_create+0x1e4>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4313      	orrs	r3, r2
 800b522:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b526:	d30d      	bcc.n	800b544 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800b528:	4b26      	ldr	r3, [pc, #152]	@ (800b5c4 <_tx_thread_create+0x1e8>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800b52e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b530:	2b00      	cmp	r3, #0
 800b532:	d009      	beq.n	800b548 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800b534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b538:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b53a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b53e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b540:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b542:	e001      	b.n	800b548 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800b544:	2300      	movs	r3, #0
 800b546:	647b      	str	r3, [r7, #68]	@ 0x44
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	f383 8810 	msr	PRIMASK, r3
}
 800b552:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f000 f979 	bl	800b84c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800b55a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d01e      	beq.n	800b59e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800b560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b564:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b566:	e01a      	b.n	800b59e <_tx_thread_create+0x1c2>
 800b568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f383 8810 	msr	PRIMASK, r3
}
 800b572:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b574:	f3ef 8310 	mrs	r3, PRIMASK
 800b578:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b57a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b57c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b57e:	b672      	cpsid	i
    return(int_posture);
 800b580:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800b582:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800b584:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <_tx_thread_create+0x1e0>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3b01      	subs	r3, #1
 800b58a:	4a0c      	ldr	r2, [pc, #48]	@ (800b5bc <_tx_thread_create+0x1e0>)
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b590:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	f383 8810 	msr	PRIMASK, r3
}
 800b598:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b59a:	f000 f91d 	bl	800b7d8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3748      	adds	r7, #72	@ 0x48
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	0800bd21 	.word	0x0800bd21
 800b5ac:	0800b641 	.word	0x0800b641
 800b5b0:	54485244 	.word	0x54485244
 800b5b4:	200013dc 	.word	0x200013dc
 800b5b8:	200013d8 	.word	0x200013d8
 800b5bc:	20001468 	.word	0x20001468
 800b5c0:	2000000c 	.word	0x2000000c
 800b5c4:	200013d4 	.word	0x200013d4

0800b5c8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800b5cc:	4b12      	ldr	r3, [pc, #72]	@ (800b618 <_tx_thread_initialize+0x50>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800b5d2:	4b12      	ldr	r3, [pc, #72]	@ (800b61c <_tx_thread_initialize+0x54>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800b5d8:	4b11      	ldr	r3, [pc, #68]	@ (800b620 <_tx_thread_initialize+0x58>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b5de:	4b11      	ldr	r3, [pc, #68]	@ (800b624 <_tx_thread_initialize+0x5c>)
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800b5e4:	2280      	movs	r2, #128	@ 0x80
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	480f      	ldr	r0, [pc, #60]	@ (800b628 <_tx_thread_initialize+0x60>)
 800b5ea:	f001 fad1 	bl	800cb90 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b62c <_tx_thread_initialize+0x64>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800b5f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b630 <_tx_thread_initialize+0x68>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800b5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b634 <_tx_thread_initialize+0x6c>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800b600:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <_tx_thread_initialize+0x70>)
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800b606:	4b0d      	ldr	r3, [pc, #52]	@ (800b63c <_tx_thread_initialize+0x74>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800b60e:	4a0b      	ldr	r2, [pc, #44]	@ (800b63c <_tx_thread_initialize+0x74>)
 800b610:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800b612:	bf00      	nop
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	200013d0 	.word	0x200013d0
 800b61c:	200013d4 	.word	0x200013d4
 800b620:	200013e0 	.word	0x200013e0
 800b624:	200013e4 	.word	0x200013e4
 800b628:	200013e8 	.word	0x200013e8
 800b62c:	200013d8 	.word	0x200013d8
 800b630:	200013dc 	.word	0x200013dc
 800b634:	20001468 	.word	0x20001468
 800b638:	2000146c 	.word	0x2000146c
 800b63c:	20001470 	.word	0x20001470

0800b640 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b646:	4b21      	ldr	r3, [pc, #132]	@ (800b6cc <_tx_thread_shell_entry+0x8c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b650:	69fa      	ldr	r2, [r7, #28]
 800b652:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b654:	4610      	mov	r0, r2
 800b656:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800b658:	4b1d      	ldr	r3, [pc, #116]	@ (800b6d0 <_tx_thread_shell_entry+0x90>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800b660:	4b1b      	ldr	r3, [pc, #108]	@ (800b6d0 <_tx_thread_shell_entry+0x90>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	69f8      	ldr	r0, [r7, #28]
 800b666:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b668:	f3ef 8310 	mrs	r3, PRIMASK
 800b66c:	607b      	str	r3, [r7, #4]
    return(posture);
 800b66e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b670:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b672:	b672      	cpsid	i
    return(int_posture);
 800b674:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800b676:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	2201      	movs	r2, #1
 800b67c:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	2201      	movs	r2, #1
 800b682:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	2200      	movs	r2, #0
 800b688:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b68a:	4b12      	ldr	r3, [pc, #72]	@ (800b6d4 <_tx_thread_shell_entry+0x94>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3301      	adds	r3, #1
 800b690:	4a10      	ldr	r2, [pc, #64]	@ (800b6d4 <_tx_thread_shell_entry+0x94>)
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f383 8810 	msr	PRIMASK, r3
}
 800b69e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b6a0:	f3ef 8314 	mrs	r3, CONTROL
 800b6a4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800b6a6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800b6a8:	617b      	str	r3, [r7, #20]
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f023 0304 	bic.w	r3, r3, #4
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f383 8814 	msr	CONTROL, r3
}
 800b6bc:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b6be:	69f8      	ldr	r0, [r7, #28]
 800b6c0:	f000 f9c4 	bl	800ba4c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b6c4:	bf00      	nop
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	200013d0 	.word	0x200013d0
 800b6d0:	2000146c 	.word	0x2000146c
 800b6d4:	20001468 	.word	0x20001468

0800b6d8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08e      	sub	sp, #56	@ 0x38
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b6e8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6ea:	b672      	cpsid	i
    return(int_posture);
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b6ee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b6f0:	4b35      	ldr	r3, [pc, #212]	@ (800b7c8 <_tx_thread_sleep+0xf0>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800b6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d108      	bne.n	800b70e <_tx_thread_sleep+0x36>
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	f383 8810 	msr	PRIMASK, r3
}
 800b706:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b708:	2313      	movs	r3, #19
 800b70a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b70c:	e056      	b.n	800b7bc <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b70e:	f3ef 8305 	mrs	r3, IPSR
 800b712:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b714:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b716:	4b2d      	ldr	r3, [pc, #180]	@ (800b7cc <_tx_thread_sleep+0xf4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d008      	beq.n	800b732 <_tx_thread_sleep+0x5a>
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	f383 8810 	msr	PRIMASK, r3
}
 800b72a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b72c:	2313      	movs	r3, #19
 800b72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b730:	e044      	b.n	800b7bc <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800b732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b734:	4a26      	ldr	r2, [pc, #152]	@ (800b7d0 <_tx_thread_sleep+0xf8>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d108      	bne.n	800b74c <_tx_thread_sleep+0x74>
 800b73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f383 8810 	msr	PRIMASK, r3
}
 800b744:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b746:	2313      	movs	r3, #19
 800b748:	637b      	str	r3, [r7, #52]	@ 0x34
 800b74a:	e037      	b.n	800b7bc <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d108      	bne.n	800b764 <_tx_thread_sleep+0x8c>
 800b752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b754:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	f383 8810 	msr	PRIMASK, r3
}
 800b75c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800b75e:	2300      	movs	r3, #0
 800b760:	637b      	str	r3, [r7, #52]	@ 0x34
 800b762:	e02b      	b.n	800b7bc <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b764:	4b1b      	ldr	r3, [pc, #108]	@ (800b7d4 <_tx_thread_sleep+0xfc>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d008      	beq.n	800b77e <_tx_thread_sleep+0xa6>
 800b76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f383 8810 	msr	PRIMASK, r3
}
 800b776:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800b778:	2313      	movs	r3, #19
 800b77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b77c:	e01e      	b.n	800b7bc <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800b77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b780:	2204      	movs	r2, #4
 800b782:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b786:	2201      	movs	r2, #1
 800b788:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800b792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b798:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d4 <_tx_thread_sleep+0xfc>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3301      	adds	r3, #1
 800b79e:	4a0d      	ldr	r2, [pc, #52]	@ (800b7d4 <_tx_thread_sleep+0xfc>)
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f383 8810 	msr	PRIMASK, r3
}
 800b7ac:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b7ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7b0:	f000 f94c 	bl	800ba4c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800b7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3738      	adds	r7, #56	@ 0x38
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	200013d0 	.word	0x200013d0
 800b7cc:	2000000c 	.word	0x2000000c
 800b7d0:	20001518 	.word	0x20001518
 800b7d4:	20001468 	.word	0x20001468

0800b7d8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b089      	sub	sp, #36	@ 0x24
 800b7dc:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b7de:	4b17      	ldr	r3, [pc, #92]	@ (800b83c <_tx_thread_system_preempt_check+0x64>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d121      	bne.n	800b82e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b7ea:	4b15      	ldr	r3, [pc, #84]	@ (800b840 <_tx_thread_system_preempt_check+0x68>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b7f0:	4b14      	ldr	r3, [pc, #80]	@ (800b844 <_tx_thread_system_preempt_check+0x6c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d017      	beq.n	800b82e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b7fe:	4b12      	ldr	r3, [pc, #72]	@ (800b848 <_tx_thread_system_preempt_check+0x70>)
 800b800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b804:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b806:	f3ef 8305 	mrs	r3, IPSR
 800b80a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b80c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10c      	bne.n	800b82c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b812:	f3ef 8310 	mrs	r3, PRIMASK
 800b816:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b818:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b81a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b81c:	b662      	cpsie	i
}
 800b81e:	bf00      	nop
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f383 8810 	msr	PRIMASK, r3
}
 800b82a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b82c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b82e:	bf00      	nop
 800b830:	3724      	adds	r7, #36	@ 0x24
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	20001468 	.word	0x20001468
 800b840:	200013d0 	.word	0x200013d0
 800b844:	200013d4 	.word	0x200013d4
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b096      	sub	sp, #88	@ 0x58
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b854:	f3ef 8310 	mrs	r3, PRIMASK
 800b858:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800b85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800b85c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b85e:	b672      	cpsid	i
    return(int_posture);
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b862:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	334c      	adds	r3, #76	@ 0x4c
 800b870:	4618      	mov	r0, r3
 800b872:	f000 fb91 	bl	800bf98 <_tx_timer_system_deactivate>
 800b876:	e002      	b.n	800b87e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b87e:	4b6c      	ldr	r3, [pc, #432]	@ (800ba30 <_tx_thread_system_resume+0x1e4>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3b01      	subs	r3, #1
 800b884:	4a6a      	ldr	r2, [pc, #424]	@ (800ba30 <_tx_thread_system_resume+0x1e4>)
 800b886:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 8083 	bne.w	800b998 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 8097 	beq.w	800b9ca <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d172      	bne.n	800b98a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ae:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b8b0:	4a60      	ldr	r2, [pc, #384]	@ (800ba34 <_tx_thread_system_resume+0x1e8>)
 800b8b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800b8ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d154      	bne.n	800b96a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b8c0:	495c      	ldr	r1, [pc, #368]	@ (800ba34 <_tx_thread_system_resume+0x1e8>)
 800b8c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8da:	fa02 f303 	lsl.w	r3, r2, r3
 800b8de:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b8e0:	4b55      	ldr	r3, [pc, #340]	@ (800ba38 <_tx_thread_system_resume+0x1ec>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	4a53      	ldr	r2, [pc, #332]	@ (800ba38 <_tx_thread_system_resume+0x1ec>)
 800b8ea:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b8ec:	4b53      	ldr	r3, [pc, #332]	@ (800ba3c <_tx_thread_system_resume+0x1f0>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d269      	bcs.n	800b9ca <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b8f6:	4a51      	ldr	r2, [pc, #324]	@ (800ba3c <_tx_thread_system_resume+0x1f0>)
 800b8f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8fa:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b8fc:	4b50      	ldr	r3, [pc, #320]	@ (800ba40 <_tx_thread_system_resume+0x1f4>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b904:	2b00      	cmp	r3, #0
 800b906:	d103      	bne.n	800b910 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b908:	4a4d      	ldr	r2, [pc, #308]	@ (800ba40 <_tx_thread_system_resume+0x1f4>)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6013      	str	r3, [r2, #0]
 800b90e:	e05c      	b.n	800b9ca <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b914:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b916:	429a      	cmp	r2, r3
 800b918:	d257      	bcs.n	800b9ca <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b91a:	4a49      	ldr	r2, [pc, #292]	@ (800ba40 <_tx_thread_system_resume+0x1f4>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b926:	f383 8810 	msr	PRIMASK, r3
}
 800b92a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b92c:	4b40      	ldr	r3, [pc, #256]	@ (800ba30 <_tx_thread_system_resume+0x1e4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d174      	bne.n	800ba22 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b938:	4b42      	ldr	r3, [pc, #264]	@ (800ba44 <_tx_thread_system_resume+0x1f8>)
 800b93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b93e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b940:	f3ef 8305 	mrs	r3, IPSR
 800b944:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800b946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10c      	bne.n	800b966 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b94c:	f3ef 8310 	mrs	r3, PRIMASK
 800b950:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800b954:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b956:	b662      	cpsie	i
}
 800b958:	bf00      	nop
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	f383 8810 	msr	PRIMASK, r3
}
 800b964:	bf00      	nop
}
 800b966:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b968:	e05b      	b.n	800ba22 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b96a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b96e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b980:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b986:	621a      	str	r2, [r3, #32]
 800b988:	e01f      	b.n	800b9ca <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2203      	movs	r2, #3
 800b994:	631a      	str	r2, [r3, #48]	@ 0x30
 800b996:	e018      	b.n	800b9ca <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d014      	beq.n	800b9ca <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d010      	beq.n	800b9ca <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d106      	bne.n	800b9be <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9bc:	e005      	b.n	800b9ca <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2203      	movs	r2, #3
 800b9c8:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b9ca:	4b1f      	ldr	r3, [pc, #124]	@ (800ba48 <_tx_thread_system_resume+0x1fc>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	f383 8810 	msr	PRIMASK, r3
}
 800b9da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b9dc:	4b18      	ldr	r3, [pc, #96]	@ (800ba40 <_tx_thread_system_resume+0x1f4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d020      	beq.n	800ba28 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b9e6:	4b12      	ldr	r3, [pc, #72]	@ (800ba30 <_tx_thread_system_resume+0x1e4>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800b9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d11a      	bne.n	800ba28 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b9f2:	4b14      	ldr	r3, [pc, #80]	@ (800ba44 <_tx_thread_system_resume+0x1f8>)
 800b9f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b9fa:	f3ef 8305 	mrs	r3, IPSR
 800b9fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ba00:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10f      	bne.n	800ba26 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba06:	f3ef 8310 	mrs	r3, PRIMASK
 800ba0a:	613b      	str	r3, [r7, #16]
    return(posture);
 800ba0c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800ba0e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ba10:	b662      	cpsie	i
}
 800ba12:	bf00      	nop
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f383 8810 	msr	PRIMASK, r3
}
 800ba1e:	bf00      	nop
}
 800ba20:	e001      	b.n	800ba26 <_tx_thread_system_resume+0x1da>
                                return;
 800ba22:	bf00      	nop
 800ba24:	e000      	b.n	800ba28 <_tx_thread_system_resume+0x1dc>
 800ba26:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800ba28:	3758      	adds	r7, #88	@ 0x58
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	20001468 	.word	0x20001468
 800ba34:	200013e8 	.word	0x200013e8
 800ba38:	200013e0 	.word	0x200013e0
 800ba3c:	200013e4 	.word	0x200013e4
 800ba40:	200013d4 	.word	0x200013d4
 800ba44:	e000ed04 	.word	0xe000ed04
 800ba48:	200013d0 	.word	0x200013d0

0800ba4c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b09e      	sub	sp, #120	@ 0x78
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800ba54:	4b81      	ldr	r3, [pc, #516]	@ (800bc5c <_tx_thread_system_suspend+0x210>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800ba60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800ba62:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba64:	b672      	cpsid	i
    return(int_posture);
 800ba66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800ba68:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d112      	bne.n	800ba98 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba76:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800ba78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d008      	beq.n	800ba90 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800ba7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba84:	d004      	beq.n	800ba90 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	334c      	adds	r3, #76	@ 0x4c
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 fa22 	bl	800bed4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	69db      	ldr	r3, [r3, #28]
 800ba94:	4a72      	ldr	r2, [pc, #456]	@ (800bc60 <_tx_thread_system_suspend+0x214>)
 800ba96:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800ba98:	4b72      	ldr	r3, [pc, #456]	@ (800bc64 <_tx_thread_system_suspend+0x218>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	4a71      	ldr	r2, [pc, #452]	@ (800bc64 <_tx_thread_system_suspend+0x218>)
 800baa0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	f040 80a6 	bne.w	800bbf8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab6:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800babe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d015      	beq.n	800baf2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baca:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800bacc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bace:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bad0:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800bad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bad4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bad6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800bad8:	4a63      	ldr	r2, [pc, #396]	@ (800bc68 <_tx_thread_system_suspend+0x21c>)
 800bada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800badc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d157      	bne.n	800bb96 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800bae6:	4960      	ldr	r1, [pc, #384]	@ (800bc68 <_tx_thread_system_suspend+0x21c>)
 800bae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800baea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800baec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800baf0:	e051      	b.n	800bb96 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800baf2:	4a5d      	ldr	r2, [pc, #372]	@ (800bc68 <_tx_thread_system_suspend+0x21c>)
 800baf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800baf6:	2100      	movs	r1, #0
 800baf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800bafc:	2201      	movs	r2, #1
 800bafe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb00:	fa02 f303 	lsl.w	r3, r2, r3
 800bb04:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800bb06:	4b59      	ldr	r3, [pc, #356]	@ (800bc6c <_tx_thread_system_suspend+0x220>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb0c:	43db      	mvns	r3, r3
 800bb0e:	4013      	ands	r3, r2
 800bb10:	4a56      	ldr	r2, [pc, #344]	@ (800bc6c <_tx_thread_system_suspend+0x220>)
 800bb12:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800bb14:	2300      	movs	r3, #0
 800bb16:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800bb18:	4b54      	ldr	r3, [pc, #336]	@ (800bc6c <_tx_thread_system_suspend+0x220>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800bb1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d12b      	bne.n	800bb7c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bb24:	4b52      	ldr	r3, [pc, #328]	@ (800bc70 <_tx_thread_system_suspend+0x224>)
 800bb26:	2220      	movs	r2, #32
 800bb28:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800bb2a:	4b52      	ldr	r3, [pc, #328]	@ (800bc74 <_tx_thread_system_suspend+0x228>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb32:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb36:	f383 8810 	msr	PRIMASK, r3
}
 800bb3a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bb3c:	4b49      	ldr	r3, [pc, #292]	@ (800bc64 <_tx_thread_system_suspend+0x218>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800bb42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f040 8081 	bne.w	800bc4c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bb4a:	4b4b      	ldr	r3, [pc, #300]	@ (800bc78 <_tx_thread_system_suspend+0x22c>)
 800bb4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb50:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb52:	f3ef 8305 	mrs	r3, IPSR
 800bb56:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800bb58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10c      	bne.n	800bb78 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb5e:	f3ef 8310 	mrs	r3, PRIMASK
 800bb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800bb64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800bb66:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bb68:	b662      	cpsie	i
}
 800bb6a:	bf00      	nop
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb72:	f383 8810 	msr	PRIMASK, r3
}
 800bb76:	bf00      	nop
}
 800bb78:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800bb7a:	e067      	b.n	800bc4c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800bb7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb7e:	fa93 f3a3 	rbit	r3, r3
 800bb82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb86:	fab3 f383 	clz	r3, r3
 800bb8a:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800bb8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bb8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb90:	4413      	add	r3, r2
 800bb92:	4a37      	ldr	r2, [pc, #220]	@ (800bc70 <_tx_thread_system_suspend+0x224>)
 800bb94:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800bb96:	4b37      	ldr	r3, [pc, #220]	@ (800bc74 <_tx_thread_system_suspend+0x228>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d12b      	bne.n	800bbf8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800bba0:	4b33      	ldr	r3, [pc, #204]	@ (800bc70 <_tx_thread_system_suspend+0x224>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a30      	ldr	r2, [pc, #192]	@ (800bc68 <_tx_thread_system_suspend+0x21c>)
 800bba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbaa:	4a32      	ldr	r2, [pc, #200]	@ (800bc74 <_tx_thread_system_suspend+0x228>)
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbb0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb4:	f383 8810 	msr	PRIMASK, r3
}
 800bbb8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bbba:	4b2a      	ldr	r3, [pc, #168]	@ (800bc64 <_tx_thread_system_suspend+0x218>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800bbc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d144      	bne.n	800bc50 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bbc6:	4b2c      	ldr	r3, [pc, #176]	@ (800bc78 <_tx_thread_system_suspend+0x22c>)
 800bbc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbcc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbce:	f3ef 8305 	mrs	r3, IPSR
 800bbd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800bbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10c      	bne.n	800bbf4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbda:	f3ef 8310 	mrs	r3, PRIMASK
 800bbde:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800bbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bbe4:	b662      	cpsie	i
}
 800bbe6:	bf00      	nop
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	f383 8810 	msr	PRIMASK, r3
}
 800bbf2:	bf00      	nop
}
 800bbf4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800bbf6:	e02b      	b.n	800bc50 <_tx_thread_system_suspend+0x204>
 800bbf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbfa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	f383 8810 	msr	PRIMASK, r3
}
 800bc02:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800bc04:	4b1b      	ldr	r3, [pc, #108]	@ (800bc74 <_tx_thread_system_suspend+0x228>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d022      	beq.n	800bc54 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bc0e:	4b15      	ldr	r3, [pc, #84]	@ (800bc64 <_tx_thread_system_suspend+0x218>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800bc14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d11c      	bne.n	800bc54 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bc1a:	4b17      	ldr	r3, [pc, #92]	@ (800bc78 <_tx_thread_system_suspend+0x22c>)
 800bc1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc20:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc22:	f3ef 8305 	mrs	r3, IPSR
 800bc26:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bc28:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10c      	bne.n	800bc48 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc2e:	f3ef 8310 	mrs	r3, PRIMASK
 800bc32:	617b      	str	r3, [r7, #20]
    return(posture);
 800bc34:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800bc36:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bc38:	b662      	cpsie	i
}
 800bc3a:	bf00      	nop
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f383 8810 	msr	PRIMASK, r3
}
 800bc46:	bf00      	nop
}
 800bc48:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800bc4a:	e003      	b.n	800bc54 <_tx_thread_system_suspend+0x208>
                return;
 800bc4c:	bf00      	nop
 800bc4e:	e002      	b.n	800bc56 <_tx_thread_system_suspend+0x20a>
            return;
 800bc50:	bf00      	nop
 800bc52:	e000      	b.n	800bc56 <_tx_thread_system_suspend+0x20a>
    return;
 800bc54:	bf00      	nop
}
 800bc56:	3778      	adds	r7, #120	@ 0x78
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	200013d0 	.word	0x200013d0
 800bc60:	200019d4 	.word	0x200019d4
 800bc64:	20001468 	.word	0x20001468
 800bc68:	200013e8 	.word	0x200013e8
 800bc6c:	200013e0 	.word	0x200013e0
 800bc70:	200013e4 	.word	0x200013e4
 800bc74:	200013d4 	.word	0x200013d4
 800bc78:	e000ed04 	.word	0xe000ed04

0800bc7c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bc82:	4b21      	ldr	r3, [pc, #132]	@ (800bd08 <_tx_thread_time_slice+0x8c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc88:	f3ef 8310 	mrs	r3, PRIMASK
 800bc8c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800bc90:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc92:	b672      	cpsid	i
    return(int_posture);
 800bc94:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800bc96:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800bc98:	4b1c      	ldr	r3, [pc, #112]	@ (800bd0c <_tx_thread_time_slice+0x90>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d024      	beq.n	800bcee <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d120      	bne.n	800bcee <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	69da      	ldr	r2, [r3, #28]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	4a15      	ldr	r2, [pc, #84]	@ (800bd10 <_tx_thread_time_slice+0x94>)
 800bcba:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d013      	beq.n	800bcee <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d10d      	bne.n	800bcee <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	6a12      	ldr	r2, [r2, #32]
 800bcda:	490e      	ldr	r1, [pc, #56]	@ (800bd14 <_tx_thread_time_slice+0x98>)
 800bcdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800bce0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <_tx_thread_time_slice+0x9c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a0b      	ldr	r2, [pc, #44]	@ (800bd14 <_tx_thread_time_slice+0x98>)
 800bce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcea:	4a0c      	ldr	r2, [pc, #48]	@ (800bd1c <_tx_thread_time_slice+0xa0>)
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f383 8810 	msr	PRIMASK, r3
}
 800bcf8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	200013d0 	.word	0x200013d0
 800bd0c:	20001478 	.word	0x20001478
 800bd10:	200019d4 	.word	0x200019d4
 800bd14:	200013e8 	.word	0x200013e8
 800bd18:	200013e4 	.word	0x200013e4
 800bd1c:	200013d4 	.word	0x200013d4

0800bd20 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08a      	sub	sp, #40	@ 0x28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd2c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd30:	617b      	str	r3, [r7, #20]
    return(posture);
 800bd32:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bd34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd36:	b672      	cpsid	i
    return(int_posture);
 800bd38:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800bd3a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd40:	2b04      	cmp	r3, #4
 800bd42:	d10e      	bne.n	800bd62 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800bd44:	4b13      	ldr	r3, [pc, #76]	@ (800bd94 <_tx_thread_timeout+0x74>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	4a12      	ldr	r2, [pc, #72]	@ (800bd94 <_tx_thread_timeout+0x74>)
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f383 8810 	msr	PRIMASK, r3
}
 800bd58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800bd5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd5c:	f7ff fd76 	bl	800b84c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800bd60:	e013      	b.n	800bd8a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800bd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd66:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800bd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd6e:	61bb      	str	r3, [r7, #24]
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f383 8810 	msr	PRIMASK, r3
}
 800bd7a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	69b9      	ldr	r1, [r7, #24]
 800bd86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd88:	4798      	blx	r3
}
 800bd8a:	bf00      	nop
 800bd8c:	3728      	adds	r7, #40	@ 0x28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20001468 	.word	0x20001468

0800bd98 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bda2:	607b      	str	r3, [r7, #4]
    return(posture);
 800bda4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800bda6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bda8:	b672      	cpsid	i
    return(int_posture);
 800bdaa:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800bdac:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800bdae:	4b09      	ldr	r3, [pc, #36]	@ (800bdd4 <_tx_timer_expiration_process+0x3c>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	4a07      	ldr	r2, [pc, #28]	@ (800bdd4 <_tx_timer_expiration_process+0x3c>)
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	f383 8810 	msr	PRIMASK, r3
}
 800bdc2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800bdc4:	4804      	ldr	r0, [pc, #16]	@ (800bdd8 <_tx_timer_expiration_process+0x40>)
 800bdc6:	f7ff fd41 	bl	800b84c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800bdca:	bf00      	nop
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20001468 	.word	0x20001468
 800bdd8:	20001518 	.word	0x20001518

0800bddc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800bddc:	b590      	push	{r4, r7, lr}
 800bdde:	b089      	sub	sp, #36	@ 0x24
 800bde0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800bde2:	4b28      	ldr	r3, [pc, #160]	@ (800be84 <_tx_timer_initialize+0xa8>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800bde8:	4b27      	ldr	r3, [pc, #156]	@ (800be88 <_tx_timer_initialize+0xac>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800bdee:	4b27      	ldr	r3, [pc, #156]	@ (800be8c <_tx_timer_initialize+0xb0>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800bdf4:	4b26      	ldr	r3, [pc, #152]	@ (800be90 <_tx_timer_initialize+0xb4>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800bdfa:	4b26      	ldr	r3, [pc, #152]	@ (800be94 <_tx_timer_initialize+0xb8>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800be00:	2280      	movs	r2, #128	@ 0x80
 800be02:	2100      	movs	r1, #0
 800be04:	4824      	ldr	r0, [pc, #144]	@ (800be98 <_tx_timer_initialize+0xbc>)
 800be06:	f000 fec3 	bl	800cb90 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800be0a:	4b24      	ldr	r3, [pc, #144]	@ (800be9c <_tx_timer_initialize+0xc0>)
 800be0c:	4a22      	ldr	r2, [pc, #136]	@ (800be98 <_tx_timer_initialize+0xbc>)
 800be0e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800be10:	4b23      	ldr	r3, [pc, #140]	@ (800bea0 <_tx_timer_initialize+0xc4>)
 800be12:	4a21      	ldr	r2, [pc, #132]	@ (800be98 <_tx_timer_initialize+0xbc>)
 800be14:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800be16:	4b23      	ldr	r3, [pc, #140]	@ (800bea4 <_tx_timer_initialize+0xc8>)
 800be18:	4a23      	ldr	r2, [pc, #140]	@ (800bea8 <_tx_timer_initialize+0xcc>)
 800be1a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800be1c:	4b21      	ldr	r3, [pc, #132]	@ (800bea4 <_tx_timer_initialize+0xc8>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3304      	adds	r3, #4
 800be22:	4a20      	ldr	r2, [pc, #128]	@ (800bea4 <_tx_timer_initialize+0xc8>)
 800be24:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800be26:	4b21      	ldr	r3, [pc, #132]	@ (800beac <_tx_timer_initialize+0xd0>)
 800be28:	4a21      	ldr	r2, [pc, #132]	@ (800beb0 <_tx_timer_initialize+0xd4>)
 800be2a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800be2c:	4b21      	ldr	r3, [pc, #132]	@ (800beb4 <_tx_timer_initialize+0xd8>)
 800be2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800be32:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800be34:	4b20      	ldr	r3, [pc, #128]	@ (800beb8 <_tx_timer_initialize+0xdc>)
 800be36:	2200      	movs	r2, #0
 800be38:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800be3a:	4b1c      	ldr	r3, [pc, #112]	@ (800beac <_tx_timer_initialize+0xd0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a1d      	ldr	r2, [pc, #116]	@ (800beb4 <_tx_timer_initialize+0xd8>)
 800be40:	6812      	ldr	r2, [r2, #0]
 800be42:	491d      	ldr	r1, [pc, #116]	@ (800beb8 <_tx_timer_initialize+0xdc>)
 800be44:	6809      	ldr	r1, [r1, #0]
 800be46:	481c      	ldr	r0, [pc, #112]	@ (800beb8 <_tx_timer_initialize+0xdc>)
 800be48:	6800      	ldr	r0, [r0, #0]
 800be4a:	2400      	movs	r4, #0
 800be4c:	9405      	str	r4, [sp, #20]
 800be4e:	2400      	movs	r4, #0
 800be50:	9404      	str	r4, [sp, #16]
 800be52:	9003      	str	r0, [sp, #12]
 800be54:	9102      	str	r1, [sp, #8]
 800be56:	9201      	str	r2, [sp, #4]
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	4b18      	ldr	r3, [pc, #96]	@ (800bebc <_tx_timer_initialize+0xe0>)
 800be5c:	4a18      	ldr	r2, [pc, #96]	@ (800bec0 <_tx_timer_initialize+0xe4>)
 800be5e:	4919      	ldr	r1, [pc, #100]	@ (800bec4 <_tx_timer_initialize+0xe8>)
 800be60:	4819      	ldr	r0, [pc, #100]	@ (800bec8 <_tx_timer_initialize+0xec>)
 800be62:	f7ff fabb 	bl	800b3dc <_tx_thread_create>
 800be66:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1e5      	bne.n	800be3a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800be6e:	4b17      	ldr	r3, [pc, #92]	@ (800becc <_tx_timer_initialize+0xf0>)
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800be74:	4b16      	ldr	r3, [pc, #88]	@ (800bed0 <_tx_timer_initialize+0xf4>)
 800be76:	2200      	movs	r2, #0
 800be78:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800be7a:	bf00      	nop
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd90      	pop	{r4, r7, pc}
 800be82:	bf00      	nop
 800be84:	20001474 	.word	0x20001474
 800be88:	200019d4 	.word	0x200019d4
 800be8c:	20001478 	.word	0x20001478
 800be90:	20001508 	.word	0x20001508
 800be94:	20001514 	.word	0x20001514
 800be98:	2000147c 	.word	0x2000147c
 800be9c:	200014fc 	.word	0x200014fc
 800bea0:	20001504 	.word	0x20001504
 800bea4:	20001500 	.word	0x20001500
 800bea8:	200014f8 	.word	0x200014f8
 800beac:	200015c8 	.word	0x200015c8
 800beb0:	200015d4 	.word	0x200015d4
 800beb4:	200015cc 	.word	0x200015cc
 800beb8:	200015d0 	.word	0x200015d0
 800bebc:	4154494d 	.word	0x4154494d
 800bec0:	0800c009 	.word	0x0800c009
 800bec4:	0800daf0 	.word	0x0800daf0
 800bec8:	20001518 	.word	0x20001518
 800becc:	2000150c 	.word	0x2000150c
 800bed0:	20001510 	.word	0x20001510

0800bed4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b089      	sub	sp, #36	@ 0x24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d04a      	beq.n	800bf7e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beee:	d046      	beq.n	800bf7e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d142      	bne.n	800bf7e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	2b20      	cmp	r3, #32
 800befc:	d902      	bls.n	800bf04 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800befe:	231f      	movs	r3, #31
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	e002      	b.n	800bf0a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800bf0a:	4b20      	ldr	r3, [pc, #128]	@ (800bf8c <_tx_timer_system_activate+0xb8>)
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800bf16:	4b1e      	ldr	r3, [pc, #120]	@ (800bf90 <_tx_timer_system_activate+0xbc>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	69fa      	ldr	r2, [r7, #28]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d30b      	bcc.n	800bf38 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800bf20:	4b1b      	ldr	r3, [pc, #108]	@ (800bf90 <_tx_timer_system_activate+0xbc>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	69fa      	ldr	r2, [r7, #28]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	109b      	asrs	r3, r3, #2
 800bf2a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800bf2c:	4b19      	ldr	r3, [pc, #100]	@ (800bf94 <_tx_timer_system_activate+0xc0>)
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d109      	bne.n	800bf54 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	e011      	b.n	800bf78 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	69fa      	ldr	r2, [r7, #28]
 800bf7c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800bf7e:	bf00      	nop
 800bf80:	3724      	adds	r7, #36	@ 0x24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	20001504 	.word	0x20001504
 800bf90:	20001500 	.word	0x20001500
 800bf94:	200014fc 	.word	0x200014fc

0800bf98 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d026      	beq.n	800bffa <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d108      	bne.n	800bfcc <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d117      	bne.n	800bff4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	e013      	b.n	800bff4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d105      	bne.n	800bff4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	619a      	str	r2, [r3, #24]
    }
}
 800bffa:	bf00      	nop
 800bffc:	371c      	adds	r7, #28
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
	...

0800c008 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b098      	sub	sp, #96	@ 0x60
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c010:	2300      	movs	r3, #0
 800c012:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a73      	ldr	r2, [pc, #460]	@ (800c1e4 <_tx_timer_thread_entry+0x1dc>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	f040 80de 	bne.w	800c1da <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c01e:	f3ef 8310 	mrs	r3, PRIMASK
 800c022:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800c024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800c026:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c028:	b672      	cpsid	i
    return(int_posture);
 800c02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c02c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c02e:	4b6e      	ldr	r3, [pc, #440]	@ (800c1e8 <_tx_timer_thread_entry+0x1e0>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f107 020c 	add.w	r2, r7, #12
 800c042:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c044:	4b68      	ldr	r3, [pc, #416]	@ (800c1e8 <_tx_timer_thread_entry+0x1e0>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c04c:	4b66      	ldr	r3, [pc, #408]	@ (800c1e8 <_tx_timer_thread_entry+0x1e0>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3304      	adds	r3, #4
 800c052:	4a65      	ldr	r2, [pc, #404]	@ (800c1e8 <_tx_timer_thread_entry+0x1e0>)
 800c054:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c056:	4b64      	ldr	r3, [pc, #400]	@ (800c1e8 <_tx_timer_thread_entry+0x1e0>)
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	4b64      	ldr	r3, [pc, #400]	@ (800c1ec <_tx_timer_thread_entry+0x1e4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d103      	bne.n	800c06a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c062:	4b63      	ldr	r3, [pc, #396]	@ (800c1f0 <_tx_timer_thread_entry+0x1e8>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a60      	ldr	r2, [pc, #384]	@ (800c1e8 <_tx_timer_thread_entry+0x1e0>)
 800c068:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c06a:	4b62      	ldr	r3, [pc, #392]	@ (800c1f4 <_tx_timer_thread_entry+0x1ec>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c072:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c076:	f383 8810 	msr	PRIMASK, r3
}
 800c07a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c07c:	f3ef 8310 	mrs	r3, PRIMASK
 800c080:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800c082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800c084:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c086:	b672      	cpsid	i
    return(int_posture);
 800c088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c08a:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c08c:	e07f      	b.n	800c18e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c09c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c09e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d102      	bne.n	800c0aa <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	60fb      	str	r3, [r7, #12]
 800c0a8:	e00e      	b.n	800c0c8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c0aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ac:	695b      	ldr	r3, [r3, #20]
 800c0ae:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c0b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0b4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c0b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0ba:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c0bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0be:	f107 020c 	add.w	r2, r7, #12
 800c0c2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c0c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0c6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b20      	cmp	r3, #32
 800c0ce:	d911      	bls.n	800c0f4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c0d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0da:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c0e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0e2:	f107 0208 	add.w	r2, r7, #8
 800c0e6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0ec:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c0ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0f0:	60bb      	str	r3, [r7, #8]
 800c0f2:	e01a      	b.n	800c12a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c0f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c106:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c112:	f107 0208 	add.w	r2, r7, #8
 800c116:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c11a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c11c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c11e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c120:	60bb      	str	r3, [r7, #8]
 800c122:	e002      	b.n	800c12a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c126:	2200      	movs	r2, #0
 800c128:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c12a:	4a33      	ldr	r2, [pc, #204]	@ (800c1f8 <_tx_timer_thread_entry+0x1f0>)
 800c12c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c136:	f383 8810 	msr	PRIMASK, r3
}
 800c13a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c13c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d002      	beq.n	800c148 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c144:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c146:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c148:	f3ef 8310 	mrs	r3, PRIMASK
 800c14c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c150:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c152:	b672      	cpsid	i
    return(int_posture);
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c156:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c158:	4b27      	ldr	r3, [pc, #156]	@ (800c1f8 <_tx_timer_thread_entry+0x1f0>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c162:	429a      	cmp	r2, r3
 800c164:	d105      	bne.n	800c172 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800c166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c168:	2200      	movs	r2, #0
 800c16a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800c16c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c16e:	f7ff feb1 	bl	800bed4 <_tx_timer_system_activate>
 800c172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c174:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	f383 8810 	msr	PRIMASK, r3
}
 800c17c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c17e:	f3ef 8310 	mrs	r3, PRIMASK
 800c182:	623b      	str	r3, [r7, #32]
    return(posture);
 800c184:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c186:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c188:	b672      	cpsid	i
    return(int_posture);
 800c18a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c18c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f47f af7c 	bne.w	800c08e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800c196:	4b17      	ldr	r3, [pc, #92]	@ (800c1f4 <_tx_timer_thread_entry+0x1ec>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d116      	bne.n	800c1cc <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800c19e:	4b17      	ldr	r3, [pc, #92]	@ (800c1fc <_tx_timer_thread_entry+0x1f4>)
 800c1a0:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c1a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1a4:	2203      	movs	r2, #3
 800c1a6:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c1a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800c1ae:	4b14      	ldr	r3, [pc, #80]	@ (800c200 <_tx_timer_thread_entry+0x1f8>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	4a12      	ldr	r2, [pc, #72]	@ (800c200 <_tx_timer_thread_entry+0x1f8>)
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f383 8810 	msr	PRIMASK, r3
}
 800c1c2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c1c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c1c6:	f7ff fc41 	bl	800ba4c <_tx_thread_system_suspend>
 800c1ca:	e728      	b.n	800c01e <_tx_timer_thread_entry+0x16>
 800c1cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	f383 8810 	msr	PRIMASK, r3
}
 800c1d6:	bf00      	nop
            TX_DISABLE
 800c1d8:	e721      	b.n	800c01e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800c1da:	bf00      	nop
 800c1dc:	3760      	adds	r7, #96	@ 0x60
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	4154494d 	.word	0x4154494d
 800c1e8:	20001504 	.word	0x20001504
 800c1ec:	20001500 	.word	0x20001500
 800c1f0:	200014fc 	.word	0x200014fc
 800c1f4:	20001508 	.word	0x20001508
 800c1f8:	20001514 	.word	0x20001514
 800c1fc:	20001518 	.word	0x20001518
 800c200:	20001468 	.word	0x20001468

0800c204 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b092      	sub	sp, #72	@ 0x48
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c212:	2300      	movs	r3, #0
 800c214:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d102      	bne.n	800c222 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c21c:	2302      	movs	r3, #2
 800c21e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c220:	e075      	b.n	800c30e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800c222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c224:	2b34      	cmp	r3, #52	@ 0x34
 800c226:	d002      	beq.n	800c22e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c228:	2302      	movs	r3, #2
 800c22a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c22c:	e06f      	b.n	800c30e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c22e:	f3ef 8310 	mrs	r3, PRIMASK
 800c232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c236:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c238:	b672      	cpsid	i
    return(int_posture);
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c23c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c23e:	4b3b      	ldr	r3, [pc, #236]	@ (800c32c <_txe_byte_pool_create+0x128>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3301      	adds	r3, #1
 800c244:	4a39      	ldr	r2, [pc, #228]	@ (800c32c <_txe_byte_pool_create+0x128>)
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24e:	f383 8810 	msr	PRIMASK, r3
}
 800c252:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800c254:	4b36      	ldr	r3, [pc, #216]	@ (800c330 <_txe_byte_pool_create+0x12c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c25a:	2300      	movs	r3, #0
 800c25c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c25e:	e009      	b.n	800c274 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c264:	429a      	cmp	r2, r3
 800c266:	d00b      	beq.n	800c280 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800c268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c270:	3301      	adds	r3, #1
 800c272:	643b      	str	r3, [r7, #64]	@ 0x40
 800c274:	4b2f      	ldr	r3, [pc, #188]	@ (800c334 <_txe_byte_pool_create+0x130>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d3f0      	bcc.n	800c260 <_txe_byte_pool_create+0x5c>
 800c27e:	e000      	b.n	800c282 <_txe_byte_pool_create+0x7e>
                break;
 800c280:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c282:	f3ef 8310 	mrs	r3, PRIMASK
 800c286:	623b      	str	r3, [r7, #32]
    return(posture);
 800c288:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c28a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c28c:	b672      	cpsid	i
    return(int_posture);
 800c28e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c290:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c292:	4b26      	ldr	r3, [pc, #152]	@ (800c32c <_txe_byte_pool_create+0x128>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3b01      	subs	r3, #1
 800c298:	4a24      	ldr	r2, [pc, #144]	@ (800c32c <_txe_byte_pool_create+0x128>)
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	f383 8810 	msr	PRIMASK, r3
}
 800c2a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c2a8:	f7ff fa96 	bl	800b7d8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d102      	bne.n	800c2ba <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2b8:	e029      	b.n	800c30e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2c4:	e023      	b.n	800c30e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b63      	cmp	r3, #99	@ 0x63
 800c2ca:	d802      	bhi.n	800c2d2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800c2cc:	2305      	movs	r3, #5
 800c2ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2d0:	e01d      	b.n	800c30e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c2d2:	4b19      	ldr	r3, [pc, #100]	@ (800c338 <_txe_byte_pool_create+0x134>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2da:	4a18      	ldr	r2, [pc, #96]	@ (800c33c <_txe_byte_pool_create+0x138>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d101      	bne.n	800c2e4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c2e0:	2313      	movs	r3, #19
 800c2e2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2e4:	f3ef 8305 	mrs	r3, IPSR
 800c2e8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c2ea:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c2ec:	4b14      	ldr	r3, [pc, #80]	@ (800c340 <_txe_byte_pool_create+0x13c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00b      	beq.n	800c30e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2f6:	f3ef 8305 	mrs	r3, IPSR
 800c2fa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c2fc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c2fe:	4b10      	ldr	r3, [pc, #64]	@ (800c340 <_txe_byte_pool_create+0x13c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4313      	orrs	r3, r2
 800c304:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c308:	d201      	bcs.n	800c30e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c30a:	2313      	movs	r3, #19
 800c30c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c30e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c310:	2b00      	cmp	r3, #0
 800c312:	d106      	bne.n	800c322 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	68b9      	ldr	r1, [r7, #8]
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f7fe fda2 	bl	800ae64 <_tx_byte_pool_create>
 800c320:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800c322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c324:	4618      	mov	r0, r3
 800c326:	3748      	adds	r7, #72	@ 0x48
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20001468 	.word	0x20001468
 800c330:	200013c0 	.word	0x200013c0
 800c334:	200013c4 	.word	0x200013c4
 800c338:	200013d0 	.word	0x200013d0
 800c33c:	20001518 	.word	0x20001518
 800c340:	2000000c 	.word	0x2000000c

0800c344 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b092      	sub	sp, #72	@ 0x48
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c352:	2300      	movs	r3, #0
 800c354:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d102      	bne.n	800c362 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c35c:	230c      	movs	r3, #12
 800c35e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c360:	e054      	b.n	800c40c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	2b1c      	cmp	r3, #28
 800c366:	d002      	beq.n	800c36e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c368:	230c      	movs	r3, #12
 800c36a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c36c:	e04e      	b.n	800c40c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c36e:	f3ef 8310 	mrs	r3, PRIMASK
 800c372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c376:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c378:	b672      	cpsid	i
    return(int_posture);
 800c37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c37c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c37e:	4b36      	ldr	r3, [pc, #216]	@ (800c458 <_txe_semaphore_create+0x114>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	4a34      	ldr	r2, [pc, #208]	@ (800c458 <_txe_semaphore_create+0x114>)
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38e:	f383 8810 	msr	PRIMASK, r3
}
 800c392:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800c394:	4b31      	ldr	r3, [pc, #196]	@ (800c45c <_txe_semaphore_create+0x118>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c39a:	2300      	movs	r3, #0
 800c39c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c39e:	e009      	b.n	800c3b4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d00b      	beq.n	800c3c0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800c3a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c3ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3b4:	4b2a      	ldr	r3, [pc, #168]	@ (800c460 <_txe_semaphore_create+0x11c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d3f0      	bcc.n	800c3a0 <_txe_semaphore_create+0x5c>
 800c3be:	e000      	b.n	800c3c2 <_txe_semaphore_create+0x7e>
                break;
 800c3c0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3c6:	623b      	str	r3, [r7, #32]
    return(posture);
 800c3c8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c3ca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3cc:	b672      	cpsid	i
    return(int_posture);
 800c3ce:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c3d0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c3d2:	4b21      	ldr	r3, [pc, #132]	@ (800c458 <_txe_semaphore_create+0x114>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	4a1f      	ldr	r2, [pc, #124]	@ (800c458 <_txe_semaphore_create+0x114>)
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3de:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e2:	f383 8810 	msr	PRIMASK, r3
}
 800c3e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c3e8:	f7ff f9f6 	bl	800b7d8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d102      	bne.n	800c3fa <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800c3f4:	230c      	movs	r3, #12
 800c3f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3f8:	e008      	b.n	800c40c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c3fa:	4b1a      	ldr	r3, [pc, #104]	@ (800c464 <_txe_semaphore_create+0x120>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c402:	4a19      	ldr	r2, [pc, #100]	@ (800c468 <_txe_semaphore_create+0x124>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d101      	bne.n	800c40c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c408:	2313      	movs	r3, #19
 800c40a:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c40c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d114      	bne.n	800c43c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c412:	f3ef 8305 	mrs	r3, IPSR
 800c416:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c418:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c41a:	4b14      	ldr	r3, [pc, #80]	@ (800c46c <_txe_semaphore_create+0x128>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4313      	orrs	r3, r2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c424:	f3ef 8305 	mrs	r3, IPSR
 800c428:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c42a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c42c:	4b0f      	ldr	r3, [pc, #60]	@ (800c46c <_txe_semaphore_create+0x128>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4313      	orrs	r3, r2
 800c432:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c436:	d201      	bcs.n	800c43c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c438:	2313      	movs	r3, #19
 800c43a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c43c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d105      	bne.n	800c44e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f7fe fe8c 	bl	800b164 <_tx_semaphore_create>
 800c44c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800c44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c450:	4618      	mov	r0, r3
 800c452:	3748      	adds	r7, #72	@ 0x48
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20001468 	.word	0x20001468
 800c45c:	20001398 	.word	0x20001398
 800c460:	2000139c 	.word	0x2000139c
 800c464:	200013d0 	.word	0x200013d0
 800c468:	20001518 	.word	0x20001518
 800c46c:	2000000c 	.word	0x2000000c

0800c470 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d102      	bne.n	800c48a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c484:	230c      	movs	r3, #12
 800c486:	617b      	str	r3, [r7, #20]
 800c488:	e01f      	b.n	800c4ca <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a15      	ldr	r2, [pc, #84]	@ (800c4e4 <_txe_semaphore_get+0x74>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d002      	beq.n	800c49a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c494:	230c      	movs	r3, #12
 800c496:	617b      	str	r3, [r7, #20]
 800c498:	e017      	b.n	800c4ca <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d014      	beq.n	800c4ca <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4a0:	f3ef 8305 	mrs	r3, IPSR
 800c4a4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c4a6:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e8 <_txe_semaphore_get+0x78>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c4b2:	2304      	movs	r3, #4
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	e008      	b.n	800c4ca <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ec <_txe_semaphore_get+0x7c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	4a0b      	ldr	r2, [pc, #44]	@ (800c4f0 <_txe_semaphore_get+0x80>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d101      	bne.n	800c4ca <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c4c6:	2304      	movs	r3, #4
 800c4c8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d104      	bne.n	800c4da <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7fe fe98 	bl	800b208 <_tx_semaphore_get>
 800c4d8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c4da:	697b      	ldr	r3, [r7, #20]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	53454d41 	.word	0x53454d41
 800c4e8:	2000000c 	.word	0x2000000c
 800c4ec:	200013d0 	.word	0x200013d0
 800c4f0:	20001518 	.word	0x20001518

0800c4f4 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c502:	230c      	movs	r3, #12
 800c504:	60fb      	str	r3, [r7, #12]
 800c506:	e00b      	b.n	800c520 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a07      	ldr	r2, [pc, #28]	@ (800c52c <_txe_semaphore_put+0x38>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d002      	beq.n	800c518 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c512:	230c      	movs	r3, #12
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	e003      	b.n	800c520 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7fe ff07 	bl	800b32c <_tx_semaphore_put>
 800c51e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c520:	68fb      	ldr	r3, [r7, #12]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	53454d41 	.word	0x53454d41

0800c530 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b09a      	sub	sp, #104	@ 0x68
 800c534:	af06      	add	r7, sp, #24
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c53e:	2300      	movs	r3, #0
 800c540:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d102      	bne.n	800c54e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c548:	230e      	movs	r3, #14
 800c54a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c54c:	e0bb      	b.n	800c6c6 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800c54e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c550:	2bb0      	cmp	r3, #176	@ 0xb0
 800c552:	d002      	beq.n	800c55a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c554:	230e      	movs	r3, #14
 800c556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c558:	e0b5      	b.n	800c6c6 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c55a:	f3ef 8310 	mrs	r3, PRIMASK
 800c55e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c562:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c564:	b672      	cpsid	i
    return(int_posture);
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c568:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c56a:	4b64      	ldr	r3, [pc, #400]	@ (800c6fc <_txe_thread_create+0x1cc>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3301      	adds	r3, #1
 800c570:	4a62      	ldr	r2, [pc, #392]	@ (800c6fc <_txe_thread_create+0x1cc>)
 800c572:	6013      	str	r3, [r2, #0]
 800c574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57a:	f383 8810 	msr	PRIMASK, r3
}
 800c57e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800c580:	2300      	movs	r3, #0
 800c582:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800c584:	4b5e      	ldr	r3, [pc, #376]	@ (800c700 <_txe_thread_create+0x1d0>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c58a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c58c:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800c58e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c590:	3b01      	subs	r3, #1
 800c592:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c594:	4413      	add	r3, r2
 800c596:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c59c:	2300      	movs	r3, #0
 800c59e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5a0:	e02b      	b.n	800c5fa <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d101      	bne.n	800c5ae <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c5ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d028      	beq.n	800c606 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c5b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d308      	bcc.n	800c5d0 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c5be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d203      	bcs.n	800c5d0 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d308      	bcc.n	800c5ec <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d203      	bcs.n	800c5ec <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5f2:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c5f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5fa:	4b42      	ldr	r3, [pc, #264]	@ (800c704 <_txe_thread_create+0x1d4>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c600:	429a      	cmp	r2, r3
 800c602:	d3ce      	bcc.n	800c5a2 <_txe_thread_create+0x72>
 800c604:	e000      	b.n	800c608 <_txe_thread_create+0xd8>
                break;
 800c606:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c608:	f3ef 8310 	mrs	r3, PRIMASK
 800c60c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c60e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c610:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c612:	b672      	cpsid	i
    return(int_posture);
 800c614:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c616:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c618:	4b38      	ldr	r3, [pc, #224]	@ (800c6fc <_txe_thread_create+0x1cc>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	4a37      	ldr	r2, [pc, #220]	@ (800c6fc <_txe_thread_create+0x1cc>)
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c624:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	f383 8810 	msr	PRIMASK, r3
}
 800c62c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c62e:	f7ff f8d3 	bl	800b7d8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c636:	429a      	cmp	r2, r3
 800c638:	d102      	bne.n	800c640 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c63a:	230e      	movs	r3, #14
 800c63c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c63e:	e042      	b.n	800c6c6 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c646:	2303      	movs	r3, #3
 800c648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c64a:	e03c      	b.n	800c6c6 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d102      	bne.n	800c658 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c652:	2303      	movs	r3, #3
 800c654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c656:	e036      	b.n	800c6c6 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c65a:	2bc7      	cmp	r3, #199	@ 0xc7
 800c65c:	d802      	bhi.n	800c664 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c65e:	2305      	movs	r3, #5
 800c660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c662:	e030      	b.n	800c6c6 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c664:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c666:	2b1f      	cmp	r3, #31
 800c668:	d902      	bls.n	800c670 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c66a:	230f      	movs	r3, #15
 800c66c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c66e:	e02a      	b.n	800c6c6 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c670:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c674:	429a      	cmp	r2, r3
 800c676:	d902      	bls.n	800c67e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c678:	2318      	movs	r3, #24
 800c67a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c67c:	e023      	b.n	800c6c6 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c680:	2b01      	cmp	r3, #1
 800c682:	d902      	bls.n	800c68a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c684:	2310      	movs	r3, #16
 800c686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c688:	e01d      	b.n	800c6c6 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c68a:	4b1f      	ldr	r3, [pc, #124]	@ (800c708 <_txe_thread_create+0x1d8>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c692:	4a1e      	ldr	r2, [pc, #120]	@ (800c70c <_txe_thread_create+0x1dc>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d101      	bne.n	800c69c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c698:	2313      	movs	r3, #19
 800c69a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c69c:	f3ef 8305 	mrs	r3, IPSR
 800c6a0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c6a2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c710 <_txe_thread_create+0x1e0>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6ae:	f3ef 8305 	mrs	r3, IPSR
 800c6b2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c6b4:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c6b6:	4b16      	ldr	r3, [pc, #88]	@ (800c710 <_txe_thread_create+0x1e0>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c6c0:	d201      	bcs.n	800c6c6 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c6c2:	2313      	movs	r3, #19
 800c6c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c6c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d112      	bne.n	800c6f2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c6cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6ce:	9305      	str	r3, [sp, #20]
 800c6d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6d6:	9303      	str	r3, [sp, #12]
 800c6d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6da:	9302      	str	r3, [sp, #8]
 800c6dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6de:	9301      	str	r3, [sp, #4]
 800c6e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	68b9      	ldr	r1, [r7, #8]
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f7fe fe76 	bl	800b3dc <_tx_thread_create>
 800c6f0:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c6f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3750      	adds	r7, #80	@ 0x50
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20001468 	.word	0x20001468
 800c700:	200013d8 	.word	0x200013d8
 800c704:	200013dc 	.word	0x200013dc
 800c708:	200013d0 	.word	0x200013d0
 800c70c:	20001518 	.word	0x20001518
 800c710:	2000000c 	.word	0x2000000c

0800c714 <std>:
 800c714:	2300      	movs	r3, #0
 800c716:	b510      	push	{r4, lr}
 800c718:	4604      	mov	r4, r0
 800c71a:	6083      	str	r3, [r0, #8]
 800c71c:	8181      	strh	r1, [r0, #12]
 800c71e:	4619      	mov	r1, r3
 800c720:	6643      	str	r3, [r0, #100]	@ 0x64
 800c722:	81c2      	strh	r2, [r0, #14]
 800c724:	2208      	movs	r2, #8
 800c726:	6183      	str	r3, [r0, #24]
 800c728:	e9c0 3300 	strd	r3, r3, [r0]
 800c72c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c730:	305c      	adds	r0, #92	@ 0x5c
 800c732:	f000 fa2d 	bl	800cb90 <memset>
 800c736:	4b0d      	ldr	r3, [pc, #52]	@ (800c76c <std+0x58>)
 800c738:	6224      	str	r4, [r4, #32]
 800c73a:	6263      	str	r3, [r4, #36]	@ 0x24
 800c73c:	4b0c      	ldr	r3, [pc, #48]	@ (800c770 <std+0x5c>)
 800c73e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c740:	4b0c      	ldr	r3, [pc, #48]	@ (800c774 <std+0x60>)
 800c742:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c744:	4b0c      	ldr	r3, [pc, #48]	@ (800c778 <std+0x64>)
 800c746:	6323      	str	r3, [r4, #48]	@ 0x30
 800c748:	4b0c      	ldr	r3, [pc, #48]	@ (800c77c <std+0x68>)
 800c74a:	429c      	cmp	r4, r3
 800c74c:	d006      	beq.n	800c75c <std+0x48>
 800c74e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c752:	4294      	cmp	r4, r2
 800c754:	d002      	beq.n	800c75c <std+0x48>
 800c756:	33d0      	adds	r3, #208	@ 0xd0
 800c758:	429c      	cmp	r4, r3
 800c75a:	d105      	bne.n	800c768 <std+0x54>
 800c75c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c764:	f000 ba8c 	b.w	800cc80 <__retarget_lock_init_recursive>
 800c768:	bd10      	pop	{r4, pc}
 800c76a:	bf00      	nop
 800c76c:	0800c9e1 	.word	0x0800c9e1
 800c770:	0800ca03 	.word	0x0800ca03
 800c774:	0800ca3b 	.word	0x0800ca3b
 800c778:	0800ca5f 	.word	0x0800ca5f
 800c77c:	200019d8 	.word	0x200019d8

0800c780 <stdio_exit_handler>:
 800c780:	4a02      	ldr	r2, [pc, #8]	@ (800c78c <stdio_exit_handler+0xc>)
 800c782:	4903      	ldr	r1, [pc, #12]	@ (800c790 <stdio_exit_handler+0x10>)
 800c784:	4803      	ldr	r0, [pc, #12]	@ (800c794 <stdio_exit_handler+0x14>)
 800c786:	f000 b869 	b.w	800c85c <_fwalk_sglue>
 800c78a:	bf00      	nop
 800c78c:	20000010 	.word	0x20000010
 800c790:	0800d7d9 	.word	0x0800d7d9
 800c794:	20000020 	.word	0x20000020

0800c798 <cleanup_stdio>:
 800c798:	6841      	ldr	r1, [r0, #4]
 800c79a:	4b0c      	ldr	r3, [pc, #48]	@ (800c7cc <cleanup_stdio+0x34>)
 800c79c:	4299      	cmp	r1, r3
 800c79e:	b510      	push	{r4, lr}
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	d001      	beq.n	800c7a8 <cleanup_stdio+0x10>
 800c7a4:	f001 f818 	bl	800d7d8 <_fflush_r>
 800c7a8:	68a1      	ldr	r1, [r4, #8]
 800c7aa:	4b09      	ldr	r3, [pc, #36]	@ (800c7d0 <cleanup_stdio+0x38>)
 800c7ac:	4299      	cmp	r1, r3
 800c7ae:	d002      	beq.n	800c7b6 <cleanup_stdio+0x1e>
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f001 f811 	bl	800d7d8 <_fflush_r>
 800c7b6:	68e1      	ldr	r1, [r4, #12]
 800c7b8:	4b06      	ldr	r3, [pc, #24]	@ (800c7d4 <cleanup_stdio+0x3c>)
 800c7ba:	4299      	cmp	r1, r3
 800c7bc:	d004      	beq.n	800c7c8 <cleanup_stdio+0x30>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7c4:	f001 b808 	b.w	800d7d8 <_fflush_r>
 800c7c8:	bd10      	pop	{r4, pc}
 800c7ca:	bf00      	nop
 800c7cc:	200019d8 	.word	0x200019d8
 800c7d0:	20001a40 	.word	0x20001a40
 800c7d4:	20001aa8 	.word	0x20001aa8

0800c7d8 <global_stdio_init.part.0>:
 800c7d8:	b510      	push	{r4, lr}
 800c7da:	4b0b      	ldr	r3, [pc, #44]	@ (800c808 <global_stdio_init.part.0+0x30>)
 800c7dc:	2104      	movs	r1, #4
 800c7de:	4c0b      	ldr	r4, [pc, #44]	@ (800c80c <global_stdio_init.part.0+0x34>)
 800c7e0:	4a0b      	ldr	r2, [pc, #44]	@ (800c810 <global_stdio_init.part.0+0x38>)
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	601a      	str	r2, [r3, #0]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f7ff ff94 	bl	800c714 <std>
 800c7ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	2109      	movs	r1, #9
 800c7f4:	f7ff ff8e 	bl	800c714 <std>
 800c7f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	2112      	movs	r1, #18
 800c800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c804:	f7ff bf86 	b.w	800c714 <std>
 800c808:	20001b10 	.word	0x20001b10
 800c80c:	200019d8 	.word	0x200019d8
 800c810:	0800c781 	.word	0x0800c781

0800c814 <__sfp_lock_acquire>:
 800c814:	4801      	ldr	r0, [pc, #4]	@ (800c81c <__sfp_lock_acquire+0x8>)
 800c816:	f000 ba34 	b.w	800cc82 <__retarget_lock_acquire_recursive>
 800c81a:	bf00      	nop
 800c81c:	20001b19 	.word	0x20001b19

0800c820 <__sfp_lock_release>:
 800c820:	4801      	ldr	r0, [pc, #4]	@ (800c828 <__sfp_lock_release+0x8>)
 800c822:	f000 ba2f 	b.w	800cc84 <__retarget_lock_release_recursive>
 800c826:	bf00      	nop
 800c828:	20001b19 	.word	0x20001b19

0800c82c <__sinit>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	4604      	mov	r4, r0
 800c830:	f7ff fff0 	bl	800c814 <__sfp_lock_acquire>
 800c834:	6a23      	ldr	r3, [r4, #32]
 800c836:	b11b      	cbz	r3, 800c840 <__sinit+0x14>
 800c838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c83c:	f7ff bff0 	b.w	800c820 <__sfp_lock_release>
 800c840:	4b04      	ldr	r3, [pc, #16]	@ (800c854 <__sinit+0x28>)
 800c842:	6223      	str	r3, [r4, #32]
 800c844:	4b04      	ldr	r3, [pc, #16]	@ (800c858 <__sinit+0x2c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1f5      	bne.n	800c838 <__sinit+0xc>
 800c84c:	f7ff ffc4 	bl	800c7d8 <global_stdio_init.part.0>
 800c850:	e7f2      	b.n	800c838 <__sinit+0xc>
 800c852:	bf00      	nop
 800c854:	0800c799 	.word	0x0800c799
 800c858:	20001b10 	.word	0x20001b10

0800c85c <_fwalk_sglue>:
 800c85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c860:	4607      	mov	r7, r0
 800c862:	4688      	mov	r8, r1
 800c864:	4614      	mov	r4, r2
 800c866:	2600      	movs	r6, #0
 800c868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c86c:	f1b9 0901 	subs.w	r9, r9, #1
 800c870:	d505      	bpl.n	800c87e <_fwalk_sglue+0x22>
 800c872:	6824      	ldr	r4, [r4, #0]
 800c874:	2c00      	cmp	r4, #0
 800c876:	d1f7      	bne.n	800c868 <_fwalk_sglue+0xc>
 800c878:	4630      	mov	r0, r6
 800c87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c87e:	89ab      	ldrh	r3, [r5, #12]
 800c880:	2b01      	cmp	r3, #1
 800c882:	d907      	bls.n	800c894 <_fwalk_sglue+0x38>
 800c884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c888:	3301      	adds	r3, #1
 800c88a:	d003      	beq.n	800c894 <_fwalk_sglue+0x38>
 800c88c:	4629      	mov	r1, r5
 800c88e:	4638      	mov	r0, r7
 800c890:	47c0      	blx	r8
 800c892:	4306      	orrs	r6, r0
 800c894:	3568      	adds	r5, #104	@ 0x68
 800c896:	e7e9      	b.n	800c86c <_fwalk_sglue+0x10>

0800c898 <iprintf>:
 800c898:	b40f      	push	{r0, r1, r2, r3}
 800c89a:	b507      	push	{r0, r1, r2, lr}
 800c89c:	4906      	ldr	r1, [pc, #24]	@ (800c8b8 <iprintf+0x20>)
 800c89e:	ab04      	add	r3, sp, #16
 800c8a0:	6808      	ldr	r0, [r1, #0]
 800c8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a6:	6881      	ldr	r1, [r0, #8]
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	f000 fc67 	bl	800d17c <_vfiprintf_r>
 800c8ae:	b003      	add	sp, #12
 800c8b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8b4:	b004      	add	sp, #16
 800c8b6:	4770      	bx	lr
 800c8b8:	2000001c 	.word	0x2000001c

0800c8bc <_puts_r>:
 800c8bc:	6a03      	ldr	r3, [r0, #32]
 800c8be:	b570      	push	{r4, r5, r6, lr}
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	460e      	mov	r6, r1
 800c8c4:	6884      	ldr	r4, [r0, #8]
 800c8c6:	b90b      	cbnz	r3, 800c8cc <_puts_r+0x10>
 800c8c8:	f7ff ffb0 	bl	800c82c <__sinit>
 800c8cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8ce:	07db      	lsls	r3, r3, #31
 800c8d0:	d405      	bmi.n	800c8de <_puts_r+0x22>
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	0598      	lsls	r0, r3, #22
 800c8d6:	d402      	bmi.n	800c8de <_puts_r+0x22>
 800c8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8da:	f000 f9d2 	bl	800cc82 <__retarget_lock_acquire_recursive>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	0719      	lsls	r1, r3, #28
 800c8e2:	d502      	bpl.n	800c8ea <_puts_r+0x2e>
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d135      	bne.n	800c956 <_puts_r+0x9a>
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	f000 f8f9 	bl	800cae4 <__swsetup_r>
 800c8f2:	b380      	cbz	r0, 800c956 <_puts_r+0x9a>
 800c8f4:	f04f 35ff 	mov.w	r5, #4294967295
 800c8f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8fa:	07da      	lsls	r2, r3, #31
 800c8fc:	d405      	bmi.n	800c90a <_puts_r+0x4e>
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	059b      	lsls	r3, r3, #22
 800c902:	d402      	bmi.n	800c90a <_puts_r+0x4e>
 800c904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c906:	f000 f9bd 	bl	800cc84 <__retarget_lock_release_recursive>
 800c90a:	4628      	mov	r0, r5
 800c90c:	bd70      	pop	{r4, r5, r6, pc}
 800c90e:	2b00      	cmp	r3, #0
 800c910:	da04      	bge.n	800c91c <_puts_r+0x60>
 800c912:	69a2      	ldr	r2, [r4, #24]
 800c914:	429a      	cmp	r2, r3
 800c916:	dc17      	bgt.n	800c948 <_puts_r+0x8c>
 800c918:	290a      	cmp	r1, #10
 800c91a:	d015      	beq.n	800c948 <_puts_r+0x8c>
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	6022      	str	r2, [r4, #0]
 800c922:	7019      	strb	r1, [r3, #0]
 800c924:	68a3      	ldr	r3, [r4, #8]
 800c926:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c92a:	3b01      	subs	r3, #1
 800c92c:	60a3      	str	r3, [r4, #8]
 800c92e:	2900      	cmp	r1, #0
 800c930:	d1ed      	bne.n	800c90e <_puts_r+0x52>
 800c932:	2b00      	cmp	r3, #0
 800c934:	da11      	bge.n	800c95a <_puts_r+0x9e>
 800c936:	4622      	mov	r2, r4
 800c938:	210a      	movs	r1, #10
 800c93a:	4628      	mov	r0, r5
 800c93c:	f000 f893 	bl	800ca66 <__swbuf_r>
 800c940:	3001      	adds	r0, #1
 800c942:	d0d7      	beq.n	800c8f4 <_puts_r+0x38>
 800c944:	250a      	movs	r5, #10
 800c946:	e7d7      	b.n	800c8f8 <_puts_r+0x3c>
 800c948:	4622      	mov	r2, r4
 800c94a:	4628      	mov	r0, r5
 800c94c:	f000 f88b 	bl	800ca66 <__swbuf_r>
 800c950:	3001      	adds	r0, #1
 800c952:	d1e7      	bne.n	800c924 <_puts_r+0x68>
 800c954:	e7ce      	b.n	800c8f4 <_puts_r+0x38>
 800c956:	3e01      	subs	r6, #1
 800c958:	e7e4      	b.n	800c924 <_puts_r+0x68>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	6022      	str	r2, [r4, #0]
 800c960:	220a      	movs	r2, #10
 800c962:	701a      	strb	r2, [r3, #0]
 800c964:	e7ee      	b.n	800c944 <_puts_r+0x88>
	...

0800c968 <puts>:
 800c968:	4b02      	ldr	r3, [pc, #8]	@ (800c974 <puts+0xc>)
 800c96a:	4601      	mov	r1, r0
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	f7ff bfa5 	b.w	800c8bc <_puts_r>
 800c972:	bf00      	nop
 800c974:	2000001c 	.word	0x2000001c

0800c978 <sniprintf>:
 800c978:	b40c      	push	{r2, r3}
 800c97a:	4b18      	ldr	r3, [pc, #96]	@ (800c9dc <sniprintf+0x64>)
 800c97c:	b530      	push	{r4, r5, lr}
 800c97e:	1e0c      	subs	r4, r1, #0
 800c980:	b09d      	sub	sp, #116	@ 0x74
 800c982:	681d      	ldr	r5, [r3, #0]
 800c984:	da08      	bge.n	800c998 <sniprintf+0x20>
 800c986:	238b      	movs	r3, #139	@ 0x8b
 800c988:	f04f 30ff 	mov.w	r0, #4294967295
 800c98c:	602b      	str	r3, [r5, #0]
 800c98e:	b01d      	add	sp, #116	@ 0x74
 800c990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c994:	b002      	add	sp, #8
 800c996:	4770      	bx	lr
 800c998:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c99c:	9002      	str	r0, [sp, #8]
 800c99e:	9006      	str	r0, [sp, #24]
 800c9a0:	a902      	add	r1, sp, #8
 800c9a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c9a6:	bf14      	ite	ne
 800c9a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c9ac:	4623      	moveq	r3, r4
 800c9ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	9304      	str	r3, [sp, #16]
 800c9b4:	9307      	str	r3, [sp, #28]
 800c9b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c9ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c9be:	ab21      	add	r3, sp, #132	@ 0x84
 800c9c0:	9301      	str	r3, [sp, #4]
 800c9c2:	f000 fab5 	bl	800cf30 <_svfiprintf_r>
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	bfbc      	itt	lt
 800c9ca:	238b      	movlt	r3, #139	@ 0x8b
 800c9cc:	602b      	strlt	r3, [r5, #0]
 800c9ce:	2c00      	cmp	r4, #0
 800c9d0:	d0dd      	beq.n	800c98e <sniprintf+0x16>
 800c9d2:	9b02      	ldr	r3, [sp, #8]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	701a      	strb	r2, [r3, #0]
 800c9d8:	e7d9      	b.n	800c98e <sniprintf+0x16>
 800c9da:	bf00      	nop
 800c9dc:	2000001c 	.word	0x2000001c

0800c9e0 <__sread>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9e8:	f000 f8fc 	bl	800cbe4 <_read_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	bfab      	itete	ge
 800c9f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9f4:	181b      	addge	r3, r3, r0
 800c9f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9fa:	bfac      	ite	ge
 800c9fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9fe:	81a3      	strhlt	r3, [r4, #12]
 800ca00:	bd10      	pop	{r4, pc}

0800ca02 <__swrite>:
 800ca02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca06:	461f      	mov	r7, r3
 800ca08:	898b      	ldrh	r3, [r1, #12]
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	460c      	mov	r4, r1
 800ca0e:	05db      	lsls	r3, r3, #23
 800ca10:	4616      	mov	r6, r2
 800ca12:	d505      	bpl.n	800ca20 <__swrite+0x1e>
 800ca14:	2302      	movs	r3, #2
 800ca16:	2200      	movs	r2, #0
 800ca18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca1c:	f000 f8d0 	bl	800cbc0 <_lseek_r>
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	4632      	mov	r2, r6
 800ca24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	463b      	mov	r3, r7
 800ca32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	f000 b8e7 	b.w	800cc08 <_write_r>

0800ca3a <__sseek>:
 800ca3a:	b510      	push	{r4, lr}
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca42:	f000 f8bd 	bl	800cbc0 <_lseek_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	bf15      	itete	ne
 800ca4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca56:	81a3      	strheq	r3, [r4, #12]
 800ca58:	bf18      	it	ne
 800ca5a:	81a3      	strhne	r3, [r4, #12]
 800ca5c:	bd10      	pop	{r4, pc}

0800ca5e <__sclose>:
 800ca5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca62:	f000 b89d 	b.w	800cba0 <_close_r>

0800ca66 <__swbuf_r>:
 800ca66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca68:	460e      	mov	r6, r1
 800ca6a:	4614      	mov	r4, r2
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	b118      	cbz	r0, 800ca78 <__swbuf_r+0x12>
 800ca70:	6a03      	ldr	r3, [r0, #32]
 800ca72:	b90b      	cbnz	r3, 800ca78 <__swbuf_r+0x12>
 800ca74:	f7ff feda 	bl	800c82c <__sinit>
 800ca78:	69a3      	ldr	r3, [r4, #24]
 800ca7a:	60a3      	str	r3, [r4, #8]
 800ca7c:	89a3      	ldrh	r3, [r4, #12]
 800ca7e:	071a      	lsls	r2, r3, #28
 800ca80:	d501      	bpl.n	800ca86 <__swbuf_r+0x20>
 800ca82:	6923      	ldr	r3, [r4, #16]
 800ca84:	b943      	cbnz	r3, 800ca98 <__swbuf_r+0x32>
 800ca86:	4621      	mov	r1, r4
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f000 f82b 	bl	800cae4 <__swsetup_r>
 800ca8e:	b118      	cbz	r0, 800ca98 <__swbuf_r+0x32>
 800ca90:	f04f 37ff 	mov.w	r7, #4294967295
 800ca94:	4638      	mov	r0, r7
 800ca96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	b2f6      	uxtb	r6, r6
 800ca9c:	6922      	ldr	r2, [r4, #16]
 800ca9e:	4637      	mov	r7, r6
 800caa0:	1a98      	subs	r0, r3, r2
 800caa2:	6963      	ldr	r3, [r4, #20]
 800caa4:	4283      	cmp	r3, r0
 800caa6:	dc05      	bgt.n	800cab4 <__swbuf_r+0x4e>
 800caa8:	4621      	mov	r1, r4
 800caaa:	4628      	mov	r0, r5
 800caac:	f000 fe94 	bl	800d7d8 <_fflush_r>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1ed      	bne.n	800ca90 <__swbuf_r+0x2a>
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	6022      	str	r2, [r4, #0]
 800cac0:	701e      	strb	r6, [r3, #0]
 800cac2:	1c43      	adds	r3, r0, #1
 800cac4:	6962      	ldr	r2, [r4, #20]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d004      	beq.n	800cad4 <__swbuf_r+0x6e>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	07db      	lsls	r3, r3, #31
 800cace:	d5e1      	bpl.n	800ca94 <__swbuf_r+0x2e>
 800cad0:	2e0a      	cmp	r6, #10
 800cad2:	d1df      	bne.n	800ca94 <__swbuf_r+0x2e>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 fe7e 	bl	800d7d8 <_fflush_r>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d0d9      	beq.n	800ca94 <__swbuf_r+0x2e>
 800cae0:	e7d6      	b.n	800ca90 <__swbuf_r+0x2a>
	...

0800cae4 <__swsetup_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4b29      	ldr	r3, [pc, #164]	@ (800cb8c <__swsetup_r+0xa8>)
 800cae8:	4605      	mov	r5, r0
 800caea:	460c      	mov	r4, r1
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	b118      	cbz	r0, 800caf8 <__swsetup_r+0x14>
 800caf0:	6a03      	ldr	r3, [r0, #32]
 800caf2:	b90b      	cbnz	r3, 800caf8 <__swsetup_r+0x14>
 800caf4:	f7ff fe9a 	bl	800c82c <__sinit>
 800caf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafc:	0719      	lsls	r1, r3, #28
 800cafe:	d422      	bmi.n	800cb46 <__swsetup_r+0x62>
 800cb00:	06da      	lsls	r2, r3, #27
 800cb02:	d407      	bmi.n	800cb14 <__swsetup_r+0x30>
 800cb04:	2209      	movs	r2, #9
 800cb06:	602a      	str	r2, [r5, #0]
 800cb08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	e033      	b.n	800cb7c <__swsetup_r+0x98>
 800cb14:	0758      	lsls	r0, r3, #29
 800cb16:	d512      	bpl.n	800cb3e <__swsetup_r+0x5a>
 800cb18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb1a:	b141      	cbz	r1, 800cb2e <__swsetup_r+0x4a>
 800cb1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb20:	4299      	cmp	r1, r3
 800cb22:	d002      	beq.n	800cb2a <__swsetup_r+0x46>
 800cb24:	4628      	mov	r0, r5
 800cb26:	f000 f8af 	bl	800cc88 <_free_r>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb34:	81a3      	strh	r3, [r4, #12]
 800cb36:	2300      	movs	r3, #0
 800cb38:	6063      	str	r3, [r4, #4]
 800cb3a:	6923      	ldr	r3, [r4, #16]
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f043 0308 	orr.w	r3, r3, #8
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	6923      	ldr	r3, [r4, #16]
 800cb48:	b94b      	cbnz	r3, 800cb5e <__swsetup_r+0x7a>
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb54:	d003      	beq.n	800cb5e <__swsetup_r+0x7a>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 fe8a 	bl	800d872 <__smakebuf_r>
 800cb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb62:	f013 0201 	ands.w	r2, r3, #1
 800cb66:	d00a      	beq.n	800cb7e <__swsetup_r+0x9a>
 800cb68:	2200      	movs	r2, #0
 800cb6a:	60a2      	str	r2, [r4, #8]
 800cb6c:	6962      	ldr	r2, [r4, #20]
 800cb6e:	4252      	negs	r2, r2
 800cb70:	61a2      	str	r2, [r4, #24]
 800cb72:	6922      	ldr	r2, [r4, #16]
 800cb74:	b942      	cbnz	r2, 800cb88 <__swsetup_r+0xa4>
 800cb76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb7a:	d1c5      	bne.n	800cb08 <__swsetup_r+0x24>
 800cb7c:	bd38      	pop	{r3, r4, r5, pc}
 800cb7e:	0799      	lsls	r1, r3, #30
 800cb80:	bf58      	it	pl
 800cb82:	6962      	ldrpl	r2, [r4, #20]
 800cb84:	60a2      	str	r2, [r4, #8]
 800cb86:	e7f4      	b.n	800cb72 <__swsetup_r+0x8e>
 800cb88:	2000      	movs	r0, #0
 800cb8a:	e7f7      	b.n	800cb7c <__swsetup_r+0x98>
 800cb8c:	2000001c 	.word	0x2000001c

0800cb90 <memset>:
 800cb90:	4402      	add	r2, r0
 800cb92:	4603      	mov	r3, r0
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d100      	bne.n	800cb9a <memset+0xa>
 800cb98:	4770      	bx	lr
 800cb9a:	f803 1b01 	strb.w	r1, [r3], #1
 800cb9e:	e7f9      	b.n	800cb94 <memset+0x4>

0800cba0 <_close_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	2300      	movs	r3, #0
 800cba4:	4d05      	ldr	r5, [pc, #20]	@ (800cbbc <_close_r+0x1c>)
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	602b      	str	r3, [r5, #0]
 800cbac:	f7f4 fd35 	bl	800161a <_close>
 800cbb0:	1c43      	adds	r3, r0, #1
 800cbb2:	d102      	bne.n	800cbba <_close_r+0x1a>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	b103      	cbz	r3, 800cbba <_close_r+0x1a>
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	20001b14 	.word	0x20001b14

0800cbc0 <_lseek_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4d06      	ldr	r5, [pc, #24]	@ (800cbe0 <_lseek_r+0x20>)
 800cbc6:	4608      	mov	r0, r1
 800cbc8:	4611      	mov	r1, r2
 800cbca:	2200      	movs	r2, #0
 800cbcc:	602a      	str	r2, [r5, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f7f4 fd4a 	bl	8001668 <_lseek>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_lseek_r+0x1e>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_lseek_r+0x1e>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	20001b14 	.word	0x20001b14

0800cbe4 <_read_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	4d06      	ldr	r5, [pc, #24]	@ (800cc04 <_read_r+0x20>)
 800cbea:	4608      	mov	r0, r1
 800cbec:	4611      	mov	r1, r2
 800cbee:	2200      	movs	r2, #0
 800cbf0:	602a      	str	r2, [r5, #0]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	f7f4 fcd8 	bl	80015a8 <_read>
 800cbf8:	1c43      	adds	r3, r0, #1
 800cbfa:	d102      	bne.n	800cc02 <_read_r+0x1e>
 800cbfc:	682b      	ldr	r3, [r5, #0]
 800cbfe:	b103      	cbz	r3, 800cc02 <_read_r+0x1e>
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	bd38      	pop	{r3, r4, r5, pc}
 800cc04:	20001b14 	.word	0x20001b14

0800cc08 <_write_r>:
 800cc08:	b538      	push	{r3, r4, r5, lr}
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4d06      	ldr	r5, [pc, #24]	@ (800cc28 <_write_r+0x20>)
 800cc0e:	4608      	mov	r0, r1
 800cc10:	4611      	mov	r1, r2
 800cc12:	2200      	movs	r2, #0
 800cc14:	602a      	str	r2, [r5, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	f7f4 fce3 	bl	80015e2 <_write>
 800cc1c:	1c43      	adds	r3, r0, #1
 800cc1e:	d102      	bne.n	800cc26 <_write_r+0x1e>
 800cc20:	682b      	ldr	r3, [r5, #0]
 800cc22:	b103      	cbz	r3, 800cc26 <_write_r+0x1e>
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	bd38      	pop	{r3, r4, r5, pc}
 800cc28:	20001b14 	.word	0x20001b14

0800cc2c <__errno>:
 800cc2c:	4b01      	ldr	r3, [pc, #4]	@ (800cc34 <__errno+0x8>)
 800cc2e:	6818      	ldr	r0, [r3, #0]
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	2000001c 	.word	0x2000001c

0800cc38 <__libc_init_array>:
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	4d0d      	ldr	r5, [pc, #52]	@ (800cc70 <__libc_init_array+0x38>)
 800cc3c:	2600      	movs	r6, #0
 800cc3e:	4c0d      	ldr	r4, [pc, #52]	@ (800cc74 <__libc_init_array+0x3c>)
 800cc40:	1b64      	subs	r4, r4, r5
 800cc42:	10a4      	asrs	r4, r4, #2
 800cc44:	42a6      	cmp	r6, r4
 800cc46:	d109      	bne.n	800cc5c <__libc_init_array+0x24>
 800cc48:	4d0b      	ldr	r5, [pc, #44]	@ (800cc78 <__libc_init_array+0x40>)
 800cc4a:	2600      	movs	r6, #0
 800cc4c:	4c0b      	ldr	r4, [pc, #44]	@ (800cc7c <__libc_init_array+0x44>)
 800cc4e:	f000 feeb 	bl	800da28 <_init>
 800cc52:	1b64      	subs	r4, r4, r5
 800cc54:	10a4      	asrs	r4, r4, #2
 800cc56:	42a6      	cmp	r6, r4
 800cc58:	d105      	bne.n	800cc66 <__libc_init_array+0x2e>
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}
 800cc5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc60:	3601      	adds	r6, #1
 800cc62:	4798      	blx	r3
 800cc64:	e7ee      	b.n	800cc44 <__libc_init_array+0xc>
 800cc66:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc6a:	3601      	adds	r6, #1
 800cc6c:	4798      	blx	r3
 800cc6e:	e7f2      	b.n	800cc56 <__libc_init_array+0x1e>
 800cc70:	0800db80 	.word	0x0800db80
 800cc74:	0800db80 	.word	0x0800db80
 800cc78:	0800db80 	.word	0x0800db80
 800cc7c:	0800db84 	.word	0x0800db84

0800cc80 <__retarget_lock_init_recursive>:
 800cc80:	4770      	bx	lr

0800cc82 <__retarget_lock_acquire_recursive>:
 800cc82:	4770      	bx	lr

0800cc84 <__retarget_lock_release_recursive>:
 800cc84:	4770      	bx	lr
	...

0800cc88 <_free_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	2900      	cmp	r1, #0
 800cc8e:	d041      	beq.n	800cd14 <_free_r+0x8c>
 800cc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc94:	1f0c      	subs	r4, r1, #4
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	bfb8      	it	lt
 800cc9a:	18e4      	addlt	r4, r4, r3
 800cc9c:	f000 f8e0 	bl	800ce60 <__malloc_lock>
 800cca0:	4a1d      	ldr	r2, [pc, #116]	@ (800cd18 <_free_r+0x90>)
 800cca2:	6813      	ldr	r3, [r2, #0]
 800cca4:	b933      	cbnz	r3, 800ccb4 <_free_r+0x2c>
 800cca6:	6063      	str	r3, [r4, #4]
 800cca8:	6014      	str	r4, [r2, #0]
 800ccaa:	4628      	mov	r0, r5
 800ccac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccb0:	f000 b8dc 	b.w	800ce6c <__malloc_unlock>
 800ccb4:	42a3      	cmp	r3, r4
 800ccb6:	d908      	bls.n	800ccca <_free_r+0x42>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	1821      	adds	r1, r4, r0
 800ccbc:	428b      	cmp	r3, r1
 800ccbe:	bf01      	itttt	eq
 800ccc0:	6819      	ldreq	r1, [r3, #0]
 800ccc2:	685b      	ldreq	r3, [r3, #4]
 800ccc4:	1809      	addeq	r1, r1, r0
 800ccc6:	6021      	streq	r1, [r4, #0]
 800ccc8:	e7ed      	b.n	800cca6 <_free_r+0x1e>
 800ccca:	461a      	mov	r2, r3
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	b10b      	cbz	r3, 800ccd4 <_free_r+0x4c>
 800ccd0:	42a3      	cmp	r3, r4
 800ccd2:	d9fa      	bls.n	800ccca <_free_r+0x42>
 800ccd4:	6811      	ldr	r1, [r2, #0]
 800ccd6:	1850      	adds	r0, r2, r1
 800ccd8:	42a0      	cmp	r0, r4
 800ccda:	d10b      	bne.n	800ccf4 <_free_r+0x6c>
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	4401      	add	r1, r0
 800cce0:	1850      	adds	r0, r2, r1
 800cce2:	6011      	str	r1, [r2, #0]
 800cce4:	4283      	cmp	r3, r0
 800cce6:	d1e0      	bne.n	800ccaa <_free_r+0x22>
 800cce8:	6818      	ldr	r0, [r3, #0]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	4408      	add	r0, r1
 800ccee:	6053      	str	r3, [r2, #4]
 800ccf0:	6010      	str	r0, [r2, #0]
 800ccf2:	e7da      	b.n	800ccaa <_free_r+0x22>
 800ccf4:	d902      	bls.n	800ccfc <_free_r+0x74>
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	e7d6      	b.n	800ccaa <_free_r+0x22>
 800ccfc:	6820      	ldr	r0, [r4, #0]
 800ccfe:	1821      	adds	r1, r4, r0
 800cd00:	428b      	cmp	r3, r1
 800cd02:	bf02      	ittt	eq
 800cd04:	6819      	ldreq	r1, [r3, #0]
 800cd06:	685b      	ldreq	r3, [r3, #4]
 800cd08:	1809      	addeq	r1, r1, r0
 800cd0a:	6063      	str	r3, [r4, #4]
 800cd0c:	bf08      	it	eq
 800cd0e:	6021      	streq	r1, [r4, #0]
 800cd10:	6054      	str	r4, [r2, #4]
 800cd12:	e7ca      	b.n	800ccaa <_free_r+0x22>
 800cd14:	bd38      	pop	{r3, r4, r5, pc}
 800cd16:	bf00      	nop
 800cd18:	20001b20 	.word	0x20001b20

0800cd1c <sbrk_aligned>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4e0f      	ldr	r6, [pc, #60]	@ (800cd5c <sbrk_aligned+0x40>)
 800cd20:	460c      	mov	r4, r1
 800cd22:	4605      	mov	r5, r0
 800cd24:	6831      	ldr	r1, [r6, #0]
 800cd26:	b911      	cbnz	r1, 800cd2e <sbrk_aligned+0x12>
 800cd28:	f000 fe1c 	bl	800d964 <_sbrk_r>
 800cd2c:	6030      	str	r0, [r6, #0]
 800cd2e:	4621      	mov	r1, r4
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 fe17 	bl	800d964 <_sbrk_r>
 800cd36:	1c43      	adds	r3, r0, #1
 800cd38:	d103      	bne.n	800cd42 <sbrk_aligned+0x26>
 800cd3a:	f04f 34ff 	mov.w	r4, #4294967295
 800cd3e:	4620      	mov	r0, r4
 800cd40:	bd70      	pop	{r4, r5, r6, pc}
 800cd42:	1cc4      	adds	r4, r0, #3
 800cd44:	f024 0403 	bic.w	r4, r4, #3
 800cd48:	42a0      	cmp	r0, r4
 800cd4a:	d0f8      	beq.n	800cd3e <sbrk_aligned+0x22>
 800cd4c:	1a21      	subs	r1, r4, r0
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f000 fe08 	bl	800d964 <_sbrk_r>
 800cd54:	3001      	adds	r0, #1
 800cd56:	d1f2      	bne.n	800cd3e <sbrk_aligned+0x22>
 800cd58:	e7ef      	b.n	800cd3a <sbrk_aligned+0x1e>
 800cd5a:	bf00      	nop
 800cd5c:	20001b1c 	.word	0x20001b1c

0800cd60 <_malloc_r>:
 800cd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd64:	1ccd      	adds	r5, r1, #3
 800cd66:	4606      	mov	r6, r0
 800cd68:	f025 0503 	bic.w	r5, r5, #3
 800cd6c:	3508      	adds	r5, #8
 800cd6e:	2d0c      	cmp	r5, #12
 800cd70:	bf38      	it	cc
 800cd72:	250c      	movcc	r5, #12
 800cd74:	2d00      	cmp	r5, #0
 800cd76:	db01      	blt.n	800cd7c <_malloc_r+0x1c>
 800cd78:	42a9      	cmp	r1, r5
 800cd7a:	d904      	bls.n	800cd86 <_malloc_r+0x26>
 800cd7c:	230c      	movs	r3, #12
 800cd7e:	6033      	str	r3, [r6, #0]
 800cd80:	2000      	movs	r0, #0
 800cd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce5c <_malloc_r+0xfc>
 800cd8a:	f000 f869 	bl	800ce60 <__malloc_lock>
 800cd8e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd92:	461c      	mov	r4, r3
 800cd94:	bb44      	cbnz	r4, 800cde8 <_malloc_r+0x88>
 800cd96:	4629      	mov	r1, r5
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff ffbf 	bl	800cd1c <sbrk_aligned>
 800cd9e:	1c43      	adds	r3, r0, #1
 800cda0:	4604      	mov	r4, r0
 800cda2:	d158      	bne.n	800ce56 <_malloc_r+0xf6>
 800cda4:	f8d8 4000 	ldr.w	r4, [r8]
 800cda8:	4627      	mov	r7, r4
 800cdaa:	2f00      	cmp	r7, #0
 800cdac:	d143      	bne.n	800ce36 <_malloc_r+0xd6>
 800cdae:	2c00      	cmp	r4, #0
 800cdb0:	d04b      	beq.n	800ce4a <_malloc_r+0xea>
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	eb04 0903 	add.w	r9, r4, r3
 800cdbc:	f000 fdd2 	bl	800d964 <_sbrk_r>
 800cdc0:	4581      	cmp	r9, r0
 800cdc2:	d142      	bne.n	800ce4a <_malloc_r+0xea>
 800cdc4:	6821      	ldr	r1, [r4, #0]
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	1a6d      	subs	r5, r5, r1
 800cdca:	4629      	mov	r1, r5
 800cdcc:	f7ff ffa6 	bl	800cd1c <sbrk_aligned>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d03a      	beq.n	800ce4a <_malloc_r+0xea>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	442b      	add	r3, r5
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	f8d8 3000 	ldr.w	r3, [r8]
 800cdde:	685a      	ldr	r2, [r3, #4]
 800cde0:	bb62      	cbnz	r2, 800ce3c <_malloc_r+0xdc>
 800cde2:	f8c8 7000 	str.w	r7, [r8]
 800cde6:	e00f      	b.n	800ce08 <_malloc_r+0xa8>
 800cde8:	6822      	ldr	r2, [r4, #0]
 800cdea:	1b52      	subs	r2, r2, r5
 800cdec:	d420      	bmi.n	800ce30 <_malloc_r+0xd0>
 800cdee:	2a0b      	cmp	r2, #11
 800cdf0:	d917      	bls.n	800ce22 <_malloc_r+0xc2>
 800cdf2:	1961      	adds	r1, r4, r5
 800cdf4:	42a3      	cmp	r3, r4
 800cdf6:	6025      	str	r5, [r4, #0]
 800cdf8:	bf18      	it	ne
 800cdfa:	6059      	strne	r1, [r3, #4]
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	bf08      	it	eq
 800ce00:	f8c8 1000 	streq.w	r1, [r8]
 800ce04:	5162      	str	r2, [r4, r5]
 800ce06:	604b      	str	r3, [r1, #4]
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f000 f82f 	bl	800ce6c <__malloc_unlock>
 800ce0e:	f104 000b 	add.w	r0, r4, #11
 800ce12:	1d23      	adds	r3, r4, #4
 800ce14:	f020 0007 	bic.w	r0, r0, #7
 800ce18:	1ac2      	subs	r2, r0, r3
 800ce1a:	bf1c      	itt	ne
 800ce1c:	1a1b      	subne	r3, r3, r0
 800ce1e:	50a3      	strne	r3, [r4, r2]
 800ce20:	e7af      	b.n	800cd82 <_malloc_r+0x22>
 800ce22:	6862      	ldr	r2, [r4, #4]
 800ce24:	42a3      	cmp	r3, r4
 800ce26:	bf0c      	ite	eq
 800ce28:	f8c8 2000 	streq.w	r2, [r8]
 800ce2c:	605a      	strne	r2, [r3, #4]
 800ce2e:	e7eb      	b.n	800ce08 <_malloc_r+0xa8>
 800ce30:	4623      	mov	r3, r4
 800ce32:	6864      	ldr	r4, [r4, #4]
 800ce34:	e7ae      	b.n	800cd94 <_malloc_r+0x34>
 800ce36:	463c      	mov	r4, r7
 800ce38:	687f      	ldr	r7, [r7, #4]
 800ce3a:	e7b6      	b.n	800cdaa <_malloc_r+0x4a>
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	42a3      	cmp	r3, r4
 800ce42:	d1fb      	bne.n	800ce3c <_malloc_r+0xdc>
 800ce44:	2300      	movs	r3, #0
 800ce46:	6053      	str	r3, [r2, #4]
 800ce48:	e7de      	b.n	800ce08 <_malloc_r+0xa8>
 800ce4a:	230c      	movs	r3, #12
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	6033      	str	r3, [r6, #0]
 800ce50:	f000 f80c 	bl	800ce6c <__malloc_unlock>
 800ce54:	e794      	b.n	800cd80 <_malloc_r+0x20>
 800ce56:	6005      	str	r5, [r0, #0]
 800ce58:	e7d6      	b.n	800ce08 <_malloc_r+0xa8>
 800ce5a:	bf00      	nop
 800ce5c:	20001b20 	.word	0x20001b20

0800ce60 <__malloc_lock>:
 800ce60:	4801      	ldr	r0, [pc, #4]	@ (800ce68 <__malloc_lock+0x8>)
 800ce62:	f7ff bf0e 	b.w	800cc82 <__retarget_lock_acquire_recursive>
 800ce66:	bf00      	nop
 800ce68:	20001b18 	.word	0x20001b18

0800ce6c <__malloc_unlock>:
 800ce6c:	4801      	ldr	r0, [pc, #4]	@ (800ce74 <__malloc_unlock+0x8>)
 800ce6e:	f7ff bf09 	b.w	800cc84 <__retarget_lock_release_recursive>
 800ce72:	bf00      	nop
 800ce74:	20001b18 	.word	0x20001b18

0800ce78 <__ssputs_r>:
 800ce78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce7c:	461f      	mov	r7, r3
 800ce7e:	688e      	ldr	r6, [r1, #8]
 800ce80:	4682      	mov	sl, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	42be      	cmp	r6, r7
 800ce86:	4690      	mov	r8, r2
 800ce88:	680b      	ldr	r3, [r1, #0]
 800ce8a:	d82d      	bhi.n	800cee8 <__ssputs_r+0x70>
 800ce8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce94:	d026      	beq.n	800cee4 <__ssputs_r+0x6c>
 800ce96:	6965      	ldr	r5, [r4, #20]
 800ce98:	6909      	ldr	r1, [r1, #16]
 800ce9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce9e:	eba3 0901 	sub.w	r9, r3, r1
 800cea2:	1c7b      	adds	r3, r7, #1
 800cea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cea8:	444b      	add	r3, r9
 800ceaa:	106d      	asrs	r5, r5, #1
 800ceac:	429d      	cmp	r5, r3
 800ceae:	bf38      	it	cc
 800ceb0:	461d      	movcc	r5, r3
 800ceb2:	0553      	lsls	r3, r2, #21
 800ceb4:	d527      	bpl.n	800cf06 <__ssputs_r+0x8e>
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	f7ff ff52 	bl	800cd60 <_malloc_r>
 800cebc:	4606      	mov	r6, r0
 800cebe:	b360      	cbz	r0, 800cf1a <__ssputs_r+0xa2>
 800cec0:	464a      	mov	r2, r9
 800cec2:	6921      	ldr	r1, [r4, #16]
 800cec4:	f000 fd6c 	bl	800d9a0 <memcpy>
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ced2:	81a3      	strh	r3, [r4, #12]
 800ced4:	6126      	str	r6, [r4, #16]
 800ced6:	444e      	add	r6, r9
 800ced8:	6165      	str	r5, [r4, #20]
 800ceda:	eba5 0509 	sub.w	r5, r5, r9
 800cede:	6026      	str	r6, [r4, #0]
 800cee0:	463e      	mov	r6, r7
 800cee2:	60a5      	str	r5, [r4, #8]
 800cee4:	42be      	cmp	r6, r7
 800cee6:	d900      	bls.n	800ceea <__ssputs_r+0x72>
 800cee8:	463e      	mov	r6, r7
 800ceea:	4632      	mov	r2, r6
 800ceec:	4641      	mov	r1, r8
 800ceee:	6820      	ldr	r0, [r4, #0]
 800cef0:	f000 fcfb 	bl	800d8ea <memmove>
 800cef4:	68a3      	ldr	r3, [r4, #8]
 800cef6:	2000      	movs	r0, #0
 800cef8:	1b9b      	subs	r3, r3, r6
 800cefa:	60a3      	str	r3, [r4, #8]
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	4433      	add	r3, r6
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf06:	462a      	mov	r2, r5
 800cf08:	f000 fd57 	bl	800d9ba <_realloc_r>
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d1e0      	bne.n	800ced4 <__ssputs_r+0x5c>
 800cf12:	6921      	ldr	r1, [r4, #16]
 800cf14:	4650      	mov	r0, sl
 800cf16:	f7ff feb7 	bl	800cc88 <_free_r>
 800cf1a:	230c      	movs	r3, #12
 800cf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf20:	f8ca 3000 	str.w	r3, [sl]
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf2a:	81a3      	strh	r3, [r4, #12]
 800cf2c:	e7e9      	b.n	800cf02 <__ssputs_r+0x8a>
	...

0800cf30 <_svfiprintf_r>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	4698      	mov	r8, r3
 800cf36:	898b      	ldrh	r3, [r1, #12]
 800cf38:	b09d      	sub	sp, #116	@ 0x74
 800cf3a:	4607      	mov	r7, r0
 800cf3c:	061b      	lsls	r3, r3, #24
 800cf3e:	460d      	mov	r5, r1
 800cf40:	4614      	mov	r4, r2
 800cf42:	d510      	bpl.n	800cf66 <_svfiprintf_r+0x36>
 800cf44:	690b      	ldr	r3, [r1, #16]
 800cf46:	b973      	cbnz	r3, 800cf66 <_svfiprintf_r+0x36>
 800cf48:	2140      	movs	r1, #64	@ 0x40
 800cf4a:	f7ff ff09 	bl	800cd60 <_malloc_r>
 800cf4e:	6028      	str	r0, [r5, #0]
 800cf50:	6128      	str	r0, [r5, #16]
 800cf52:	b930      	cbnz	r0, 800cf62 <_svfiprintf_r+0x32>
 800cf54:	230c      	movs	r3, #12
 800cf56:	603b      	str	r3, [r7, #0]
 800cf58:	f04f 30ff 	mov.w	r0, #4294967295
 800cf5c:	b01d      	add	sp, #116	@ 0x74
 800cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf62:	2340      	movs	r3, #64	@ 0x40
 800cf64:	616b      	str	r3, [r5, #20]
 800cf66:	2300      	movs	r3, #0
 800cf68:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf6c:	f04f 0901 	mov.w	r9, #1
 800cf70:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800d114 <_svfiprintf_r+0x1e4>
 800cf74:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf76:	2320      	movs	r3, #32
 800cf78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf7c:	2330      	movs	r3, #48	@ 0x30
 800cf7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf82:	4623      	mov	r3, r4
 800cf84:	469a      	mov	sl, r3
 800cf86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf8a:	b10a      	cbz	r2, 800cf90 <_svfiprintf_r+0x60>
 800cf8c:	2a25      	cmp	r2, #37	@ 0x25
 800cf8e:	d1f9      	bne.n	800cf84 <_svfiprintf_r+0x54>
 800cf90:	ebba 0b04 	subs.w	fp, sl, r4
 800cf94:	d00b      	beq.n	800cfae <_svfiprintf_r+0x7e>
 800cf96:	465b      	mov	r3, fp
 800cf98:	4622      	mov	r2, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	f7ff ff6b 	bl	800ce78 <__ssputs_r>
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f000 80a7 	beq.w	800d0f6 <_svfiprintf_r+0x1c6>
 800cfa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfaa:	445a      	add	r2, fp
 800cfac:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfae:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 809f 	beq.w	800d0f6 <_svfiprintf_r+0x1c6>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f04f 32ff 	mov.w	r2, #4294967295
 800cfbe:	f10a 0a01 	add.w	sl, sl, #1
 800cfc2:	9304      	str	r3, [sp, #16]
 800cfc4:	9307      	str	r3, [sp, #28]
 800cfc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfca:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfd0:	4654      	mov	r4, sl
 800cfd2:	2205      	movs	r2, #5
 800cfd4:	484f      	ldr	r0, [pc, #316]	@ (800d114 <_svfiprintf_r+0x1e4>)
 800cfd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfda:	f000 fcd3 	bl	800d984 <memchr>
 800cfde:	9a04      	ldr	r2, [sp, #16]
 800cfe0:	b9d8      	cbnz	r0, 800d01a <_svfiprintf_r+0xea>
 800cfe2:	06d0      	lsls	r0, r2, #27
 800cfe4:	bf44      	itt	mi
 800cfe6:	2320      	movmi	r3, #32
 800cfe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfec:	0711      	lsls	r1, r2, #28
 800cfee:	bf44      	itt	mi
 800cff0:	232b      	movmi	r3, #43	@ 0x2b
 800cff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cff6:	f89a 3000 	ldrb.w	r3, [sl]
 800cffa:	2b2a      	cmp	r3, #42	@ 0x2a
 800cffc:	d015      	beq.n	800d02a <_svfiprintf_r+0xfa>
 800cffe:	9a07      	ldr	r2, [sp, #28]
 800d000:	4654      	mov	r4, sl
 800d002:	2000      	movs	r0, #0
 800d004:	f04f 0c0a 	mov.w	ip, #10
 800d008:	4621      	mov	r1, r4
 800d00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d00e:	3b30      	subs	r3, #48	@ 0x30
 800d010:	2b09      	cmp	r3, #9
 800d012:	d94b      	bls.n	800d0ac <_svfiprintf_r+0x17c>
 800d014:	b1b0      	cbz	r0, 800d044 <_svfiprintf_r+0x114>
 800d016:	9207      	str	r2, [sp, #28]
 800d018:	e014      	b.n	800d044 <_svfiprintf_r+0x114>
 800d01a:	eba0 0308 	sub.w	r3, r0, r8
 800d01e:	46a2      	mov	sl, r4
 800d020:	fa09 f303 	lsl.w	r3, r9, r3
 800d024:	4313      	orrs	r3, r2
 800d026:	9304      	str	r3, [sp, #16]
 800d028:	e7d2      	b.n	800cfd0 <_svfiprintf_r+0xa0>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	1d19      	adds	r1, r3, #4
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	9103      	str	r1, [sp, #12]
 800d034:	bfbb      	ittet	lt
 800d036:	425b      	neglt	r3, r3
 800d038:	f042 0202 	orrlt.w	r2, r2, #2
 800d03c:	9307      	strge	r3, [sp, #28]
 800d03e:	9307      	strlt	r3, [sp, #28]
 800d040:	bfb8      	it	lt
 800d042:	9204      	strlt	r2, [sp, #16]
 800d044:	7823      	ldrb	r3, [r4, #0]
 800d046:	2b2e      	cmp	r3, #46	@ 0x2e
 800d048:	d10a      	bne.n	800d060 <_svfiprintf_r+0x130>
 800d04a:	7863      	ldrb	r3, [r4, #1]
 800d04c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d04e:	d132      	bne.n	800d0b6 <_svfiprintf_r+0x186>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	3402      	adds	r4, #2
 800d054:	1d1a      	adds	r2, r3, #4
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d05c:	9203      	str	r2, [sp, #12]
 800d05e:	9305      	str	r3, [sp, #20]
 800d060:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d124 <_svfiprintf_r+0x1f4>
 800d064:	2203      	movs	r2, #3
 800d066:	7821      	ldrb	r1, [r4, #0]
 800d068:	4650      	mov	r0, sl
 800d06a:	f000 fc8b 	bl	800d984 <memchr>
 800d06e:	b138      	cbz	r0, 800d080 <_svfiprintf_r+0x150>
 800d070:	eba0 000a 	sub.w	r0, r0, sl
 800d074:	2240      	movs	r2, #64	@ 0x40
 800d076:	9b04      	ldr	r3, [sp, #16]
 800d078:	3401      	adds	r4, #1
 800d07a:	4082      	lsls	r2, r0
 800d07c:	4313      	orrs	r3, r2
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d084:	2206      	movs	r2, #6
 800d086:	4824      	ldr	r0, [pc, #144]	@ (800d118 <_svfiprintf_r+0x1e8>)
 800d088:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d08c:	f000 fc7a 	bl	800d984 <memchr>
 800d090:	2800      	cmp	r0, #0
 800d092:	d036      	beq.n	800d102 <_svfiprintf_r+0x1d2>
 800d094:	4b21      	ldr	r3, [pc, #132]	@ (800d11c <_svfiprintf_r+0x1ec>)
 800d096:	bb1b      	cbnz	r3, 800d0e0 <_svfiprintf_r+0x1b0>
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	3307      	adds	r3, #7
 800d09c:	f023 0307 	bic.w	r3, r3, #7
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a6:	4433      	add	r3, r6
 800d0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0aa:	e76a      	b.n	800cf82 <_svfiprintf_r+0x52>
 800d0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	e7a8      	b.n	800d008 <_svfiprintf_r+0xd8>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	3401      	adds	r4, #1
 800d0ba:	f04f 0c0a 	mov.w	ip, #10
 800d0be:	4619      	mov	r1, r3
 800d0c0:	9305      	str	r3, [sp, #20]
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c8:	3a30      	subs	r2, #48	@ 0x30
 800d0ca:	2a09      	cmp	r2, #9
 800d0cc:	d903      	bls.n	800d0d6 <_svfiprintf_r+0x1a6>
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0c6      	beq.n	800d060 <_svfiprintf_r+0x130>
 800d0d2:	9105      	str	r1, [sp, #20]
 800d0d4:	e7c4      	b.n	800d060 <_svfiprintf_r+0x130>
 800d0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0da:	4604      	mov	r4, r0
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e7f0      	b.n	800d0c2 <_svfiprintf_r+0x192>
 800d0e0:	ab03      	add	r3, sp, #12
 800d0e2:	462a      	mov	r2, r5
 800d0e4:	a904      	add	r1, sp, #16
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d120 <_svfiprintf_r+0x1f0>)
 800d0ec:	f3af 8000 	nop.w
 800d0f0:	1c42      	adds	r2, r0, #1
 800d0f2:	4606      	mov	r6, r0
 800d0f4:	d1d6      	bne.n	800d0a4 <_svfiprintf_r+0x174>
 800d0f6:	89ab      	ldrh	r3, [r5, #12]
 800d0f8:	065b      	lsls	r3, r3, #25
 800d0fa:	f53f af2d 	bmi.w	800cf58 <_svfiprintf_r+0x28>
 800d0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d100:	e72c      	b.n	800cf5c <_svfiprintf_r+0x2c>
 800d102:	ab03      	add	r3, sp, #12
 800d104:	462a      	mov	r2, r5
 800d106:	a904      	add	r1, sp, #16
 800d108:	4638      	mov	r0, r7
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	4b04      	ldr	r3, [pc, #16]	@ (800d120 <_svfiprintf_r+0x1f0>)
 800d10e:	f000 f9bf 	bl	800d490 <_printf_i>
 800d112:	e7ed      	b.n	800d0f0 <_svfiprintf_r+0x1c0>
 800d114:	0800db44 	.word	0x0800db44
 800d118:	0800db4e 	.word	0x0800db4e
 800d11c:	00000000 	.word	0x00000000
 800d120:	0800ce79 	.word	0x0800ce79
 800d124:	0800db4a 	.word	0x0800db4a

0800d128 <__sfputc_r>:
 800d128:	6893      	ldr	r3, [r2, #8]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	6093      	str	r3, [r2, #8]
 800d130:	b410      	push	{r4}
 800d132:	da08      	bge.n	800d146 <__sfputc_r+0x1e>
 800d134:	6994      	ldr	r4, [r2, #24]
 800d136:	42a3      	cmp	r3, r4
 800d138:	db01      	blt.n	800d13e <__sfputc_r+0x16>
 800d13a:	290a      	cmp	r1, #10
 800d13c:	d103      	bne.n	800d146 <__sfputc_r+0x1e>
 800d13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d142:	f7ff bc90 	b.w	800ca66 <__swbuf_r>
 800d146:	6813      	ldr	r3, [r2, #0]
 800d148:	1c58      	adds	r0, r3, #1
 800d14a:	6010      	str	r0, [r2, #0]
 800d14c:	4608      	mov	r0, r1
 800d14e:	7019      	strb	r1, [r3, #0]
 800d150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <__sfputs_r>:
 800d156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d158:	4606      	mov	r6, r0
 800d15a:	460f      	mov	r7, r1
 800d15c:	4614      	mov	r4, r2
 800d15e:	18d5      	adds	r5, r2, r3
 800d160:	42ac      	cmp	r4, r5
 800d162:	d101      	bne.n	800d168 <__sfputs_r+0x12>
 800d164:	2000      	movs	r0, #0
 800d166:	e007      	b.n	800d178 <__sfputs_r+0x22>
 800d168:	463a      	mov	r2, r7
 800d16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16e:	4630      	mov	r0, r6
 800d170:	f7ff ffda 	bl	800d128 <__sfputc_r>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d1f3      	bne.n	800d160 <__sfputs_r+0xa>
 800d178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d17c <_vfiprintf_r>:
 800d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d180:	460d      	mov	r5, r1
 800d182:	b09d      	sub	sp, #116	@ 0x74
 800d184:	4614      	mov	r4, r2
 800d186:	4698      	mov	r8, r3
 800d188:	4606      	mov	r6, r0
 800d18a:	b118      	cbz	r0, 800d194 <_vfiprintf_r+0x18>
 800d18c:	6a03      	ldr	r3, [r0, #32]
 800d18e:	b90b      	cbnz	r3, 800d194 <_vfiprintf_r+0x18>
 800d190:	f7ff fb4c 	bl	800c82c <__sinit>
 800d194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d196:	07d9      	lsls	r1, r3, #31
 800d198:	d405      	bmi.n	800d1a6 <_vfiprintf_r+0x2a>
 800d19a:	89ab      	ldrh	r3, [r5, #12]
 800d19c:	059a      	lsls	r2, r3, #22
 800d19e:	d402      	bmi.n	800d1a6 <_vfiprintf_r+0x2a>
 800d1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1a2:	f7ff fd6e 	bl	800cc82 <__retarget_lock_acquire_recursive>
 800d1a6:	89ab      	ldrh	r3, [r5, #12]
 800d1a8:	071b      	lsls	r3, r3, #28
 800d1aa:	d501      	bpl.n	800d1b0 <_vfiprintf_r+0x34>
 800d1ac:	692b      	ldr	r3, [r5, #16]
 800d1ae:	b99b      	cbnz	r3, 800d1d8 <_vfiprintf_r+0x5c>
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff fc96 	bl	800cae4 <__swsetup_r>
 800d1b8:	b170      	cbz	r0, 800d1d8 <_vfiprintf_r+0x5c>
 800d1ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1bc:	07dc      	lsls	r4, r3, #31
 800d1be:	d504      	bpl.n	800d1ca <_vfiprintf_r+0x4e>
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c4:	b01d      	add	sp, #116	@ 0x74
 800d1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ca:	89ab      	ldrh	r3, [r5, #12]
 800d1cc:	0598      	lsls	r0, r3, #22
 800d1ce:	d4f7      	bmi.n	800d1c0 <_vfiprintf_r+0x44>
 800d1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1d2:	f7ff fd57 	bl	800cc84 <__retarget_lock_release_recursive>
 800d1d6:	e7f3      	b.n	800d1c0 <_vfiprintf_r+0x44>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1de:	f04f 0901 	mov.w	r9, #1
 800d1e2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d398 <_vfiprintf_r+0x21c>
 800d1e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1e8:	2320      	movs	r3, #32
 800d1ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1ee:	2330      	movs	r3, #48	@ 0x30
 800d1f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1f4:	4623      	mov	r3, r4
 800d1f6:	469a      	mov	sl, r3
 800d1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1fc:	b10a      	cbz	r2, 800d202 <_vfiprintf_r+0x86>
 800d1fe:	2a25      	cmp	r2, #37	@ 0x25
 800d200:	d1f9      	bne.n	800d1f6 <_vfiprintf_r+0x7a>
 800d202:	ebba 0b04 	subs.w	fp, sl, r4
 800d206:	d00b      	beq.n	800d220 <_vfiprintf_r+0xa4>
 800d208:	465b      	mov	r3, fp
 800d20a:	4622      	mov	r2, r4
 800d20c:	4629      	mov	r1, r5
 800d20e:	4630      	mov	r0, r6
 800d210:	f7ff ffa1 	bl	800d156 <__sfputs_r>
 800d214:	3001      	adds	r0, #1
 800d216:	f000 80a7 	beq.w	800d368 <_vfiprintf_r+0x1ec>
 800d21a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d21c:	445a      	add	r2, fp
 800d21e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d220:	f89a 3000 	ldrb.w	r3, [sl]
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 809f 	beq.w	800d368 <_vfiprintf_r+0x1ec>
 800d22a:	2300      	movs	r3, #0
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295
 800d230:	f10a 0a01 	add.w	sl, sl, #1
 800d234:	9304      	str	r3, [sp, #16]
 800d236:	9307      	str	r3, [sp, #28]
 800d238:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d23c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d23e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d242:	4654      	mov	r4, sl
 800d244:	2205      	movs	r2, #5
 800d246:	4854      	ldr	r0, [pc, #336]	@ (800d398 <_vfiprintf_r+0x21c>)
 800d248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d24c:	f000 fb9a 	bl	800d984 <memchr>
 800d250:	9a04      	ldr	r2, [sp, #16]
 800d252:	b9d8      	cbnz	r0, 800d28c <_vfiprintf_r+0x110>
 800d254:	06d1      	lsls	r1, r2, #27
 800d256:	bf44      	itt	mi
 800d258:	2320      	movmi	r3, #32
 800d25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d25e:	0713      	lsls	r3, r2, #28
 800d260:	bf44      	itt	mi
 800d262:	232b      	movmi	r3, #43	@ 0x2b
 800d264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d268:	f89a 3000 	ldrb.w	r3, [sl]
 800d26c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d26e:	d015      	beq.n	800d29c <_vfiprintf_r+0x120>
 800d270:	9a07      	ldr	r2, [sp, #28]
 800d272:	4654      	mov	r4, sl
 800d274:	2000      	movs	r0, #0
 800d276:	f04f 0c0a 	mov.w	ip, #10
 800d27a:	4621      	mov	r1, r4
 800d27c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d280:	3b30      	subs	r3, #48	@ 0x30
 800d282:	2b09      	cmp	r3, #9
 800d284:	d94b      	bls.n	800d31e <_vfiprintf_r+0x1a2>
 800d286:	b1b0      	cbz	r0, 800d2b6 <_vfiprintf_r+0x13a>
 800d288:	9207      	str	r2, [sp, #28]
 800d28a:	e014      	b.n	800d2b6 <_vfiprintf_r+0x13a>
 800d28c:	eba0 0308 	sub.w	r3, r0, r8
 800d290:	46a2      	mov	sl, r4
 800d292:	fa09 f303 	lsl.w	r3, r9, r3
 800d296:	4313      	orrs	r3, r2
 800d298:	9304      	str	r3, [sp, #16]
 800d29a:	e7d2      	b.n	800d242 <_vfiprintf_r+0xc6>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	1d19      	adds	r1, r3, #4
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	9103      	str	r1, [sp, #12]
 800d2a6:	bfbb      	ittet	lt
 800d2a8:	425b      	neglt	r3, r3
 800d2aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ae:	9307      	strge	r3, [sp, #28]
 800d2b0:	9307      	strlt	r3, [sp, #28]
 800d2b2:	bfb8      	it	lt
 800d2b4:	9204      	strlt	r2, [sp, #16]
 800d2b6:	7823      	ldrb	r3, [r4, #0]
 800d2b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2ba:	d10a      	bne.n	800d2d2 <_vfiprintf_r+0x156>
 800d2bc:	7863      	ldrb	r3, [r4, #1]
 800d2be:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2c0:	d132      	bne.n	800d328 <_vfiprintf_r+0x1ac>
 800d2c2:	9b03      	ldr	r3, [sp, #12]
 800d2c4:	3402      	adds	r4, #2
 800d2c6:	1d1a      	adds	r2, r3, #4
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2ce:	9203      	str	r2, [sp, #12]
 800d2d0:	9305      	str	r3, [sp, #20]
 800d2d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3a8 <_vfiprintf_r+0x22c>
 800d2d6:	2203      	movs	r2, #3
 800d2d8:	7821      	ldrb	r1, [r4, #0]
 800d2da:	4650      	mov	r0, sl
 800d2dc:	f000 fb52 	bl	800d984 <memchr>
 800d2e0:	b138      	cbz	r0, 800d2f2 <_vfiprintf_r+0x176>
 800d2e2:	eba0 000a 	sub.w	r0, r0, sl
 800d2e6:	2240      	movs	r2, #64	@ 0x40
 800d2e8:	9b04      	ldr	r3, [sp, #16]
 800d2ea:	3401      	adds	r4, #1
 800d2ec:	4082      	lsls	r2, r0
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f6:	2206      	movs	r2, #6
 800d2f8:	4828      	ldr	r0, [pc, #160]	@ (800d39c <_vfiprintf_r+0x220>)
 800d2fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2fe:	f000 fb41 	bl	800d984 <memchr>
 800d302:	2800      	cmp	r0, #0
 800d304:	d03f      	beq.n	800d386 <_vfiprintf_r+0x20a>
 800d306:	4b26      	ldr	r3, [pc, #152]	@ (800d3a0 <_vfiprintf_r+0x224>)
 800d308:	bb1b      	cbnz	r3, 800d352 <_vfiprintf_r+0x1d6>
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	3307      	adds	r3, #7
 800d30e:	f023 0307 	bic.w	r3, r3, #7
 800d312:	3308      	adds	r3, #8
 800d314:	9303      	str	r3, [sp, #12]
 800d316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d318:	443b      	add	r3, r7
 800d31a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d31c:	e76a      	b.n	800d1f4 <_vfiprintf_r+0x78>
 800d31e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d322:	460c      	mov	r4, r1
 800d324:	2001      	movs	r0, #1
 800d326:	e7a8      	b.n	800d27a <_vfiprintf_r+0xfe>
 800d328:	2300      	movs	r3, #0
 800d32a:	3401      	adds	r4, #1
 800d32c:	f04f 0c0a 	mov.w	ip, #10
 800d330:	4619      	mov	r1, r3
 800d332:	9305      	str	r3, [sp, #20]
 800d334:	4620      	mov	r0, r4
 800d336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d33a:	3a30      	subs	r2, #48	@ 0x30
 800d33c:	2a09      	cmp	r2, #9
 800d33e:	d903      	bls.n	800d348 <_vfiprintf_r+0x1cc>
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0c6      	beq.n	800d2d2 <_vfiprintf_r+0x156>
 800d344:	9105      	str	r1, [sp, #20]
 800d346:	e7c4      	b.n	800d2d2 <_vfiprintf_r+0x156>
 800d348:	fb0c 2101 	mla	r1, ip, r1, r2
 800d34c:	4604      	mov	r4, r0
 800d34e:	2301      	movs	r3, #1
 800d350:	e7f0      	b.n	800d334 <_vfiprintf_r+0x1b8>
 800d352:	ab03      	add	r3, sp, #12
 800d354:	462a      	mov	r2, r5
 800d356:	a904      	add	r1, sp, #16
 800d358:	4630      	mov	r0, r6
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	4b11      	ldr	r3, [pc, #68]	@ (800d3a4 <_vfiprintf_r+0x228>)
 800d35e:	f3af 8000 	nop.w
 800d362:	4607      	mov	r7, r0
 800d364:	1c78      	adds	r0, r7, #1
 800d366:	d1d6      	bne.n	800d316 <_vfiprintf_r+0x19a>
 800d368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d36a:	07d9      	lsls	r1, r3, #31
 800d36c:	d405      	bmi.n	800d37a <_vfiprintf_r+0x1fe>
 800d36e:	89ab      	ldrh	r3, [r5, #12]
 800d370:	059a      	lsls	r2, r3, #22
 800d372:	d402      	bmi.n	800d37a <_vfiprintf_r+0x1fe>
 800d374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d376:	f7ff fc85 	bl	800cc84 <__retarget_lock_release_recursive>
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	065b      	lsls	r3, r3, #25
 800d37e:	f53f af1f 	bmi.w	800d1c0 <_vfiprintf_r+0x44>
 800d382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d384:	e71e      	b.n	800d1c4 <_vfiprintf_r+0x48>
 800d386:	ab03      	add	r3, sp, #12
 800d388:	462a      	mov	r2, r5
 800d38a:	a904      	add	r1, sp, #16
 800d38c:	4630      	mov	r0, r6
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	4b04      	ldr	r3, [pc, #16]	@ (800d3a4 <_vfiprintf_r+0x228>)
 800d392:	f000 f87d 	bl	800d490 <_printf_i>
 800d396:	e7e4      	b.n	800d362 <_vfiprintf_r+0x1e6>
 800d398:	0800db44 	.word	0x0800db44
 800d39c:	0800db4e 	.word	0x0800db4e
 800d3a0:	00000000 	.word	0x00000000
 800d3a4:	0800d157 	.word	0x0800d157
 800d3a8:	0800db4a 	.word	0x0800db4a

0800d3ac <_printf_common>:
 800d3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	4698      	mov	r8, r3
 800d3b4:	688a      	ldr	r2, [r1, #8]
 800d3b6:	4607      	mov	r7, r0
 800d3b8:	690b      	ldr	r3, [r1, #16]
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	bfb8      	it	lt
 800d3c4:	4613      	movlt	r3, r2
 800d3c6:	6033      	str	r3, [r6, #0]
 800d3c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d3cc:	b10a      	cbz	r2, 800d3d2 <_printf_common+0x26>
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	6033      	str	r3, [r6, #0]
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	0699      	lsls	r1, r3, #26
 800d3d6:	bf42      	ittt	mi
 800d3d8:	6833      	ldrmi	r3, [r6, #0]
 800d3da:	3302      	addmi	r3, #2
 800d3dc:	6033      	strmi	r3, [r6, #0]
 800d3de:	6825      	ldr	r5, [r4, #0]
 800d3e0:	f015 0506 	ands.w	r5, r5, #6
 800d3e4:	d106      	bne.n	800d3f4 <_printf_common+0x48>
 800d3e6:	f104 0a19 	add.w	sl, r4, #25
 800d3ea:	68e3      	ldr	r3, [r4, #12]
 800d3ec:	6832      	ldr	r2, [r6, #0]
 800d3ee:	1a9b      	subs	r3, r3, r2
 800d3f0:	42ab      	cmp	r3, r5
 800d3f2:	dc2b      	bgt.n	800d44c <_printf_common+0xa0>
 800d3f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3f8:	6822      	ldr	r2, [r4, #0]
 800d3fa:	3b00      	subs	r3, #0
 800d3fc:	bf18      	it	ne
 800d3fe:	2301      	movne	r3, #1
 800d400:	0692      	lsls	r2, r2, #26
 800d402:	d430      	bmi.n	800d466 <_printf_common+0xba>
 800d404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d408:	4641      	mov	r1, r8
 800d40a:	4638      	mov	r0, r7
 800d40c:	47c8      	blx	r9
 800d40e:	3001      	adds	r0, #1
 800d410:	d023      	beq.n	800d45a <_printf_common+0xae>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	341a      	adds	r4, #26
 800d416:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d41a:	f003 0306 	and.w	r3, r3, #6
 800d41e:	2b04      	cmp	r3, #4
 800d420:	bf0a      	itet	eq
 800d422:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d426:	2500      	movne	r5, #0
 800d428:	6833      	ldreq	r3, [r6, #0]
 800d42a:	f04f 0600 	mov.w	r6, #0
 800d42e:	bf08      	it	eq
 800d430:	1aed      	subeq	r5, r5, r3
 800d432:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d436:	bf08      	it	eq
 800d438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d43c:	4293      	cmp	r3, r2
 800d43e:	bfc4      	itt	gt
 800d440:	1a9b      	subgt	r3, r3, r2
 800d442:	18ed      	addgt	r5, r5, r3
 800d444:	42b5      	cmp	r5, r6
 800d446:	d11a      	bne.n	800d47e <_printf_common+0xd2>
 800d448:	2000      	movs	r0, #0
 800d44a:	e008      	b.n	800d45e <_printf_common+0xb2>
 800d44c:	2301      	movs	r3, #1
 800d44e:	4652      	mov	r2, sl
 800d450:	4641      	mov	r1, r8
 800d452:	4638      	mov	r0, r7
 800d454:	47c8      	blx	r9
 800d456:	3001      	adds	r0, #1
 800d458:	d103      	bne.n	800d462 <_printf_common+0xb6>
 800d45a:	f04f 30ff 	mov.w	r0, #4294967295
 800d45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d462:	3501      	adds	r5, #1
 800d464:	e7c1      	b.n	800d3ea <_printf_common+0x3e>
 800d466:	18e1      	adds	r1, r4, r3
 800d468:	1c5a      	adds	r2, r3, #1
 800d46a:	2030      	movs	r0, #48	@ 0x30
 800d46c:	3302      	adds	r3, #2
 800d46e:	4422      	add	r2, r4
 800d470:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d478:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d47c:	e7c2      	b.n	800d404 <_printf_common+0x58>
 800d47e:	2301      	movs	r3, #1
 800d480:	4622      	mov	r2, r4
 800d482:	4641      	mov	r1, r8
 800d484:	4638      	mov	r0, r7
 800d486:	47c8      	blx	r9
 800d488:	3001      	adds	r0, #1
 800d48a:	d0e6      	beq.n	800d45a <_printf_common+0xae>
 800d48c:	3601      	adds	r6, #1
 800d48e:	e7d9      	b.n	800d444 <_printf_common+0x98>

0800d490 <_printf_i>:
 800d490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d494:	7e0f      	ldrb	r7, [r1, #24]
 800d496:	4691      	mov	r9, r2
 800d498:	4680      	mov	r8, r0
 800d49a:	460c      	mov	r4, r1
 800d49c:	2f78      	cmp	r7, #120	@ 0x78
 800d49e:	469a      	mov	sl, r3
 800d4a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d4a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d4a6:	d807      	bhi.n	800d4b8 <_printf_i+0x28>
 800d4a8:	2f62      	cmp	r7, #98	@ 0x62
 800d4aa:	d80a      	bhi.n	800d4c2 <_printf_i+0x32>
 800d4ac:	2f00      	cmp	r7, #0
 800d4ae:	f000 80d2 	beq.w	800d656 <_printf_i+0x1c6>
 800d4b2:	2f58      	cmp	r7, #88	@ 0x58
 800d4b4:	f000 80b9 	beq.w	800d62a <_printf_i+0x19a>
 800d4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d4c0:	e03a      	b.n	800d538 <_printf_i+0xa8>
 800d4c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d4c6:	2b15      	cmp	r3, #21
 800d4c8:	d8f6      	bhi.n	800d4b8 <_printf_i+0x28>
 800d4ca:	a101      	add	r1, pc, #4	@ (adr r1, 800d4d0 <_printf_i+0x40>)
 800d4cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4d0:	0800d529 	.word	0x0800d529
 800d4d4:	0800d53d 	.word	0x0800d53d
 800d4d8:	0800d4b9 	.word	0x0800d4b9
 800d4dc:	0800d4b9 	.word	0x0800d4b9
 800d4e0:	0800d4b9 	.word	0x0800d4b9
 800d4e4:	0800d4b9 	.word	0x0800d4b9
 800d4e8:	0800d53d 	.word	0x0800d53d
 800d4ec:	0800d4b9 	.word	0x0800d4b9
 800d4f0:	0800d4b9 	.word	0x0800d4b9
 800d4f4:	0800d4b9 	.word	0x0800d4b9
 800d4f8:	0800d4b9 	.word	0x0800d4b9
 800d4fc:	0800d63d 	.word	0x0800d63d
 800d500:	0800d567 	.word	0x0800d567
 800d504:	0800d5f7 	.word	0x0800d5f7
 800d508:	0800d4b9 	.word	0x0800d4b9
 800d50c:	0800d4b9 	.word	0x0800d4b9
 800d510:	0800d65f 	.word	0x0800d65f
 800d514:	0800d4b9 	.word	0x0800d4b9
 800d518:	0800d567 	.word	0x0800d567
 800d51c:	0800d4b9 	.word	0x0800d4b9
 800d520:	0800d4b9 	.word	0x0800d4b9
 800d524:	0800d5ff 	.word	0x0800d5ff
 800d528:	6833      	ldr	r3, [r6, #0]
 800d52a:	1d1a      	adds	r2, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6032      	str	r2, [r6, #0]
 800d530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d538:	2301      	movs	r3, #1
 800d53a:	e09d      	b.n	800d678 <_printf_i+0x1e8>
 800d53c:	6833      	ldr	r3, [r6, #0]
 800d53e:	6820      	ldr	r0, [r4, #0]
 800d540:	1d19      	adds	r1, r3, #4
 800d542:	6031      	str	r1, [r6, #0]
 800d544:	0606      	lsls	r6, r0, #24
 800d546:	d501      	bpl.n	800d54c <_printf_i+0xbc>
 800d548:	681d      	ldr	r5, [r3, #0]
 800d54a:	e003      	b.n	800d554 <_printf_i+0xc4>
 800d54c:	0645      	lsls	r5, r0, #25
 800d54e:	d5fb      	bpl.n	800d548 <_printf_i+0xb8>
 800d550:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d554:	2d00      	cmp	r5, #0
 800d556:	da03      	bge.n	800d560 <_printf_i+0xd0>
 800d558:	232d      	movs	r3, #45	@ 0x2d
 800d55a:	426d      	negs	r5, r5
 800d55c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d560:	4859      	ldr	r0, [pc, #356]	@ (800d6c8 <_printf_i+0x238>)
 800d562:	230a      	movs	r3, #10
 800d564:	e011      	b.n	800d58a <_printf_i+0xfa>
 800d566:	6821      	ldr	r1, [r4, #0]
 800d568:	6833      	ldr	r3, [r6, #0]
 800d56a:	0608      	lsls	r0, r1, #24
 800d56c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d570:	d402      	bmi.n	800d578 <_printf_i+0xe8>
 800d572:	0649      	lsls	r1, r1, #25
 800d574:	bf48      	it	mi
 800d576:	b2ad      	uxthmi	r5, r5
 800d578:	2f6f      	cmp	r7, #111	@ 0x6f
 800d57a:	6033      	str	r3, [r6, #0]
 800d57c:	4852      	ldr	r0, [pc, #328]	@ (800d6c8 <_printf_i+0x238>)
 800d57e:	bf14      	ite	ne
 800d580:	230a      	movne	r3, #10
 800d582:	2308      	moveq	r3, #8
 800d584:	2100      	movs	r1, #0
 800d586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d58a:	6866      	ldr	r6, [r4, #4]
 800d58c:	2e00      	cmp	r6, #0
 800d58e:	60a6      	str	r6, [r4, #8]
 800d590:	bfa2      	ittt	ge
 800d592:	6821      	ldrge	r1, [r4, #0]
 800d594:	f021 0104 	bicge.w	r1, r1, #4
 800d598:	6021      	strge	r1, [r4, #0]
 800d59a:	b90d      	cbnz	r5, 800d5a0 <_printf_i+0x110>
 800d59c:	2e00      	cmp	r6, #0
 800d59e:	d04b      	beq.n	800d638 <_printf_i+0x1a8>
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d5a6:	fb03 5711 	mls	r7, r3, r1, r5
 800d5aa:	5dc7      	ldrb	r7, [r0, r7]
 800d5ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d5b0:	462f      	mov	r7, r5
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	42bb      	cmp	r3, r7
 800d5b6:	d9f4      	bls.n	800d5a2 <_printf_i+0x112>
 800d5b8:	2b08      	cmp	r3, #8
 800d5ba:	d10b      	bne.n	800d5d4 <_printf_i+0x144>
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	07df      	lsls	r7, r3, #31
 800d5c0:	d508      	bpl.n	800d5d4 <_printf_i+0x144>
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	6861      	ldr	r1, [r4, #4]
 800d5c6:	4299      	cmp	r1, r3
 800d5c8:	bfde      	ittt	le
 800d5ca:	2330      	movle	r3, #48	@ 0x30
 800d5cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d5d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d5d4:	1b92      	subs	r2, r2, r6
 800d5d6:	6122      	str	r2, [r4, #16]
 800d5d8:	464b      	mov	r3, r9
 800d5da:	aa03      	add	r2, sp, #12
 800d5dc:	4621      	mov	r1, r4
 800d5de:	4640      	mov	r0, r8
 800d5e0:	f8cd a000 	str.w	sl, [sp]
 800d5e4:	f7ff fee2 	bl	800d3ac <_printf_common>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	d14a      	bne.n	800d682 <_printf_i+0x1f2>
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f0:	b004      	add	sp, #16
 800d5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	f043 0320 	orr.w	r3, r3, #32
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	2778      	movs	r7, #120	@ 0x78
 800d600:	4832      	ldr	r0, [pc, #200]	@ (800d6cc <_printf_i+0x23c>)
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d608:	061f      	lsls	r7, r3, #24
 800d60a:	6831      	ldr	r1, [r6, #0]
 800d60c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d610:	d402      	bmi.n	800d618 <_printf_i+0x188>
 800d612:	065f      	lsls	r7, r3, #25
 800d614:	bf48      	it	mi
 800d616:	b2ad      	uxthmi	r5, r5
 800d618:	6031      	str	r1, [r6, #0]
 800d61a:	07d9      	lsls	r1, r3, #31
 800d61c:	bf44      	itt	mi
 800d61e:	f043 0320 	orrmi.w	r3, r3, #32
 800d622:	6023      	strmi	r3, [r4, #0]
 800d624:	b11d      	cbz	r5, 800d62e <_printf_i+0x19e>
 800d626:	2310      	movs	r3, #16
 800d628:	e7ac      	b.n	800d584 <_printf_i+0xf4>
 800d62a:	4827      	ldr	r0, [pc, #156]	@ (800d6c8 <_printf_i+0x238>)
 800d62c:	e7e9      	b.n	800d602 <_printf_i+0x172>
 800d62e:	6823      	ldr	r3, [r4, #0]
 800d630:	f023 0320 	bic.w	r3, r3, #32
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	e7f6      	b.n	800d626 <_printf_i+0x196>
 800d638:	4616      	mov	r6, r2
 800d63a:	e7bd      	b.n	800d5b8 <_printf_i+0x128>
 800d63c:	6833      	ldr	r3, [r6, #0]
 800d63e:	6825      	ldr	r5, [r4, #0]
 800d640:	1d18      	adds	r0, r3, #4
 800d642:	6961      	ldr	r1, [r4, #20]
 800d644:	6030      	str	r0, [r6, #0]
 800d646:	062e      	lsls	r6, r5, #24
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	d501      	bpl.n	800d650 <_printf_i+0x1c0>
 800d64c:	6019      	str	r1, [r3, #0]
 800d64e:	e002      	b.n	800d656 <_printf_i+0x1c6>
 800d650:	0668      	lsls	r0, r5, #25
 800d652:	d5fb      	bpl.n	800d64c <_printf_i+0x1bc>
 800d654:	8019      	strh	r1, [r3, #0]
 800d656:	2300      	movs	r3, #0
 800d658:	4616      	mov	r6, r2
 800d65a:	6123      	str	r3, [r4, #16]
 800d65c:	e7bc      	b.n	800d5d8 <_printf_i+0x148>
 800d65e:	6833      	ldr	r3, [r6, #0]
 800d660:	2100      	movs	r1, #0
 800d662:	1d1a      	adds	r2, r3, #4
 800d664:	6032      	str	r2, [r6, #0]
 800d666:	681e      	ldr	r6, [r3, #0]
 800d668:	6862      	ldr	r2, [r4, #4]
 800d66a:	4630      	mov	r0, r6
 800d66c:	f000 f98a 	bl	800d984 <memchr>
 800d670:	b108      	cbz	r0, 800d676 <_printf_i+0x1e6>
 800d672:	1b80      	subs	r0, r0, r6
 800d674:	6060      	str	r0, [r4, #4]
 800d676:	6863      	ldr	r3, [r4, #4]
 800d678:	6123      	str	r3, [r4, #16]
 800d67a:	2300      	movs	r3, #0
 800d67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d680:	e7aa      	b.n	800d5d8 <_printf_i+0x148>
 800d682:	6923      	ldr	r3, [r4, #16]
 800d684:	4632      	mov	r2, r6
 800d686:	4649      	mov	r1, r9
 800d688:	4640      	mov	r0, r8
 800d68a:	47d0      	blx	sl
 800d68c:	3001      	adds	r0, #1
 800d68e:	d0ad      	beq.n	800d5ec <_printf_i+0x15c>
 800d690:	6823      	ldr	r3, [r4, #0]
 800d692:	079b      	lsls	r3, r3, #30
 800d694:	d413      	bmi.n	800d6be <_printf_i+0x22e>
 800d696:	68e0      	ldr	r0, [r4, #12]
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	4298      	cmp	r0, r3
 800d69c:	bfb8      	it	lt
 800d69e:	4618      	movlt	r0, r3
 800d6a0:	e7a6      	b.n	800d5f0 <_printf_i+0x160>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	4632      	mov	r2, r6
 800d6a6:	4649      	mov	r1, r9
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	47d0      	blx	sl
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d09d      	beq.n	800d5ec <_printf_i+0x15c>
 800d6b0:	3501      	adds	r5, #1
 800d6b2:	68e3      	ldr	r3, [r4, #12]
 800d6b4:	9903      	ldr	r1, [sp, #12]
 800d6b6:	1a5b      	subs	r3, r3, r1
 800d6b8:	42ab      	cmp	r3, r5
 800d6ba:	dcf2      	bgt.n	800d6a2 <_printf_i+0x212>
 800d6bc:	e7eb      	b.n	800d696 <_printf_i+0x206>
 800d6be:	2500      	movs	r5, #0
 800d6c0:	f104 0619 	add.w	r6, r4, #25
 800d6c4:	e7f5      	b.n	800d6b2 <_printf_i+0x222>
 800d6c6:	bf00      	nop
 800d6c8:	0800db55 	.word	0x0800db55
 800d6cc:	0800db66 	.word	0x0800db66

0800d6d0 <__sflush_r>:
 800d6d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	0716      	lsls	r6, r2, #28
 800d6da:	4605      	mov	r5, r0
 800d6dc:	460c      	mov	r4, r1
 800d6de:	d454      	bmi.n	800d78a <__sflush_r+0xba>
 800d6e0:	684b      	ldr	r3, [r1, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	dc02      	bgt.n	800d6ec <__sflush_r+0x1c>
 800d6e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	dd48      	ble.n	800d77e <__sflush_r+0xae>
 800d6ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6ee:	2e00      	cmp	r6, #0
 800d6f0:	d045      	beq.n	800d77e <__sflush_r+0xae>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6f8:	682f      	ldr	r7, [r5, #0]
 800d6fa:	6a21      	ldr	r1, [r4, #32]
 800d6fc:	602b      	str	r3, [r5, #0]
 800d6fe:	d030      	beq.n	800d762 <__sflush_r+0x92>
 800d700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d702:	89a3      	ldrh	r3, [r4, #12]
 800d704:	0759      	lsls	r1, r3, #29
 800d706:	d505      	bpl.n	800d714 <__sflush_r+0x44>
 800d708:	6863      	ldr	r3, [r4, #4]
 800d70a:	1ad2      	subs	r2, r2, r3
 800d70c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d70e:	b10b      	cbz	r3, 800d714 <__sflush_r+0x44>
 800d710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d712:	1ad2      	subs	r2, r2, r3
 800d714:	2300      	movs	r3, #0
 800d716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d718:	6a21      	ldr	r1, [r4, #32]
 800d71a:	4628      	mov	r0, r5
 800d71c:	47b0      	blx	r6
 800d71e:	1c43      	adds	r3, r0, #1
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	d106      	bne.n	800d732 <__sflush_r+0x62>
 800d724:	6829      	ldr	r1, [r5, #0]
 800d726:	291d      	cmp	r1, #29
 800d728:	d82b      	bhi.n	800d782 <__sflush_r+0xb2>
 800d72a:	4a2a      	ldr	r2, [pc, #168]	@ (800d7d4 <__sflush_r+0x104>)
 800d72c:	410a      	asrs	r2, r1
 800d72e:	07d6      	lsls	r6, r2, #31
 800d730:	d427      	bmi.n	800d782 <__sflush_r+0xb2>
 800d732:	2200      	movs	r2, #0
 800d734:	04d9      	lsls	r1, r3, #19
 800d736:	6062      	str	r2, [r4, #4]
 800d738:	6922      	ldr	r2, [r4, #16]
 800d73a:	6022      	str	r2, [r4, #0]
 800d73c:	d504      	bpl.n	800d748 <__sflush_r+0x78>
 800d73e:	1c42      	adds	r2, r0, #1
 800d740:	d101      	bne.n	800d746 <__sflush_r+0x76>
 800d742:	682b      	ldr	r3, [r5, #0]
 800d744:	b903      	cbnz	r3, 800d748 <__sflush_r+0x78>
 800d746:	6560      	str	r0, [r4, #84]	@ 0x54
 800d748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d74a:	602f      	str	r7, [r5, #0]
 800d74c:	b1b9      	cbz	r1, 800d77e <__sflush_r+0xae>
 800d74e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d752:	4299      	cmp	r1, r3
 800d754:	d002      	beq.n	800d75c <__sflush_r+0x8c>
 800d756:	4628      	mov	r0, r5
 800d758:	f7ff fa96 	bl	800cc88 <_free_r>
 800d75c:	2300      	movs	r3, #0
 800d75e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d760:	e00d      	b.n	800d77e <__sflush_r+0xae>
 800d762:	2301      	movs	r3, #1
 800d764:	4628      	mov	r0, r5
 800d766:	47b0      	blx	r6
 800d768:	4602      	mov	r2, r0
 800d76a:	1c50      	adds	r0, r2, #1
 800d76c:	d1c9      	bne.n	800d702 <__sflush_r+0x32>
 800d76e:	682b      	ldr	r3, [r5, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0c6      	beq.n	800d702 <__sflush_r+0x32>
 800d774:	2b1d      	cmp	r3, #29
 800d776:	d001      	beq.n	800d77c <__sflush_r+0xac>
 800d778:	2b16      	cmp	r3, #22
 800d77a:	d11d      	bne.n	800d7b8 <__sflush_r+0xe8>
 800d77c:	602f      	str	r7, [r5, #0]
 800d77e:	2000      	movs	r0, #0
 800d780:	e021      	b.n	800d7c6 <__sflush_r+0xf6>
 800d782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d786:	b21b      	sxth	r3, r3
 800d788:	e01a      	b.n	800d7c0 <__sflush_r+0xf0>
 800d78a:	690f      	ldr	r7, [r1, #16]
 800d78c:	2f00      	cmp	r7, #0
 800d78e:	d0f6      	beq.n	800d77e <__sflush_r+0xae>
 800d790:	0793      	lsls	r3, r2, #30
 800d792:	680e      	ldr	r6, [r1, #0]
 800d794:	600f      	str	r7, [r1, #0]
 800d796:	bf0c      	ite	eq
 800d798:	694b      	ldreq	r3, [r1, #20]
 800d79a:	2300      	movne	r3, #0
 800d79c:	eba6 0807 	sub.w	r8, r6, r7
 800d7a0:	608b      	str	r3, [r1, #8]
 800d7a2:	f1b8 0f00 	cmp.w	r8, #0
 800d7a6:	ddea      	ble.n	800d77e <__sflush_r+0xae>
 800d7a8:	4643      	mov	r3, r8
 800d7aa:	463a      	mov	r2, r7
 800d7ac:	6a21      	ldr	r1, [r4, #32]
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d7b2:	47b0      	blx	r6
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	dc08      	bgt.n	800d7ca <__sflush_r+0xfa>
 800d7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ca:	4407      	add	r7, r0
 800d7cc:	eba8 0800 	sub.w	r8, r8, r0
 800d7d0:	e7e7      	b.n	800d7a2 <__sflush_r+0xd2>
 800d7d2:	bf00      	nop
 800d7d4:	dfbffffe 	.word	0xdfbffffe

0800d7d8 <_fflush_r>:
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	690b      	ldr	r3, [r1, #16]
 800d7dc:	4605      	mov	r5, r0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	b913      	cbnz	r3, 800d7e8 <_fflush_r+0x10>
 800d7e2:	2500      	movs	r5, #0
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	b118      	cbz	r0, 800d7f2 <_fflush_r+0x1a>
 800d7ea:	6a03      	ldr	r3, [r0, #32]
 800d7ec:	b90b      	cbnz	r3, 800d7f2 <_fflush_r+0x1a>
 800d7ee:	f7ff f81d 	bl	800c82c <__sinit>
 800d7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0f3      	beq.n	800d7e2 <_fflush_r+0xa>
 800d7fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7fc:	07d0      	lsls	r0, r2, #31
 800d7fe:	d404      	bmi.n	800d80a <_fflush_r+0x32>
 800d800:	0599      	lsls	r1, r3, #22
 800d802:	d402      	bmi.n	800d80a <_fflush_r+0x32>
 800d804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d806:	f7ff fa3c 	bl	800cc82 <__retarget_lock_acquire_recursive>
 800d80a:	4628      	mov	r0, r5
 800d80c:	4621      	mov	r1, r4
 800d80e:	f7ff ff5f 	bl	800d6d0 <__sflush_r>
 800d812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d814:	4605      	mov	r5, r0
 800d816:	07da      	lsls	r2, r3, #31
 800d818:	d4e4      	bmi.n	800d7e4 <_fflush_r+0xc>
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	059b      	lsls	r3, r3, #22
 800d81e:	d4e1      	bmi.n	800d7e4 <_fflush_r+0xc>
 800d820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d822:	f7ff fa2f 	bl	800cc84 <__retarget_lock_release_recursive>
 800d826:	e7dd      	b.n	800d7e4 <_fflush_r+0xc>

0800d828 <__swhatbuf_r>:
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	460c      	mov	r4, r1
 800d82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d830:	b096      	sub	sp, #88	@ 0x58
 800d832:	4615      	mov	r5, r2
 800d834:	2900      	cmp	r1, #0
 800d836:	461e      	mov	r6, r3
 800d838:	da0c      	bge.n	800d854 <__swhatbuf_r+0x2c>
 800d83a:	89a3      	ldrh	r3, [r4, #12]
 800d83c:	2100      	movs	r1, #0
 800d83e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d842:	bf14      	ite	ne
 800d844:	2340      	movne	r3, #64	@ 0x40
 800d846:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d84a:	2000      	movs	r0, #0
 800d84c:	6031      	str	r1, [r6, #0]
 800d84e:	602b      	str	r3, [r5, #0]
 800d850:	b016      	add	sp, #88	@ 0x58
 800d852:	bd70      	pop	{r4, r5, r6, pc}
 800d854:	466a      	mov	r2, sp
 800d856:	f000 f863 	bl	800d920 <_fstat_r>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	dbed      	blt.n	800d83a <__swhatbuf_r+0x12>
 800d85e:	9901      	ldr	r1, [sp, #4]
 800d860:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d864:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d868:	4259      	negs	r1, r3
 800d86a:	4159      	adcs	r1, r3
 800d86c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d870:	e7eb      	b.n	800d84a <__swhatbuf_r+0x22>

0800d872 <__smakebuf_r>:
 800d872:	898b      	ldrh	r3, [r1, #12]
 800d874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d876:	079d      	lsls	r5, r3, #30
 800d878:	4606      	mov	r6, r0
 800d87a:	460c      	mov	r4, r1
 800d87c:	d507      	bpl.n	800d88e <__smakebuf_r+0x1c>
 800d87e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	6123      	str	r3, [r4, #16]
 800d886:	2301      	movs	r3, #1
 800d888:	6163      	str	r3, [r4, #20]
 800d88a:	b003      	add	sp, #12
 800d88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d88e:	ab01      	add	r3, sp, #4
 800d890:	466a      	mov	r2, sp
 800d892:	f7ff ffc9 	bl	800d828 <__swhatbuf_r>
 800d896:	9f00      	ldr	r7, [sp, #0]
 800d898:	4605      	mov	r5, r0
 800d89a:	4630      	mov	r0, r6
 800d89c:	4639      	mov	r1, r7
 800d89e:	f7ff fa5f 	bl	800cd60 <_malloc_r>
 800d8a2:	b948      	cbnz	r0, 800d8b8 <__smakebuf_r+0x46>
 800d8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a8:	059a      	lsls	r2, r3, #22
 800d8aa:	d4ee      	bmi.n	800d88a <__smakebuf_r+0x18>
 800d8ac:	f023 0303 	bic.w	r3, r3, #3
 800d8b0:	f043 0302 	orr.w	r3, r3, #2
 800d8b4:	81a3      	strh	r3, [r4, #12]
 800d8b6:	e7e2      	b.n	800d87e <__smakebuf_r+0xc>
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	6020      	str	r0, [r4, #0]
 800d8bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	9b01      	ldr	r3, [sp, #4]
 800d8c4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8c8:	b15b      	cbz	r3, 800d8e2 <__smakebuf_r+0x70>
 800d8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f000 f838 	bl	800d944 <_isatty_r>
 800d8d4:	b128      	cbz	r0, 800d8e2 <__smakebuf_r+0x70>
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	f023 0303 	bic.w	r3, r3, #3
 800d8dc:	f043 0301 	orr.w	r3, r3, #1
 800d8e0:	81a3      	strh	r3, [r4, #12]
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	431d      	orrs	r5, r3
 800d8e6:	81a5      	strh	r5, [r4, #12]
 800d8e8:	e7cf      	b.n	800d88a <__smakebuf_r+0x18>

0800d8ea <memmove>:
 800d8ea:	4288      	cmp	r0, r1
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	eb01 0402 	add.w	r4, r1, r2
 800d8f2:	d902      	bls.n	800d8fa <memmove+0x10>
 800d8f4:	4284      	cmp	r4, r0
 800d8f6:	4623      	mov	r3, r4
 800d8f8:	d807      	bhi.n	800d90a <memmove+0x20>
 800d8fa:	1e43      	subs	r3, r0, #1
 800d8fc:	42a1      	cmp	r1, r4
 800d8fe:	d008      	beq.n	800d912 <memmove+0x28>
 800d900:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d904:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d908:	e7f8      	b.n	800d8fc <memmove+0x12>
 800d90a:	4402      	add	r2, r0
 800d90c:	4601      	mov	r1, r0
 800d90e:	428a      	cmp	r2, r1
 800d910:	d100      	bne.n	800d914 <memmove+0x2a>
 800d912:	bd10      	pop	{r4, pc}
 800d914:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d918:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d91c:	e7f7      	b.n	800d90e <memmove+0x24>
	...

0800d920 <_fstat_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	2300      	movs	r3, #0
 800d924:	4d06      	ldr	r5, [pc, #24]	@ (800d940 <_fstat_r+0x20>)
 800d926:	4604      	mov	r4, r0
 800d928:	4608      	mov	r0, r1
 800d92a:	4611      	mov	r1, r2
 800d92c:	602b      	str	r3, [r5, #0]
 800d92e:	f7f3 fe80 	bl	8001632 <_fstat>
 800d932:	1c43      	adds	r3, r0, #1
 800d934:	d102      	bne.n	800d93c <_fstat_r+0x1c>
 800d936:	682b      	ldr	r3, [r5, #0]
 800d938:	b103      	cbz	r3, 800d93c <_fstat_r+0x1c>
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	bd38      	pop	{r3, r4, r5, pc}
 800d93e:	bf00      	nop
 800d940:	20001b14 	.word	0x20001b14

0800d944 <_isatty_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	2300      	movs	r3, #0
 800d948:	4d05      	ldr	r5, [pc, #20]	@ (800d960 <_isatty_r+0x1c>)
 800d94a:	4604      	mov	r4, r0
 800d94c:	4608      	mov	r0, r1
 800d94e:	602b      	str	r3, [r5, #0]
 800d950:	f7f3 fe7f 	bl	8001652 <_isatty>
 800d954:	1c43      	adds	r3, r0, #1
 800d956:	d102      	bne.n	800d95e <_isatty_r+0x1a>
 800d958:	682b      	ldr	r3, [r5, #0]
 800d95a:	b103      	cbz	r3, 800d95e <_isatty_r+0x1a>
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	20001b14 	.word	0x20001b14

0800d964 <_sbrk_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	2300      	movs	r3, #0
 800d968:	4d05      	ldr	r5, [pc, #20]	@ (800d980 <_sbrk_r+0x1c>)
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	602b      	str	r3, [r5, #0]
 800d970:	f7f3 fe88 	bl	8001684 <_sbrk>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_sbrk_r+0x1a>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_sbrk_r+0x1a>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	20001b14 	.word	0x20001b14

0800d984 <memchr>:
 800d984:	b2c9      	uxtb	r1, r1
 800d986:	4603      	mov	r3, r0
 800d988:	4402      	add	r2, r0
 800d98a:	b510      	push	{r4, lr}
 800d98c:	4293      	cmp	r3, r2
 800d98e:	4618      	mov	r0, r3
 800d990:	d101      	bne.n	800d996 <memchr+0x12>
 800d992:	2000      	movs	r0, #0
 800d994:	e003      	b.n	800d99e <memchr+0x1a>
 800d996:	7804      	ldrb	r4, [r0, #0]
 800d998:	3301      	adds	r3, #1
 800d99a:	428c      	cmp	r4, r1
 800d99c:	d1f6      	bne.n	800d98c <memchr+0x8>
 800d99e:	bd10      	pop	{r4, pc}

0800d9a0 <memcpy>:
 800d9a0:	440a      	add	r2, r1
 800d9a2:	1e43      	subs	r3, r0, #1
 800d9a4:	4291      	cmp	r1, r2
 800d9a6:	d100      	bne.n	800d9aa <memcpy+0xa>
 800d9a8:	4770      	bx	lr
 800d9aa:	b510      	push	{r4, lr}
 800d9ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9b0:	4291      	cmp	r1, r2
 800d9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9b6:	d1f9      	bne.n	800d9ac <memcpy+0xc>
 800d9b8:	bd10      	pop	{r4, pc}

0800d9ba <_realloc_r>:
 800d9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9be:	4680      	mov	r8, r0
 800d9c0:	4615      	mov	r5, r2
 800d9c2:	460c      	mov	r4, r1
 800d9c4:	b921      	cbnz	r1, 800d9d0 <_realloc_r+0x16>
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9cc:	f7ff b9c8 	b.w	800cd60 <_malloc_r>
 800d9d0:	b92a      	cbnz	r2, 800d9de <_realloc_r+0x24>
 800d9d2:	f7ff f959 	bl	800cc88 <_free_r>
 800d9d6:	2400      	movs	r4, #0
 800d9d8:	4620      	mov	r0, r4
 800d9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9de:	f000 f81a 	bl	800da16 <_malloc_usable_size_r>
 800d9e2:	4285      	cmp	r5, r0
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	d802      	bhi.n	800d9ee <_realloc_r+0x34>
 800d9e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9ec:	d8f4      	bhi.n	800d9d8 <_realloc_r+0x1e>
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	4640      	mov	r0, r8
 800d9f2:	f7ff f9b5 	bl	800cd60 <_malloc_r>
 800d9f6:	4607      	mov	r7, r0
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d0ec      	beq.n	800d9d6 <_realloc_r+0x1c>
 800d9fc:	42b5      	cmp	r5, r6
 800d9fe:	462a      	mov	r2, r5
 800da00:	4621      	mov	r1, r4
 800da02:	bf28      	it	cs
 800da04:	4632      	movcs	r2, r6
 800da06:	f7ff ffcb 	bl	800d9a0 <memcpy>
 800da0a:	4621      	mov	r1, r4
 800da0c:	4640      	mov	r0, r8
 800da0e:	463c      	mov	r4, r7
 800da10:	f7ff f93a 	bl	800cc88 <_free_r>
 800da14:	e7e0      	b.n	800d9d8 <_realloc_r+0x1e>

0800da16 <_malloc_usable_size_r>:
 800da16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da1a:	1f18      	subs	r0, r3, #4
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	bfbc      	itt	lt
 800da20:	580b      	ldrlt	r3, [r1, r0]
 800da22:	18c0      	addlt	r0, r0, r3
 800da24:	4770      	bx	lr
	...

0800da28 <_init>:
 800da28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2a:	bf00      	nop
 800da2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da2e:	bc08      	pop	{r3}
 800da30:	469e      	mov	lr, r3
 800da32:	4770      	bx	lr

0800da34 <_fini>:
 800da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da36:	bf00      	nop
 800da38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da3a:	bc08      	pop	{r3}
 800da3c:	469e      	mov	lr, r3
 800da3e:	4770      	bx	lr
